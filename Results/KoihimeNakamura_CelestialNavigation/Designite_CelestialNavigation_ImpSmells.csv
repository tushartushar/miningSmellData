Implementation smell,Namespace,Class,File,Method,Description
Long Method,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The method has 178 lines of code.
Long Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The method has 102 lines of code.
Long Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The method has 102 lines of code.
Long Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The method has 114 lines of code.
Long Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The method has 159 lines of code.
Long Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The method has 100 lines of code.
Long Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The method has 213 lines of code.
Long Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The method has 198 lines of code.
Complex Method,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,Cyclomatic complexity of the method is 11
Complex Method,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,Cyclomatic complexity of the method is 23
Complex Method,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,Cyclomatic complexity of the method is 37
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,Cyclomatic complexity of the method is 9
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,Cyclomatic complexity of the method is 11
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,Cyclomatic complexity of the method is 8
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,Cyclomatic complexity of the method is 16
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,Cyclomatic complexity of the method is 42
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,Cyclomatic complexity of the method is 11
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,Cyclomatic complexity of the method is 11
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,Cyclomatic complexity of the method is 29
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,Cyclomatic complexity of the method is 10
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,Cyclomatic complexity of the method is 26
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,Cyclomatic complexity of the method is 28
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,Cyclomatic complexity of the method is 10
Complex Method,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,Cyclomatic complexity of the method is 36
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,Satellite,Cyclomatic complexity of the method is 10
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,Cyclomatic complexity of the method is 25
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,Cyclomatic complexity of the method is 34
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,Cyclomatic complexity of the method is 12
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,Cyclomatic complexity of the method is 31
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,Cyclomatic complexity of the method is 17
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,Cyclomatic complexity of the method is 9
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,Cyclomatic complexity of the method is 19
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,Cyclomatic complexity of the method is 30
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,Cyclomatic complexity of the method is 20
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,Cyclomatic complexity of the method is 29
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,Cyclomatic complexity of the method is 18
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,Cyclomatic complexity of the method is 18
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,Cyclomatic complexity of the method is 17
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,Cyclomatic complexity of the method is 17
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,Cyclomatic complexity of the method is 33
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genGenericName,Cyclomatic complexity of the method is 10
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,Cyclomatic complexity of the method is 61
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,Cyclomatic complexity of the method is 42
Complex Method,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,displayTidalData,Cyclomatic complexity of the method is 21
Complex Method,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,Cyclomatic complexity of the method is 8
Complex Method,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,Cyclomatic complexity of the method is 12
Complex Method,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,createCleanZones,Cyclomatic complexity of the method is 8
Long Parameter List,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,Satellite,The method has 5 parameters.
Long Parameter List,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,Star,The method has 5 parameters.
Long Parameter List,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The method has 5 parameters.
Long Statement,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The length of the statement  "						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)"; " is 201.
Long Statement,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The length of the statement  "						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)"; " is 201.
Long Statement,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The length of the statement  "							ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)"; " is 201.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ()); " is 126.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID); " is 141.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ()); " is 126.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID); " is 150.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1; " is 127.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound; " is 142.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "		double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0; " is 143.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "			double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass); " is 130.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) { " is 140.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "				if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) { " is 140.
Long Statement,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The length of the statement  "			this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM); " is 128.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The length of the statement  "	if (OptionCont.stableActivity && s.SatelliteSize >= Satellite.SIZE_SMALL && (s.baseType == Satellite.BASETYPE_MOON || s.baseType == Satellite.BASETYPE_TERRESTIAL)) { " is 165.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The length of the statement  "			if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) { " is 188.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The length of the statement  "			if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) { " is 162.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The length of the statement  "			if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) { " is 244.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The length of the statement  "				ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal; " is 124.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The length of the statement  "						libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName); " is 121.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The length of the statement  "		ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius); " is 172.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The length of the statement  "	//Dictionary<int' Dictionary<int'double> distChart = new Dictionary<int' Dictionary<int'double> = new Dictionary<int'double>>(); " is 128.
Long Statement,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The length of the statement  "		s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag); " is 133.
Long Statement,StarSystemGurpsGen,forbiddenZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Range Objects\forbiddenZone.cs,ToString,The length of the statement  "	ret = ret + Environment.NewLine + "      " + "From star " + Star.getDescSelfFlag (this.primaryStar) + " to " + Star.getDescSelfFlag (this.secondaryStar); " is 153.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The length of the statement  "	//MessageBox.Show(Star.getRadius(this.ourSystem.sysStars[this.starID].currMass' this.ourSystem.sysStars[this.starID].effTemp' this.ourSystem.sysStars[this.starID].currLumin' this.currAgeStatus).ToString()); " is 206.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The length of the statement  "	lblInnerFormation.Text = "Inner Radius of Formation Zone: " + Star.innerRadius (this.ourSystem.sysStars [this.starID].initLumin' this.ourSystem.sysStars [this.starID].initMass) + " AU"; " is 185.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The length of the statement  "	lblOuterFormation.Text = "Outer Radius of Formation Zone: " + Star.outerRadius (this.ourSystem.sysStars [this.starID].initMass) + " AU"; " is 136.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The length of the statement  "	lblPeriapsis.Text = "Periapsis: " + Star.getPeriapsis ((double)numEccent.Value' Convert.ToDouble (txtRadius.Text)) + " AU"; " is 123.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The length of the statement  "	lblEndSubGiant.Text = "End of the Sub Giant Sequence: " + this.ourSystem.sysStars [this.starID].evoLine.getSubLimit () + " GYr"; " is 128.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The length of the statement  "	lblEndGiantPhase.Text = "End of the Giant Phase: " + this.ourSystem.sysStars [this.starID].evoLine.getGiantLimit () + " GYr"; " is 125.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numCurrMass_Leave,The length of the statement  "	txtCurrLumin.Text = Math.Round (Star.getCurrLumin (this.currAgeChart' (double)numAge.Value' (double)numCurrMass.Value)' 3).ToString (); " is 135.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numCurrMass_Leave,The length of the statement  "	temp = Star.getCurrentTemp (this.currAgeChart' Convert.ToDouble (txtCurrLumin.Text)' (double)numAge.Value' (double)numCurrMass.Value' this.myDice); " is 147.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numCurrMass_Leave,The length of the statement  "	lblStellarRadius.Text = "Stellar Radius: " + Star.getRadius ((double)numCurrMass.Value' temp' Star.getCurrLumin (this.currAgeChart' (double)numAge.Value' (double)numCurrMass.Value)' this.currAgeChart.findCurrentAgeGroup ((double)numAge.Value)) + " AU"; " is 252.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numCurrMass_Leave,The length of the statement  "	lblInnerFormation.Text = "Inner Formation Range: " + Star.innerRadius (Convert.ToDouble (txtInitLumin.Text)' (double)numInitMass.Value) + " AU"; " is 144.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numAge_Leave,The length of the statement  "	txtCurrLumin.Text = Math.Round (Star.getCurrLumin (this.currAgeChart' (double)numAge.Value' (double)numCurrMass.Value)' 3).ToString (); " is 135.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numAge_Leave,The length of the statement  "	temp = Star.getCurrentTemp (this.currAgeChart' Convert.ToDouble (txtCurrLumin.Text)' (double)numAge.Value' (double)numCurrMass.Value' this.myDice); " is 147.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numAge_Leave,The length of the statement  "	lblStellarRadius.Text = Star.getRadius ((double)numCurrMass.Value' temp' Star.getCurrLumin (this.currAgeChart' (double)numAge.Value' (double)numCurrMass.Value)' this.currAgeChart.findCurrentAgeGroup ((double)numAge.Value)) + " AU"; " is 231.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numEccent_Leave,The length of the statement  "	lblPeriapsis.Text = "Periapsis: " + Orbital.getPeriapsis ((double)numEccent.Value' Convert.ToDouble (txtRadius.Text)) + " AU"; " is 126.
Long Statement,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numEccent_Leave,The length of the statement  "	lblApapsis.Text = "Apapsis: " + Orbital.getApapsis ((double)numEccent.Value' Convert.ToDouble (txtRadius.Text)) + " AU"; " is 120.
Long Statement,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getValidParent,The length of the statement  "	if ((parentFlag == Satellite.ORBIT_PRISEC) || (parentFlag == Satellite.ORBIT_PRISECTRI) || (parentFlag == Satellite.ORBIT_PRITRI) || (parentFlag == Star.IS_PRIMARY)) " is 165.
Long Statement,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getValidParent,The length of the statement  "	if ((parentFlag == Satellite.ORBIT_SECCOM) || (parentFlag == Satellite.ORBIT_SECTRI) || (parentFlag == Star.IS_SECONDARY)) " is 122.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The length of the statement  "		if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY)) " is 185.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The length of the statement  "		if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY)) " is 137.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,updateType,The length of the statement  "		if (!(this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON || this.baseType == Satellite.BASETYPE_UNSET)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The length of the statement  "			this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]); " is 148.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The length of the statement  "			this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]); " is 160.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The length of the statement  "	if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT || this.baseType == Satellite.BASETYPE_EMPTY || this.baseType == Satellite.BASETYPE_UNSET) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The length of the statement  "	if ((this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN) || (this.SatelliteType == Satellite.SUBTYPE_ROCK && this.SatelliteSize == Satellite.SIZE_SMALL)) { " is 154.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The length of the statement  "	if (this.SatelliteType == Satellite.SUBTYPE_ICE && (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE)) { " is 145.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The length of the statement  "	if (this.SatelliteType == Satellite.SUBTYPE_ICE && (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE)) " is 143.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The length of the statement  "		this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25); " is 123.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The length of the statement  "				this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON)); " is 121.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The length of the statement  "				this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON)); " is 121.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The length of the statement  "		ret = ret + nL + spacing + "Pressure: " + this.getDescAtmCategory () + " (" + Math.Round (this.atmPres' (numOfSmallDigits + 1)) + " atm)."; " is 139.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The length of the statement  "	ret = ret + nL + spacing + "Density: " + this.density + " Earth densities (" + (this.density * CONVFAC_DENSITY) + " g/cc)"; " is 123.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The length of the statement  "	ret = ret + nL + spacing + "Diameter: " + Math.Round (this.diameter' 3) + " Earth diameters (" + (Math.Round (this.diameter * CONVFAC_DIAMETER' 3)) + " km)"; " is 157.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The length of the statement  "	ret = ret + nL + spacing + "Gravity: " + Math.Round (this.gravity' 3) + " Earth gravities (" + Math.Round (this.gravity * CONVFAC_GRAVITY' 3) + " m/s²)"; " is 153.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The length of the statement  "	ret = ret + nL + spacing + "RVM: " + this.RVM + " (" + this.getRVMDesc () + ")' Tectonic: " + this.getTecDesc () + "' Volcanic: " + this.getVolDesc (); " is 151.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The length of the statement  "	ret = ret + nL + spacing + "Orbital Period: " + Math.Round (this.orbitalPeriod' 3) + "d (" + Math.Round (this.orbitalPeriod / 365.25' 3) + "y)."; " is 145.
Long Statement,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,displayTidalData,The length of the statement  "		toBeAdded = nL + spacing + "Tidal Force generated by " + ourFlag + " is " + String.Format ("{0:N2}"' tideVal) + "ft amplitude"; " is 127.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,createCleanZones,The length of the statement  "	this.zonesOfInterest.createCleanZones (Star.innerRadius (this.initLumin' this.initMass)' Star.outerRadius (this.initMass)); " is 123.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The length of the statement  "		return (Star.getMinLumin (mass) + ((age / ageL.getMainLimit ()) * (Star.getMaxLumin (mass) - Star.getMinLumin (mass)))); " is 120.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The length of the statement  "		return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4); " is 147.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,updateLumin,The length of the statement  "	if ((currStatus == StarAgeLine.RET_MAINBRANCH && this.currMass >= .45) || currStatus == StarAgeLine.RET_SUBBRANCH || currStatus == StarAgeLine.RET_GIANTBRANCH || currStatus == StarAgeLine.RET_GIANTBRANCH) " is 204.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,updateTemp,The length of the statement  "	if (this.evoLine.findCurrentAgeGroup (this.starAge) == StarAgeLine.RET_SUBBRANCH || this.evoLine.findCurrentAgeGroup (this.starAge) == StarAgeLine.RET_GIANTBRANCH) { " is 165.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,printSummaryLine,The length of the statement  "		desc = intro + " " + this.currMass + " solar masses' " + Math.Round (this.currLumin' OptionCont.numberOfDecimal) + " solar luminosities. Eff Temp: " + this.effTemp + "K' apparent color "; " is 187.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,printSummaryLine,The length of the statement  "		desc += this.starColor + ". This star orbits " + Star.getDescSelfFlag (this.parentID) + " at " + this.orbitalRadius + "AU out with an eccentricity of " + this.orbitalEccent; " is 173.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,printSummaryLine,The length of the statement  "		desc = intro + " " + this.currMass + " solar masses' " + Math.Round (this.currLumin' OptionCont.numberOfDecimal) + " solar luminosities. Eff Temp: " + this.effTemp + "K' apparent color "; " is 187.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,printOrbitalDetails,The length of the statement  "		return "Periapsis - " + Math.Round (Orbital.getPeriapsis (this.orbitalEccent' this.orbitalRadius)' OptionCont.numberOfDecimal) + " AU. Apapsis - " + Math.Round (Orbital.getApapsis (this.orbitalEccent' this.orbitalRadius)' OptionCont.numberOfDecimal); " is 250.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "	ret = ret + nL + "This star has " + this.currMass + " solar masses' and a current luminosity of " + Math.Round (this.currLumin' OptionCont.numberOfDecimal); " is 156.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "	ret = ret + nL + "solar luminosities. It has a surface temperature of " + Math.Round (this.effTemp' OptionCont.numberOfDecimal) + "K."; " is 135.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "		ret = ret + nL + "Formation Zones: " + Star.innerRadius (this.initLumin' this.initMass) + " AU to " + Math.Round (Star.outerRadius (this.initMass)' OptionCont.numberOfDecimal) + " AU"; " is 184.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "		ret = ret + nL + "Self ID: " + Star.getDescSelfFlag (this.selfID) + " and Parent ID: " + Star.getDescSelfFlag (this.parentID); " is 126.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "			ret = ret + nL + "This star will exit the main sequence phase in: " + (this.evoLine.getMainLimit () - this.starAge) + " Gyr"; " is 125.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "			ret = ret + nL + "Periapsis: " + Orbital.getPeriapsis (this.orbitalEccent' this.orbitalRadius) + " AU and Apapasis: " + Orbital.getApapsis (this.orbitalEccent' this.orbitalRadius) + " AU."; " is 189.
Long Statement,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The length of the statement  "		ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2); " is 134.
Long Statement,StarSystemGurpsGen,SystemRender,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\SystemRender.cs,SystemRender_Paint,The length of the statement  "	Point center = new Point ((int)Math.Floor ((double)this.Size.Width / 2)' (int)Math.Floor ((double)this.Size.Height / 2)); " is 121.
Long Statement,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,createCleanZones,The length of the statement  "		if (currentPos < o.lowerBound && o.lowerBound < this.creationRange.upperBound && this.creationRange.upperBound <= o.upperBound) { " is 129.
Long Statement,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,verifyRange,The length of the statement  "		if ((currentPos < checkRange.upperBound) && (currentPos < o.lowerBound) && (checkRange.upperBound >= o.lowerBound) && (checkRange.upperBound < o.upperBound)) { " is 159.
Long Statement,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The length of the statement  "		if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) { " is 163.
Complex Conditional,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The conditional expression  "roll == 9 || roll == 10 || roll == 11 || roll == 12"  is complex.
Complex Conditional,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The conditional expression  "OptionCont.stableActivity && s.SatelliteSize >= Satellite.SIZE_SMALL && (s.baseType == Satellite.BASETYPE_MOON || s.baseType == Satellite.BASETYPE_TERRESTIAL)"  is complex.
Complex Conditional,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getValidParent,The conditional expression  "(parentFlag == Satellite.ORBIT_PRISEC) || (parentFlag == Satellite.ORBIT_PRISECTRI) || (parentFlag == Satellite.ORBIT_PRITRI) || (parentFlag == Star.IS_PRIMARY)"  is complex.
Complex Conditional,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The conditional expression  "(planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY)"  is complex.
Complex Conditional,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,updateLumin,The conditional expression  "(currStatus == StarAgeLine.RET_MAINBRANCH && this.currMass >= .45) || currStatus == StarAgeLine.RET_SUBBRANCH || currStatus == StarAgeLine.RET_GIANTBRANCH || currStatus == StarAgeLine.RET_GIANTBRANCH"  is complex.
Complex Conditional,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,verifyRange,The conditional expression  "(currentPos < checkRange.upperBound) && (currentPos < o.lowerBound) && (checkRange.upperBound >= o.lowerBound) && (checkRange.upperBound < o.upperBound)"  is complex.
Complex Conditional,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The conditional expression  "(orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)"  is complex.
Virtual Method Call from Constructor,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,Satellite,The constructor "Satellite" calls a virtual method "updateType".
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [2].Width = 130;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [2].Width = 130;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [3].Width = 100;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [3].Width = 100;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [5].Width = 160;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [5].Width = 160;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [6].Width = 150;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [6].Width = 150;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [7].Width = 100;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [7].Width = 100;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [8].Width = 195;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,CelestialNavigation,The following statement contains a magic number: dgvPlanets.Columns [8].Width = 195;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: if (this.createStarsFinished) {  	foreach (Star s in this.ourSystem.sysStars) {  		object[] rowVal = new object[12];  		rowVal [0] = s.currMass;  		rowVal [1] = s.name;  		rowVal [2] = Star.getDescFromFlag (s.selfID);  		rowVal [3] = s.specType;  		rowVal [4] = Math.Round (s.currLumin' 4);  		rowVal [5] = s.effTemp;  		rowVal [6] = s.orbitalRadius;  		rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  		rowVal [8] = s.starColor;  		rowVal [9] = s.returnCurrentBranchDesc ();  		rowVal [10] = s.isFlareStar;  		rowVal [11] = s.printOrbitalDetails ();  		starTable.Rows.Add (rowVal);  	}  	lblSysAge.Text = this.ourSystem.sysAge + " GYr";  	lblSysName.Text = this.ourSystem.sysName;  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	object[] rowVal = new object[12];  	rowVal [0] = s.currMass;  	rowVal [1] = s.name;  	rowVal [2] = Star.getDescFromFlag (s.selfID);  	rowVal [3] = s.specType;  	rowVal [4] = Math.Round (s.currLumin' 4);  	rowVal [5] = s.effTemp;  	rowVal [6] = s.orbitalRadius;  	rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  	rowVal [8] = s.starColor;  	rowVal [9] = s.returnCurrentBranchDesc ();  	rowVal [10] = s.isFlareStar;  	rowVal [11] = s.printOrbitalDetails ();  	starTable.Rows.Add (rowVal);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [2] = Star.getDescFromFlag (s.selfID);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [3] = s.specType;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [4] = Math.Round (s.currLumin' 4);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [4] = Math.Round (s.currLumin' 4);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [5] = s.effTemp;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [6] = s.orbitalRadius;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [7] = Star.descGasGiantFlag (s.gasGiantFlag);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [8] = s.starColor;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [9] = s.returnCurrentBranchDesc ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [10] = s.isFlareStar;  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createStars_Closed,The following statement contains a magic number: rowVal [11] = s.printOrbitalDetails ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [3] = Math.Round (pl.orbitalRadius' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [3] = Math.Round (pl.orbitalRadius' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  	ourValues [5] = "None.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [5] = "None.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_GASGIANT)  	ourValues [5] = "Superdense Atmosphere.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [5] = "Superdense Atmosphere.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [6] = pl.descAtm ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [7] = (pl.hydCoverage * 100) + "%";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [7] = (pl.hydCoverage * 100) + "%";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,createPlanets_Closed,The following statement contains a magic number: ourValues [9] = pl.getRVMDesc ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				if (pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [1] = "Empty";  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			if (pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [1] = "Empty";  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		if (pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [1] = "Empty";  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	if (pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [1] = "Empty";  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [3] = Math.Round (pl.orbitalRadius' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [3] = Math.Round (pl.orbitalRadius' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT || pl.baseType == Satellite.BASETYPE_EMPTY)  	ourValues [5] = "None.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = "None.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_GASGIANT)  	ourValues [5] = "Superdense Atmosphere.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = "Superdense Atmosphere.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [6] = pl.descAtm ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [7] = (pl.hydCoverage * 100) + "%";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [7] = (pl.hydCoverage * 100) + "%";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [9] = pl.getRVMDesc ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (!chkEmptyDisplay.Checked) {  	if (this.createPlanetsFinished) {  		lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  		this.planetTable.Clear ();  		refreshPlanetDGV ();  		foreach (Star s in this.ourSystem.sysStars) {  			foreach (Satellite pl in s.sysPlanets) {  				if (pl.baseType != Satellite.BASETYPE_EMPTY) {  					object[] ourValues = new object[10];  					ourValues [0] = pl.name;  					if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  						ourValues [1] = pl.descSizeType ();  					}  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  						ourValues [1] = "Asteroid Belt";  					}  					ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  					ourValues [3] = Math.Round (pl.orbitalRadius' 2);  					ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  					if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  						ourValues [5] = "None.";  					if (pl.baseType == Satellite.BASETYPE_GASGIANT)  						ourValues [5] = "Superdense Atmosphere.";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  					ourValues [6] = pl.descAtm ();  					ourValues [7] = (pl.hydCoverage * 100) + "%";  					if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  						ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  					else  						ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  					ourValues [9] = pl.getRVMDesc ();  					planetTable.Rows.Add (ourValues);  				}  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (this.createPlanetsFinished) {  	lblNumberPlanets.Text = this.ourSystem.countPlanets ().ToString ();  	this.planetTable.Clear ();  	refreshPlanetDGV ();  	foreach (Star s in this.ourSystem.sysStars) {  		foreach (Satellite pl in s.sysPlanets) {  			if (pl.baseType != Satellite.BASETYPE_EMPTY) {  				object[] ourValues = new object[10];  				ourValues [0] = pl.name;  				if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  					ourValues [1] = pl.descSizeType ();  				}  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  					ourValues [1] = "Asteroid Belt";  				}  				ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  				ourValues [3] = Math.Round (pl.orbitalRadius' 2);  				ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  				if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  					ourValues [5] = "None.";  				if (pl.baseType == Satellite.BASETYPE_GASGIANT)  					ourValues [5] = "Superdense Atmosphere.";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  				ourValues [6] = pl.descAtm ();  				ourValues [7] = (pl.hydCoverage * 100) + "%";  				if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  					ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  				else  					ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  				ourValues [9] = pl.getRVMDesc ();  				planetTable.Rows.Add (ourValues);  			}  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Star s in this.ourSystem.sysStars) {  	foreach (Satellite pl in s.sysPlanets) {  		if (pl.baseType != Satellite.BASETYPE_EMPTY) {  			object[] ourValues = new object[10];  			ourValues [0] = pl.name;  			if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  				ourValues [1] = pl.descSizeType ();  			}  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  				ourValues [1] = "Asteroid Belt";  			}  			ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  			ourValues [3] = Math.Round (pl.orbitalRadius' 2);  			ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  			if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  				ourValues [5] = "None.";  			if (pl.baseType == Satellite.BASETYPE_GASGIANT)  				ourValues [5] = "Superdense Atmosphere.";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  			ourValues [6] = pl.descAtm ();  			ourValues [7] = (pl.hydCoverage * 100) + "%";  			if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  				ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  			else  				ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  			ourValues [9] = pl.getRVMDesc ();  			planetTable.Rows.Add (ourValues);  		}  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: foreach (Satellite pl in s.sysPlanets) {  	if (pl.baseType != Satellite.BASETYPE_EMPTY) {  		object[] ourValues = new object[10];  		ourValues [0] = pl.name;  		if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  			ourValues [1] = pl.descSizeType ();  		}  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  			ourValues [1] = "Asteroid Belt";  		}  		ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  		ourValues [3] = Math.Round (pl.orbitalRadius' 2);  		ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  		if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			ourValues [5] = "None.";  		if (pl.baseType == Satellite.BASETYPE_GASGIANT)  			ourValues [5] = "Superdense Atmosphere.";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  		ourValues [6] = pl.descAtm ();  		ourValues [7] = (pl.hydCoverage * 100) + "%";  		if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  			ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  		else  			ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  		ourValues [9] = pl.getRVMDesc ();  		planetTable.Rows.Add (ourValues);  	}  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType != Satellite.BASETYPE_EMPTY) {  	object[] ourValues = new object[10];  	ourValues [0] = pl.name;  	if (pl.baseType != Satellite.BASETYPE_ASTEROIDBELT || OptionCont.expandAsteroidBelt) {  		ourValues [1] = pl.descSizeType ();  	}  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  		ourValues [1] = "Asteroid Belt";  	}  	ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  	ourValues [3] = Math.Round (pl.orbitalRadius' 2);  	ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  	if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  		ourValues [5] = "None.";  	if (pl.baseType == Satellite.BASETYPE_GASGIANT)  		ourValues [5] = "Superdense Atmosphere.";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  	ourValues [6] = pl.descAtm ();  	ourValues [7] = (pl.hydCoverage * 100) + "%";  	if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  		ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  	else  		ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  	ourValues [9] = pl.getRVMDesc ();  	planetTable.Rows.Add (ourValues);  }  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [2] = Math.Round (pl.diameterInKM ()' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [3] = Math.Round (pl.orbitalRadius' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [3] = Math.Round (pl.orbitalRadius' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [4] = Math.Round (pl.gravity * Satellite.GFORCE' 2);  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_ASTEROIDBELT)  	ourValues [5] = "None.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = "None.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_GASGIANT)  	ourValues [5] = "Superdense Atmosphere.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = "Superdense Atmosphere.";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [5] = pl.getDescAtmCategory () + "(" + Math.Round (pl.atmPres' 2) + ")";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [6] = pl.descAtm ();  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [7] = (pl.hydCoverage * 100) + "%";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [7] = (pl.hydCoverage * 100) + "%";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: if (pl.baseType == Satellite.BASETYPE_MOON || pl.baseType == Satellite.BASETYPE_TERRESTIAL)  	ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  else  	ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = pl.getClimateDesc (pl.getClimate (pl.surfaceTemp)) + "( " + Math.Round (pl.surfaceTemp' 2) + "K/ " + Math.Round (libStarGen.convertTemp ("kelvin"' "celsius"' pl.surfaceTemp)' 2) + "C)";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [8] = "Blackbody Temperature: " + Math.Round (pl.blackbodyTemp' 2) + "K";  
Magic Number,StarSystemGurpsGen,CelestialNavigation,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CelestialNavigation.cs,chkEmptyDisplay_CheckedChanged,The following statement contains a magic number: ourValues [9] = pl.getRVMDesc ();  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,CreatePlanets,The following statement contains a magic number: starToolTip.AutomaticDelay = 5000;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,CreatePlanets,The following statement contains a magic number: starToolTip.InitialDelay = 1000;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,CreatePlanets,The following statement contains a magic number: starToolTip.ReshowDelay = 500;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: for (int currStar = 0; currStar < this.ourSystem.sysStars.Count; currStar++) {  	Range temp;  	//draw up forbidden zones.  	if (!this.ourSystem.sysStars [currStar].testInitlizationZones ())  		this.ourSystem.sysStars [currStar].initalizeZonesOfInterest ();  	for (int i = 1; i < this.ourSystem.sysStars.Count; i++) {  		if (this.ourSystem.sysStars [i].parentID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].selfID' this.ourSystem.sysStars [i].selfID);  		}  		if (this.ourSystem.sysStars [i].selfID == this.ourSystem.sysStars [currStar].selfID) {  			temp = new Range (this.ourSystem.sysStars [i].getInnerForbiddenZone ()' this.ourSystem.sysStars [i].getOuterForbiddenZone ());  			this.ourSystem.sysStars [currStar].createForbiddenZone (temp' this.ourSystem.sysStars [currStar].parentID' this.ourSystem.sysStars [currStar].selfID);  		}  	}  	this.ourSystem.sysStars [currStar].sortForbidden ();  	this.ourSystem.sysStars [currStar].createCleanZones ();  	//gas giant flag  	//                libStarGen.gasGiantFlag(this.ourSystem.sysStars[currStar]' velvetBag.gurpsRoll());  	Satellite placeHolder = new Satellite (0' 0' 0' 0);  	int ownership' roll;  	double orbit = 0;  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  		double rangeAvail = 0' lowerBound = 0' diffRange = 0;  		Range spawnRange = new Range (0' 1);  		//get range availability and spawn range  		//CONVENTIONAL  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  		}  		//ECCENTRIC  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  			lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  			diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  		}  		//EPISTELLAR   		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  			lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  			diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  			spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  		}  		if (rangeAvail >= .25) {  			do {  				orbit = velvetBag.rollRange (lowerBound' diffRange);  			}  			while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  		if (rangeAvail >= .005 && rangeAvail < .25) {  			orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  			ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  			if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  				ownership = this.ourSystem.sysStars [currStar].selfID;  			placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  			roll = velvetBag.gurpsRoll () + 4;  			libStarGen.updateGasGiantSize (placeHolder' roll);  		}  	}  	//now we've determined our placeholdr' let's start working on our orbitals.  	double currOrbit = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass)' nextOrbit = 0;  	double distance = .15;  	//now we have our placeholder.  	if (placeHolder.orbitalRadius != 0) {  		this.ourSystem.sysStars [currStar].addSatellite (placeHolder);  		currOrbit = placeHolder.orbitalRadius;  	}  	if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_EPISTELLAR && placeHolder.orbitalRadius != 0) {  		//we're moving left.  		//LEFT RIGHT LEFT  		//.. sorry about that  		double innerRadius = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving left' divide.  			nextOrbit = currOrbit / libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit > currOrbit - distance)  				nextOrbit = currOrbit - distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			//now let's check on   		}  		while (currOrbit > innerRadius);  	}  	//MOVE RIGHT!  	//now we have our placeholder.  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  		double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  		do {  			//as we're moving right' multiply.  			nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  			if (nextOrbit < currOrbit + distance)  				nextOrbit = currOrbit + distance;  			if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  				ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  				this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  			}  			currOrbit = nextOrbit;  			if (currOrbit < 0)  				currOrbit = outerRadius + 10;  			//now let's check on   		}  		while (currOrbit < outerRadius);  	}  	//if a clean zone has 0 planets' add one.  	foreach (cleanZone c in this.ourSystem.sysStars [currStar].zonesOfInterest.formationZones) {  		if (!this.ourSystem.sysStars [currStar].cleanZoneHasOrbits (c)) {  			nextOrbit = this.ourSystem.sysStars [currStar].pickInRange (c.getRange ());  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  	}  	//sort orbitals  	this.ourSystem.sysStars [currStar].sortOrbitals ();  	this.ourSystem.sysStars [currStar].giveOrbitalsOrder (ref totalOrbCount);  	//now we get orbital contents' then fill in details  	libStarGen.populateOrbits (this.ourSystem.sysStars [currStar]' velvetBag);  	//set any star with all empty orbits to have one planet  	if (this.ourSystem.sysStars [currStar].isAllEmptyOrbits () && OptionCont.ensureOneOrbit) {  		int newPlanet = velvetBag.rng (1' this.ourSystem.sysStars [currStar].sysPlanets.Count' -1);  		this.ourSystem.sysStars [currStar].sysPlanets [newPlanet].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag != Star.GASGIANT_NONE) {  	double rangeAvail = 0' lowerBound = 0' diffRange = 0;  	Range spawnRange = new Range (0' 1);  	//get range availability and spawn range  	//CONVENTIONAL  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  	}  	//ECCENTRIC  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  		lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  		diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  	}  	//EPISTELLAR   	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  		lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  		diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  		spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  	}  	if (rangeAvail >= .25) {  		do {  			orbit = velvetBag.rollRange (lowerBound' diffRange);  		}  		while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  	if (rangeAvail >= .005 && rangeAvail < .25) {  		orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  		ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  		if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  			ownership = this.ourSystem.sysStars [currStar].selfID;  		placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  		roll = velvetBag.gurpsRoll () + 4;  		libStarGen.updateGasGiantSize (placeHolder' roll);  	}  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  	rangeAvail = this.ourSystem.sysStars [currStar].checkConRange ();  	lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1;  	diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  	spawnRange = this.ourSystem.sysStars [currStar].getConventionalRange ();  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * 1.5) - lowerBound;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  	rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  	lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  	diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  	spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  	rangeAvail = this.ourSystem.sysStars [currStar].checkEccRange ();  	lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  	diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  	spawnRange = this.ourSystem.sysStars [currStar].getEccentricRange ();  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: lowerBound = Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .125;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: diffRange = (Star.snowLine (this.ourSystem.sysStars [currStar].initLumin) * .75) - lowerBound;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  	rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  	lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  	diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  	spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  	rangeAvail = this.ourSystem.sysStars [currStar].checkEpiRange ();  	lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  	diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  	spawnRange = this.ourSystem.sysStars [currStar].getEpistellarRange ();  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: lowerBound = Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * .1;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: diffRange = (Star.innerRadius (this.ourSystem.sysStars [currStar].initLumin' this.ourSystem.sysStars [currStar].initMass) * 1.8) - lowerBound;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (rangeAvail >= .25) {  	do {  		orbit = velvetBag.rollRange (lowerBound' diffRange);  	}  	while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  	ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  		ownership = this.ourSystem.sysStars [currStar].selfID;  	placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  	roll = velvetBag.gurpsRoll () + 4;  	libStarGen.updateGasGiantSize (placeHolder' roll);  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (rangeAvail >= .25) {  	do {  		orbit = velvetBag.rollRange (lowerBound' diffRange);  	}  	while (!this.ourSystem.sysStars [currStar].verifyCleanOrbit (orbit));  	ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  		ownership = this.ourSystem.sysStars [currStar].selfID;  	placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  	roll = velvetBag.gurpsRoll () + 4;  	libStarGen.updateGasGiantSize (placeHolder' roll);  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: roll = velvetBag.gurpsRoll () + 4;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (rangeAvail >= .005 && rangeAvail < .25) {  	orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  	ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  		ownership = this.ourSystem.sysStars [currStar].selfID;  	placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  	roll = velvetBag.gurpsRoll () + 4;  	libStarGen.updateGasGiantSize (placeHolder' roll);  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (rangeAvail >= .005 && rangeAvail < .25) {  	orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  	ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  		ownership = this.ourSystem.sysStars [currStar].selfID;  	placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  	roll = velvetBag.gurpsRoll () + 4;  	libStarGen.updateGasGiantSize (placeHolder' roll);  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (rangeAvail >= .005 && rangeAvail < .25) {  	orbit = this.ourSystem.sysStars [currStar].pickInRange (spawnRange);  	ownership = this.ourSystem.sysStars [currStar].getOwnership (orbit);  	if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR)  		ownership = this.ourSystem.sysStars [currStar].selfID;  	placeHolder = new Satellite (ownership' 0' orbit' 0' Satellite.BASETYPE_GASGIANT);  	roll = velvetBag.gurpsRoll () + 4;  	libStarGen.updateGasGiantSize (placeHolder' roll);  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: roll = velvetBag.gurpsRoll () + 4;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (this.ourSystem.sysStars [currStar].gasGiantFlag == Star.GASGIANT_EPISTELLAR || placeHolder.orbitalRadius == 0) {  	double outerRadius = Star.outerRadius (this.ourSystem.sysStars [currStar].initMass);  	do {  		//as we're moving right' multiply.  		nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  		if (nextOrbit < currOrbit + distance)  			nextOrbit = currOrbit + distance;  		if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  			ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  			this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  		}  		currOrbit = nextOrbit;  		if (currOrbit < 0)  			currOrbit = outerRadius + 10;  		//now let's check on   	}  	while (currOrbit < outerRadius);  }  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: do {  	//as we're moving right' multiply.  	nextOrbit = currOrbit * libStarGen.getOrbitalRatio (velvetBag);  	if (nextOrbit < currOrbit + distance)  		nextOrbit = currOrbit + distance;  	if (this.ourSystem.sysStars [currStar].verifyCleanOrbit (nextOrbit) && this.ourSystem.sysStars [currStar].withinCreationRange (nextOrbit)) {  		ownership = this.ourSystem.sysStars [currStar].getOwnership (nextOrbit);  		this.ourSystem.sysStars [currStar].addSatellite (new Satellite (ownership' 0' nextOrbit' 0));  	}  	currOrbit = nextOrbit;  	if (currOrbit < 0)  		currOrbit = outerRadius + 10;  	//now let's check on   }  while (currOrbit < outerRadius);  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: if (currOrbit < 0)  	currOrbit = outerRadius + 10;  
Magic Number,StarSystemGurpsGen,CreatePlanets,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreatePlanets.cs,btnGenPlanets_Click,The following statement contains a magic number: currOrbit = outerRadius + 10;  
Magic Number,StarSystemGurpsGen,CreateStars,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreateStars.cs,CreateStars,The following statement contains a magic number: starToolTip.AutomaticDelay = 5000;  
Magic Number,StarSystemGurpsGen,CreateStars,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreateStars.cs,CreateStars,The following statement contains a magic number: starToolTip.InitialDelay = 1000;  
Magic Number,StarSystemGurpsGen,CreateStars,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\CreateStars.cs,CreateStars,The following statement contains a magic number: starToolTip.ReshowDelay = 500;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genRandomSysName,The following statement contains a magic number: return (prefix + Math.Round (ourDice.rollRange (0' 1) * 1000000000' 0));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 3)  	return 0.01;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 3)  	return 0.01;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return 0.01;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (.1 + (ourDice.rng (1' 6' -1) * .3) + (ourDice.rng (1' 6' -1) * .05));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 7 && roll <= 10)  	return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (2 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 11 && roll <= 14)  	return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (5.6 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll >= 15 && roll <= 17)  	return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (8 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 18)  	return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 18)  	return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 18)  	return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 18)  	return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 18)  	return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: if (roll == 18)  	return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return (10 + (ourDice.rng (1' 6' -1) * .6) + (ourDice.rng (1' 6' -1) * .1));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genSystemAge,The following statement contains a magic number: return 13.8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (OptionCont.getNumberOfStars () != -1) {  	numStars = OptionCont.getNumberOfStars ();  }  else {  	// We take the roll' add 2 if it's in an open cluster'subtract 1 if not' then divide it by 5.  	// This matches the roll probablity to the table.  	numStars = (int)(Math.Floor ((ourBag.gurpsRoll () + (OptionCont.inOpenCluster ? 2 : -1)) / 5.0));  	//fix a few possible logic bugs.  	if (numStars < 1)  		numStars = 1;  	if (numStars > 3)  		numStars = 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (OptionCont.getNumberOfStars () != -1) {  	numStars = OptionCont.getNumberOfStars ();  }  else {  	// We take the roll' add 2 if it's in an open cluster'subtract 1 if not' then divide it by 5.  	// This matches the roll probablity to the table.  	numStars = (int)(Math.Floor ((ourBag.gurpsRoll () + (OptionCont.inOpenCluster ? 2 : -1)) / 5.0));  	//fix a few possible logic bugs.  	if (numStars < 1)  		numStars = 1;  	if (numStars > 3)  		numStars = 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (OptionCont.getNumberOfStars () != -1) {  	numStars = OptionCont.getNumberOfStars ();  }  else {  	// We take the roll' add 2 if it's in an open cluster'subtract 1 if not' then divide it by 5.  	// This matches the roll probablity to the table.  	numStars = (int)(Math.Floor ((ourBag.gurpsRoll () + (OptionCont.inOpenCluster ? 2 : -1)) / 5.0));  	//fix a few possible logic bugs.  	if (numStars < 1)  		numStars = 1;  	if (numStars > 3)  		numStars = 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (OptionCont.getNumberOfStars () != -1) {  	numStars = OptionCont.getNumberOfStars ();  }  else {  	// We take the roll' add 2 if it's in an open cluster'subtract 1 if not' then divide it by 5.  	// This matches the roll probablity to the table.  	numStars = (int)(Math.Floor ((ourBag.gurpsRoll () + (OptionCont.inOpenCluster ? 2 : -1)) / 5.0));  	//fix a few possible logic bugs.  	if (numStars < 1)  		numStars = 1;  	if (numStars > 3)  		numStars = 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: numStars = (int)(Math.Floor ((ourBag.gurpsRoll () + (OptionCont.inOpenCluster ? 2 : -1)) / 5.0));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: numStars = (int)(Math.Floor ((ourBag.gurpsRoll () + (OptionCont.inOpenCluster ? 2 : -1)) / 5.0));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (numStars > 3)  	numStars = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (numStars > 3)  	numStars = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: numStars = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: for (int i = 0; i < numStars; i++) {  	if (i == 0) {  		ourSystem.addStar (Star.IS_PRIMARY' Star.IS_PRIMARY' i);  		//manually set the first star's mass and push it to the max mass setting  		ourSystem.sysStars [0].updateMass (libStarGen.rollStellarMass (ourBag' Star.IS_PRIMARY));  		ourSystem.maxMass = ourSystem.sysStars [0].currMass;  		//generate the star  		libStarGen.generateAStar (ourSystem.sysStars [i]' ourBag' ourSystem.maxMass' ourSystem.sysName);  	}  	if (i == 1) {  		ourSystem.addStar (Star.IS_SECONDARY' Star.IS_PRIMARY' i);  		//generate the star  		libStarGen.generateAStar (ourSystem.sysStars [i]' ourBag' ourSystem.maxMass' ourSystem.sysName);  	}  	if (i == 2) {  		ourSystem.addStar (Star.IS_TRINARY' Star.IS_PRIMARY' i);  		//generate the star  		libStarGen.generateAStar (ourSystem.sysStars [i]' ourBag' ourSystem.maxMass' ourSystem.sysName);  	}  	libStarGen.gasGiantFlag (ourSystem.sysStars [i]' ourBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createStars,The following statement contains a magic number: if (i == 2) {  	ourSystem.addStar (Star.IS_TRINARY' Star.IS_PRIMARY' i);  	//generate the star  	libStarGen.generateAStar (ourSystem.sysStars [i]' ourBag' ourSystem.maxMass' ourSystem.sysName);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (maxMass == 0.0) {  	if (!OptionCont.stellarMassRangeSet) {  		if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  			rollA = velvetBag.rng (6);  			if (rollA == 1)  				rollA = 5;  			if (rollA == 2)  				rollA = 6;  			if (rollA == 3 || rollA == 4)  				rollA = 7;  			if (rollA == 5 || rollA == 6)  				rollA = 8;  			return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  		}  		else {  			return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  	}  	else {  		return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  	}  }  else {  	int currPos = Star.getStellarMassPos (maxMass);  	//error bound checking. The entire program is kinda predicated aroudn the idea you won't have this happen.  	//IF IT DOES' then do the simple method.  	if (currPos == -1) {  		do {  			tmpRoll = Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  		}  		while (tmpRoll > maxMass);  		return tmpRoll;  	}  	//else' roll for the new index.  	rollA = velvetBag.gurpsRoll ();  	rollB = velvetBag.rng (rollA' 6);  	//get the new index  	if (currPos - rollB <= 0)  		currPos = 0;  	else  		currPos = currPos - rollB;  	return Star.getMassByIndex (currPos);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (!OptionCont.stellarMassRangeSet) {  	if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  		rollA = velvetBag.rng (6);  		if (rollA == 1)  			rollA = 5;  		if (rollA == 2)  			rollA = 6;  		if (rollA == 3 || rollA == 4)  			rollA = 7;  		if (rollA == 5 || rollA == 6)  			rollA = 8;  		return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  	}  	else {  		return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  	}  }  else {  	return velvetBag.rollInRange (OptionCont.minStellarMass' OptionCont.maxStellarMass);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (orderID == Star.IS_PRIMARY && OptionCont.forceGardenFavorable) {  	rollA = velvetBag.rng (6);  	if (rollA == 1)  		rollA = 5;  	if (rollA == 2)  		rollA = 6;  	if (rollA == 3 || rollA == 4)  		rollA = 7;  	if (rollA == 5 || rollA == 6)  		rollA = 8;  	return Star.getMassByRoll (rollA' velvetBag.gurpsRoll ());  }  else {  	return Star.getMassByRoll (velvetBag.gurpsRoll ()' velvetBag.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: rollA = velvetBag.rng (6);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 1)  	rollA = 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: rollA = 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 2)  	rollA = 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 2)  	rollA = 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: rollA = 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 3 || rollA == 4)  	rollA = 7;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 3 || rollA == 4)  	rollA = 7;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 3 || rollA == 4)  	rollA = 7;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: rollA = 7;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 5 || rollA == 6)  	rollA = 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 5 || rollA == 6)  	rollA = 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: if (rollA == 5 || rollA == 6)  	rollA = 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: rollA = 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,rollStellarMass,The following statement contains a magic number: rollB = velvetBag.rng (rollA' 6);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,generateAStar,The following statement contains a magic number: if (s.evoLine.findCurrentAgeGroup (s.starAge) == StarAgeLine.RET_COLLASPEDSTAR)  	s.updateMass (ourDice.rollInRange (0.9' 1.4)' true);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,generateAStar,The following statement contains a magic number: if (s.evoLine.findCurrentAgeGroup (s.starAge) == StarAgeLine.RET_COLLASPEDSTAR)  	s.updateMass (ourDice.rollInRange (0.9' 1.4)' true);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,generateAStar,The following statement contains a magic number: s.updateMass (ourDice.rollInRange (0.9' 1.4)' true);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,generateAStar,The following statement contains a magic number: s.updateMass (ourDice.rollInRange (0.9' 1.4)' true);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,setFlareStatus,The following statement contains a magic number: if (OptionCont.anyStarFlareStar)  	massLimit = 11;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,setFlareStatus,The following statement contains a magic number: massLimit = 11;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,setFlareStatus,The following statement contains a magic number: if (OptionCont.moreFlareStarChance)  	limit = 9;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,setFlareStatus,The following statement contains a magic number: limit = 9;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: if (!OptionCont.moreConGasGiantChances) {  	noGasGiant = 10;  	conGaGiant = 12;  	eccGaGiant = 14;  	epiGaGiant = 18;  }  else {  	noGasGiant = 6;  	conGaGiant = 13;  	eccGaGiant = 15;  	epiGaGiant = 18;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: noGasGiant = 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: conGaGiant = 12;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: eccGaGiant = 14;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: epiGaGiant = 18;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: noGasGiant = 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: conGaGiant = 13;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: eccGaGiant = 15;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,gasGiantFlag,The following statement contains a magic number: epiGaGiant = 18;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	ratio = 1.4 + (myDice.rng (1' 5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	ratio = 1.4 + (myDice.rng (1' 5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	ratio = 1.4 + (myDice.rng (1' 5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	ratio = 1.4 + (myDice.rng (1' 5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	ratio = 1.4 + (myDice.rng (1' 5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.4 + (myDice.rng (1' 5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.4 + (myDice.rng (1' 5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.4 + (myDice.rng (1' 5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.5 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 7 || roll == 8) {  	ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 7 || roll == 8) {  	ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 7 || roll == 8) {  	ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 7 || roll == 8) {  	ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 7 || roll == 8) {  	ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 7 || roll == 8) {  	ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.6 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 9 || roll == 10 || roll == 11 || roll == 12) {  	ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.7 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 13 || roll == 14) {  	ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 13 || roll == 14) {  	ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 13 || roll == 14) {  	ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 13 || roll == 14) {  	ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 13 || roll == 14) {  	ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 13 || roll == 14) {  	ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.8 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 1.9 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getOrbitalRatio,The following statement contains a magic number: ratio = 2.0 + (myDice.rng (1' 10' -5) * .01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Star.IS_TRINARY)  	parent = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: parent = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Star.IS_SECCOMP)  	parent = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: parent = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Star.IS_TRICOMP)  	parent = 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: parent = 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Satellite.ORBIT_TRICOM)  	parent = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: parent = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Star.IS_TRINARY)  	target = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: target = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Star.IS_SECCOMP)  	target = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: target = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: if (planetParent == Star.IS_TRICOMP)  	target = 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineDistance,The following statement contains a magic number: target = 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.majorMoons.Count == 1)  	addVal = addVal + 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: addVal = addVal + 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.majorMoons.Count == 2)  	addVal = addVal + 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.majorMoons.Count == 2)  	addVal = addVal + 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: addVal = addVal + 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.SatelliteType == Satellite.SUBTYPE_SULFUR)  	addVal = addVal + 60;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: addVal = addVal + 60;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (isGasGiantMoon)  	addVal = addVal + 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: addVal = addVal + 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal <= 16.5)  	s.volActivity = Satellite.GEOLOGIC_NONE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 16.5 && addVal <= 20.5)  	s.volActivity = Satellite.GEOLOGIC_LIGHT;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 16.5 && addVal <= 20.5)  	s.volActivity = Satellite.GEOLOGIC_LIGHT;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 20.5 && addVal <= 26.5)  	s.volActivity = Satellite.GEOLOGIC_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 20.5 && addVal <= 26.5)  	s.volActivity = Satellite.GEOLOGIC_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 26.5 && addVal <= 70.5)  	s.volActivity = Satellite.GEOLOGIC_HEAVY;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 26.5 && addVal <= 70.5)  	s.volActivity = Satellite.GEOLOGIC_HEAVY;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (addVal > 70.5)  	s.volActivity = Satellite.GEOLOGIC_EXTREME;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_HEAVY && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 8) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_HEAVY && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 8) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_HEAVY && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 8) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_HEAVY && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 8) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = ourBag.rng (6);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll <= 3)  	s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll >= 4)  	s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_EXTREME && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 14) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_EXTREME && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 14) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_EXTREME && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 14) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_EXTREME && s.SatelliteType == Satellite.SUBTYPE_GARDEN && roll <= 14) {  	roll = ourBag.rng (6);  	if (roll <= 3)  		s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  	if (roll >= 4)  		s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = ourBag.rng (6);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll <= 3)  	s.addAtmCategory (Satellite.ATM_MARG_POLLUTANTS);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll >= 4)  	s.addAtmCategory (Satellite.ATM_MARG_SULFUR);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.hydCoverage == 0)  	roll = roll - 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll - 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.hydCoverage > 0 && s.hydCoverage < .5)  	roll = roll - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.hydCoverage > 0 && s.hydCoverage < .5)  	roll = roll - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_NONE)  	roll = roll - 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll - 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_LIGHT)  	roll = roll - 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll - 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_HEAVY)  	roll = roll + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_EXTREME)  	roll = roll + 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 8;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.majorMoons.Count == 1)  	roll = roll + 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.majorMoons.Count > 1)  	roll = roll + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll <= 6.5)  	s.tecActivity = Satellite.GEOLOGIC_NONE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 6.5 && roll <= 10.5)  	s.tecActivity = Satellite.GEOLOGIC_LIGHT;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 6.5 && roll <= 10.5)  	s.tecActivity = Satellite.GEOLOGIC_LIGHT;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 10.5 && roll <= 14.5)  	s.tecActivity = Satellite.GEOLOGIC_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 10.5 && roll <= 14.5)  	s.tecActivity = Satellite.GEOLOGIC_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 14.5 && roll <= 18.5)  	s.tecActivity = Satellite.GEOLOGIC_HEAVY;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 14.5 && roll <= 18.5)  	s.tecActivity = Satellite.GEOLOGIC_HEAVY;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (roll > 18.5)  	s.tecActivity = Satellite.GEOLOGIC_EXTREME;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (OptionCont.highRVMVal)  	roll = ourBag.rng (1' 6' 10);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (OptionCont.highRVMVal)  	roll = ourBag.rng (1' 6' 10);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = ourBag.rng (1' 6' 10);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = ourBag.rng (1' 6' 10);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_NONE)  	roll = roll - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.volActivity == Satellite.GEOLOGIC_EXTREME)  	roll = roll + 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (s.SatelliteSize == Satellite.SIZE_TINY)  		roll = roll - 1;  	if (s.SatelliteSize == Satellite.SIZE_MEDIUM)  		roll = roll + 2;  	if (s.SatelliteSize == Satellite.SIZE_LARGE)  		roll = roll + 4;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (s.SatelliteSize == Satellite.SIZE_TINY)  		roll = roll - 1;  	if (s.SatelliteSize == Satellite.SIZE_MEDIUM)  		roll = roll + 2;  	if (s.SatelliteSize == Satellite.SIZE_LARGE)  		roll = roll + 4;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.SatelliteSize == Satellite.SIZE_MEDIUM)  	roll = roll + 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: if (s.SatelliteSize == Satellite.SIZE_LARGE)  	roll = roll + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,determineGeologicValues,The following statement contains a magic number: roll = roll + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_NONE || atmDesc == Satellite.ATM_PRES_TRACE) {  	s.updateAtmPres (0.00);  	s.hydCoverage = 0.0;  	s.dayFaceMod = 1.2;  	s.nightFaceMod = .1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_NONE || atmDesc == Satellite.ATM_PRES_TRACE) {  	s.updateAtmPres (0.00);  	s.hydCoverage = 0.0;  	s.dayFaceMod = 1.2;  	s.nightFaceMod = .1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.dayFaceMod = 1.2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.nightFaceMod = .1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_VERYTHIN) {  	s.updateAtmPres (0.01);  	s.hydCoverage = 0.0;  	s.dayFaceMod = 1.2;  	s.nightFaceMod = .1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_VERYTHIN) {  	s.updateAtmPres (0.01);  	s.hydCoverage = 0.0;  	s.dayFaceMod = 1.2;  	s.nightFaceMod = .1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_VERYTHIN) {  	s.updateAtmPres (0.01);  	s.hydCoverage = 0.0;  	s.dayFaceMod = 1.2;  	s.nightFaceMod = .1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.updateAtmPres (0.01);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.dayFaceMod = 1.2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.nightFaceMod = .1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_THIN) {  	s.updateAtmPres (ourBag.rollRange (.01' .49));  	s.hydCoverage = s.hydCoverage - .5;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.16;  	s.nightFaceMod = .67;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_THIN) {  	s.updateAtmPres (ourBag.rollRange (.01' .49));  	s.hydCoverage = s.hydCoverage - .5;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.16;  	s.nightFaceMod = .67;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_THIN) {  	s.updateAtmPres (ourBag.rollRange (.01' .49));  	s.hydCoverage = s.hydCoverage - .5;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.16;  	s.nightFaceMod = .67;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_THIN) {  	s.updateAtmPres (ourBag.rollRange (.01' .49));  	s.hydCoverage = s.hydCoverage - .5;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.16;  	s.nightFaceMod = .67;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_THIN) {  	s.updateAtmPres (ourBag.rollRange (.01' .49));  	s.hydCoverage = s.hydCoverage - .5;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.16;  	s.nightFaceMod = .67;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.updateAtmPres (ourBag.rollRange (.01' .49));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.updateAtmPres (ourBag.rollRange (.01' .49));  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.hydCoverage = s.hydCoverage - .5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.dayFaceMod = 1.16;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.nightFaceMod = .67;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_STANDARD) {  	s.hydCoverage = s.hydCoverage - .25;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.12;  	s.nightFaceMod = .80;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_STANDARD) {  	s.hydCoverage = s.hydCoverage - .25;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.12;  	s.nightFaceMod = .80;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_STANDARD) {  	s.hydCoverage = s.hydCoverage - .25;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.12;  	s.nightFaceMod = .80;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.hydCoverage = s.hydCoverage - .25;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.dayFaceMod = 1.12;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.nightFaceMod = .80;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_DENSE) {  	s.hydCoverage = s.hydCoverage - .1;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.09;  	s.nightFaceMod = .88;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_DENSE) {  	s.hydCoverage = s.hydCoverage - .1;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.09;  	s.nightFaceMod = .88;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_DENSE) {  	s.hydCoverage = s.hydCoverage - .1;  	if (s.hydCoverage < 0)  		s.hydCoverage = 0.0;  	s.dayFaceMod = 1.09;  	s.nightFaceMod = .88;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.hydCoverage = s.hydCoverage - .1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.dayFaceMod = 1.09;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.nightFaceMod = .88;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_VERYDENSE) {  	s.dayFaceMod = 1.05;  	s.nightFaceMod = .95;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: if (atmDesc == Satellite.ATM_PRES_VERYDENSE) {  	s.dayFaceMod = 1.05;  	s.nightFaceMod = .95;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.dayFaceMod = 1.05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateTidalLock,The following statement contains a magic number: s.nightFaceMod = .95;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.lessStellarEccent) {  	//now we generate eccentricities  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 10;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 6;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  else {  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 6;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 4;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.lessStellarEccent) {  	//now we generate eccentricities  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 10;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 6;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  else {  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 6;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 4;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.lessStellarEccent) {  	//now we generate eccentricities  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 10;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 6;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  else {  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 6;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 4;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.lessStellarEccent) {  	//now we generate eccentricities  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 10;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 6;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  else {  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 6;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 4;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.lessStellarEccent) {  	//now we generate eccentricities  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 10;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 6;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  else {  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 6;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 4;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.lessStellarEccent) {  	//now we generate eccentricities  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 10;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 6;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  else {  	if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  		modifiers = modifiers - 6;  	//Very Close  	if (s.orbitalSep == Star.ORBSEP_CLOSE)  		modifiers = modifiers - 4;  	//Close  	if (s.orbitalSep == Star.ORBSEP_MODERATE)  		modifiers = modifiers - 2;  	//Moderate    }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  	modifiers = modifiers - 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: modifiers = modifiers - 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalSep == Star.ORBSEP_CLOSE)  	modifiers = modifiers - 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: modifiers = modifiers - 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalSep == Star.ORBSEP_MODERATE)  	modifiers = modifiers - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: modifiers = modifiers - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalSep == Star.ORBSEP_VERYCLOSE)  	modifiers = modifiers - 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: modifiers = modifiers - 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalSep == Star.ORBSEP_CLOSE)  	modifiers = modifiers - 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: modifiers = modifiers - 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalSep == Star.ORBSEP_MODERATE)  	modifiers = modifiers - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: modifiers = modifiers - 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.forceVeryLowStellarEccent) {  	if (s.orbitalEccent > .2)  		s.orbitalEccent = .1;  	if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  		s.orbitalEccent = .05;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.forceVeryLowStellarEccent) {  	if (s.orbitalEccent > .2)  		s.orbitalEccent = .1;  	if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  		s.orbitalEccent = .05;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.forceVeryLowStellarEccent) {  	if (s.orbitalEccent > .2)  		s.orbitalEccent = .1;  	if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  		s.orbitalEccent = .05;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.forceVeryLowStellarEccent) {  	if (s.orbitalEccent > .2)  		s.orbitalEccent = .1;  	if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  		s.orbitalEccent = .05;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (OptionCont.forceVeryLowStellarEccent) {  	if (s.orbitalEccent > .2)  		s.orbitalEccent = .1;  	if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  		s.orbitalEccent = .05;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalEccent > .2)  	s.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalEccent > .2)  	s.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: s.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  	s.orbitalEccent = .05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  	s.orbitalEccent = .05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: if (s.orbitalEccent > .1 && s.orbitalEccent < .2)  	s.orbitalEccent = .05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,calcEccentricity,The following statement contains a magic number: s.orbitalEccent = .05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateGasGiantSize,The following statement contains a magic number: if (roll <= 10)  	s.updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateGasGiantSize,The following statement contains a magic number: if (roll >= 11 && roll <= 16)  	s.updateSize (Satellite.SIZE_MEDIUM);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateGasGiantSize,The following statement contains a magic number: if (roll >= 11 && roll <= 16)  	s.updateSize (Satellite.SIZE_MEDIUM);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,updateGasGiantSize,The following statement contains a magic number: if (roll >= 17)  	s.updateSize (Satellite.SIZE_LARGE);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: for (int i = 0; i < s.sysPlanets.Count; i++) {  	int roll = myDice.gurpsRoll ();  	//set gas giants first.  	if (s.gasGiantFlag != Star.GASGIANT_NONE) {  		//BEFORE SNOW LINE: Only Eccentric' Epistellar  		if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  			if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  			if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			}  		}  		//AFTER SNOW LINE: All three  		if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  			if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  			if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  				s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  				if (firstGasGiant) {  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  					firstGasGiant = false;  				}  				else  					libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  			}  		}  	}  	//Done with the gas giant. Let's go start seeign what else it could be.  	//We can get mods now.  	if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  		//INNER AND OUTER RADIUS  		int mod = 0;  		if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  			mod = mod - 3;  		}  		if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  			mod = mod - 3;  		}  		//FORBIDDDEN ZONE  		if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  			//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  			mod = mod - 6;  		}  		//GAS GIANT LOCATION  		if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 6;  		}  		if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  			mod = mod - 3;  		}  		//now let's get the orbit type.  		// MessageBox.Show("Mod is " + mod);  		mod = mod + myDice.gurpsRoll ();  		//MessageBox.Show("Mod + Roll is " + mod);  		if (mod <= 3)  			s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  		if (mod >= 4 && mod <= 6) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  			//Expanded Asteroid Belt options  			if (OptionCont.expandAsteroidBelt) {  				roll = myDice.gurpsRoll ();  				if (roll <= 6)  					s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  				if (roll >= 7 && roll <= 13)  					s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  				if (roll >= 14 && roll <= 15)  					s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  				if (roll >= 16)  					s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  			}  			else  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			//fixes a recursion bug.  		}  		if (mod >= 7 && mod <= 8)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  		if (mod >= 9 && mod <= 11)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  		if (mod >= 12 && mod <= 15)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  		if (mod >= 16)  			s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.gasGiantFlag != Star.GASGIANT_NONE) {  	//BEFORE SNOW LINE: Only Eccentric' Epistellar  	if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  		if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  		if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		}  	}  	//AFTER SNOW LINE: All three  	if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  		if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  		if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  			s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  			if (firstGasGiant) {  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  				firstGasGiant = false;  			}  			else  				libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  	if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  	if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  	if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  	if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  	if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  	if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius < Star.snowLine (s.initLumin)) {  	if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  	if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 8 && s.gasGiantFlag == Star.GASGIANT_ECCENTRIC) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 6 && s.gasGiantFlag == Star.GASGIANT_EPISTELLAR) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  	if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  	if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  	if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  	if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  	if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  	if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius >= Star.snowLine (s.initLumin)) {  	if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  	if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  		if (firstGasGiant) {  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  			firstGasGiant = false;  		}  		else  			libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	if (firstGasGiant) {  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		firstGasGiant = false;  	}  	else  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 15 && s.gasGiantFlag == Star.GASGIANT_CONVENTIONAL) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	if (firstGasGiant) {  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		firstGasGiant = false;  	}  	else  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (firstGasGiant) {  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	firstGasGiant = false;  }  else  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	if (firstGasGiant) {  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		firstGasGiant = false;  	}  	else  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 14 && (s.gasGiantFlag == Star.GASGIANT_ECCENTRIC || s.gasGiantFlag == Star.GASGIANT_EPISTELLAR)) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_GASGIANT);  	if (firstGasGiant) {  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  		firstGasGiant = false;  	}  	else  		libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (firstGasGiant) {  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  	firstGasGiant = false;  }  else  	libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll ());  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: libStarGen.updateGasGiantSize (s.sysPlanets [i]' myDice.gurpsRoll () + 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].baseType != Satellite.BASETYPE_GASGIANT) {  	//INNER AND OUTER RADIUS  	int mod = 0;  	if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  		mod = mod - 3;  	}  	if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  		mod = mod - 3;  	}  	//FORBIDDDEN ZONE  	if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  		//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  		mod = mod - 6;  	}  	//GAS GIANT LOCATION  	if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 6;  	}  	if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  		mod = mod - 3;  	}  	//now let's get the orbit type.  	// MessageBox.Show("Mod is " + mod);  	mod = mod + myDice.gurpsRoll ();  	//MessageBox.Show("Mod + Roll is " + mod);  	if (mod <= 3)  		s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  	if (mod >= 4 && mod <= 6) {  		s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  		//Expanded Asteroid Belt options  		if (OptionCont.expandAsteroidBelt) {  			roll = myDice.gurpsRoll ();  			if (roll <= 6)  				s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  			if (roll >= 7 && roll <= 13)  				s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  			if (roll >= 14 && roll <= 15)  				s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  			if (roll >= 16)  				s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  		}  		else  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		//fixes a recursion bug.  	}  	if (mod >= 7 && mod <= 8)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  	if (mod >= 9 && mod <= 11)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  	if (mod >= 12 && mod <= 15)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  	if (mod >= 16)  		s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius - minDistance <= Star.innerRadius (s.initLumin' s.initMass) || s.sysPlanets [i].orbitalRadius / Star.innerRadius (s.initLumin' s.initMass) <= maxRatio) {  	mod = mod - 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: mod = mod - 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.sysPlanets [i].orbitalRadius + minDistance >= Star.outerRadius (s.initMass) || Star.outerRadius (s.initMass) / s.sysPlanets [i].orbitalRadius <= maxRatio) {  	mod = mod - 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: mod = mod - 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.getClosestDistToForbiddenZone (s.sysPlanets [i].orbitalRadius) <= minDistance || (s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) < maxRatio && s.getClosestForbiddenZoneRatio (s.sysPlanets [i].orbitalRadius) > minRatio)) {  	//MessageBox.Show("THE FORBIDDEN ZONE!!!!");  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: mod = mod - 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.isPrevSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: mod = mod - 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (s.isNextSatelliteGasGiant (s.sysPlanets [i].orbitalRadius)) {  	mod = mod - 3;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: mod = mod - 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod <= 3)  	s.sysPlanets [i].updateType (Satellite.BASETYPE_EMPTY);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 4 && mod <= 6) {  	s.sysPlanets [i].updateType (Satellite.BASETYPE_ASTEROIDBELT);  	//Expanded Asteroid Belt options  	if (OptionCont.expandAsteroidBelt) {  		roll = myDice.gurpsRoll ();  		if (roll <= 6)  			s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  		if (roll >= 7 && roll <= 13)  			s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  		if (roll >= 14 && roll <= 15)  			s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  		if (roll >= 16)  			s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  	}  	else  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	//fixes a recursion bug.  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (OptionCont.expandAsteroidBelt) {  	roll = myDice.gurpsRoll ();  	if (roll <= 6)  		s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  	if (roll >= 7 && roll <= 13)  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	if (roll >= 14 && roll <= 15)  		s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  	if (roll >= 16)  		s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  }  else  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (OptionCont.expandAsteroidBelt) {  	roll = myDice.gurpsRoll ();  	if (roll <= 6)  		s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  	if (roll >= 7 && roll <= 13)  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	if (roll >= 14 && roll <= 15)  		s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  	if (roll >= 16)  		s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  }  else  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (OptionCont.expandAsteroidBelt) {  	roll = myDice.gurpsRoll ();  	if (roll <= 6)  		s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  	if (roll >= 7 && roll <= 13)  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	if (roll >= 14 && roll <= 15)  		s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  	if (roll >= 16)  		s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  }  else  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (OptionCont.expandAsteroidBelt) {  	roll = myDice.gurpsRoll ();  	if (roll <= 6)  		s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  	if (roll >= 7 && roll <= 13)  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	if (roll >= 14 && roll <= 15)  		s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  	if (roll >= 16)  		s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  }  else  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (OptionCont.expandAsteroidBelt) {  	roll = myDice.gurpsRoll ();  	if (roll <= 6)  		s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  	if (roll >= 7 && roll <= 13)  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	if (roll >= 14 && roll <= 15)  		s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  	if (roll >= 16)  		s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  }  else  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (OptionCont.expandAsteroidBelt) {  	roll = myDice.gurpsRoll ();  	if (roll <= 6)  		s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  	if (roll >= 7 && roll <= 13)  		s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  	if (roll >= 14 && roll <= 15)  		s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  	if (roll >= 16)  		s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  }  else  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll <= 6)  	s.sysPlanets [i].updateSize (Satellite.SIZE_TINY);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll >= 7 && roll <= 13)  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll >= 7 && roll <= 13)  	s.sysPlanets [i].updateSize (Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll >= 14 && roll <= 15)  	s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll >= 14 && roll <= 15)  	s.sysPlanets [i].updateSize (Satellite.SIZE_MEDIUM);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (roll >= 16)  	s.sysPlanets [i].updateSize (Satellite.SIZE_LARGE);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 7 && mod <= 8)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 7 && mod <= 8)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_TINY);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 9 && mod <= 11)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 9 && mod <= 11)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_SMALL);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 12 && mod <= 15)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 12 && mod <= 15)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_MEDIUM);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,populateOrbits,The following statement contains a magic number: if (mod >= 16)  	s.sysPlanets [i].updateTypeSize (Satellite.BASETYPE_TERRESTIAL' Satellite.SIZE_LARGE);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "kelvin") {  	if (destination == "celsius") {  		return (sourceTemp - 273.15);  	}  	if (destination == "farenheit") {  		return (((sourceTemp - 273.15) * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "kelvin") {  	if (destination == "celsius") {  		return (sourceTemp - 273.15);  	}  	if (destination == "farenheit") {  		return (((sourceTemp - 273.15) * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "kelvin") {  	if (destination == "celsius") {  		return (sourceTemp - 273.15);  	}  	if (destination == "farenheit") {  		return (((sourceTemp - 273.15) * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "kelvin") {  	if (destination == "celsius") {  		return (sourceTemp - 273.15);  	}  	if (destination == "farenheit") {  		return (((sourceTemp - 273.15) * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "celsius") {  	return (sourceTemp - 273.15);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (sourceTemp - 273.15);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "farenheit") {  	return (((sourceTemp - 273.15) * 1.8) + 32.0);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "farenheit") {  	return (((sourceTemp - 273.15) * 1.8) + 32.0);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "farenheit") {  	return (((sourceTemp - 273.15) * 1.8) + 32.0);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (((sourceTemp - 273.15) * 1.8) + 32.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (((sourceTemp - 273.15) * 1.8) + 32.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (((sourceTemp - 273.15) * 1.8) + 32.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "celsius") {  	if (destination == "kelvin") {  		return (sourceTemp + 273.15);  	}  	if (destination == "farenheit") {  		return ((sourceTemp * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "celsius") {  	if (destination == "kelvin") {  		return (sourceTemp + 273.15);  	}  	if (destination == "farenheit") {  		return ((sourceTemp * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "celsius") {  	if (destination == "kelvin") {  		return (sourceTemp + 273.15);  	}  	if (destination == "farenheit") {  		return ((sourceTemp * 1.8) + 32.0);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "kelvin") {  	return (sourceTemp + 273.15);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (sourceTemp + 273.15);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "farenheit") {  	return ((sourceTemp * 1.8) + 32.0);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "farenheit") {  	return ((sourceTemp * 1.8) + 32.0);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return ((sourceTemp * 1.8) + 32.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return ((sourceTemp * 1.8) + 32.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "farenheit") {  	if (destination == "celsius") {  		return ((sourceTemp - 32.0) / 1.8);  	}  	if (destination == "kelvin") {  		return (((sourceTemp - 32.0) / 1.8) + 273.15);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "farenheit") {  	if (destination == "celsius") {  		return ((sourceTemp - 32.0) / 1.8);  	}  	if (destination == "kelvin") {  		return (((sourceTemp - 32.0) / 1.8) + 273.15);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "farenheit") {  	if (destination == "celsius") {  		return ((sourceTemp - 32.0) / 1.8);  	}  	if (destination == "kelvin") {  		return (((sourceTemp - 32.0) / 1.8) + 273.15);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "farenheit") {  	if (destination == "celsius") {  		return ((sourceTemp - 32.0) / 1.8);  	}  	if (destination == "kelvin") {  		return (((sourceTemp - 32.0) / 1.8) + 273.15);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (source == "farenheit") {  	if (destination == "celsius") {  		return ((sourceTemp - 32.0) / 1.8);  	}  	if (destination == "kelvin") {  		return (((sourceTemp - 32.0) / 1.8) + 273.15);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "celsius") {  	return ((sourceTemp - 32.0) / 1.8);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "celsius") {  	return ((sourceTemp - 32.0) / 1.8);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return ((sourceTemp - 32.0) / 1.8);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return ((sourceTemp - 32.0) / 1.8);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "kelvin") {  	return (((sourceTemp - 32.0) / 1.8) + 273.15);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "kelvin") {  	return (((sourceTemp - 32.0) / 1.8) + 273.15);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: if (destination == "kelvin") {  	return (((sourceTemp - 32.0) / 1.8) + 273.15);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (((sourceTemp - 32.0) / 1.8) + 273.15);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (((sourceTemp - 32.0) / 1.8) + 273.15);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return (((sourceTemp - 32.0) / 1.8) + 273.15);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,convertTemp,The following statement contains a magic number: return -9999.9;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: for (int i = 1; i < starLimit; i++) {  	int modifiers = 0;  	minOrbitalDistance = ourSystem.sysStars [i - 1].orbitalRadius;  	//set the min and max conditions for the first star here.  	if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  		//apply modifiers  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			modifiers = modifiers + 6;  		if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  			modifiers = modifiers + 4;  		if (minOrbitalDistance == 600.0) {  			//in this situation' orbital 3 or so can't be safely placed because the range is 0.   			// so we autogenerate it.  			tempVal = velvetBag.rollRange (25' 25);  			ourSystem.sysStars [i].orbitalSep = 5;  			ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  			ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  		}  		else {  			do {  				double lowerBound = 0.0;  				double higherBound = 0.0;  				//roll the dice and generate the orbital radius  				do {  					roll = velvetBag.gurpsRoll (modifiers);  					if (roll <= 6)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  					if (roll >= 7 && roll <= 9)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  					if (roll >= 10 && roll <= 11)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  					if (roll >= 12 && roll <= 14)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  					if (roll >= 15)  						ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  					tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				}  				while (tempVal <= minOrbitalDistance);  				//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   				lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  				higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  				//set for constraints  				if (lowerBound < minOrbitalDistance)  					lowerBound = minOrbitalDistance;  				if (higherBound > maxOrbitalDistance)  					higherBound = maxOrbitalDistance;  				ourSystem.sysStars [i].orbitalRadius = tempVal;  				ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  			}  			while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  			//let's see if it has a subcompanion  			if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  				roll = velvetBag.gurpsRoll ();  				if (roll >= 11) {  					//generate the subcompanion  					int order = 0;  					if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  						order = Star.IS_SECCOMP;  					if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  						order = Star.IS_TRICOMP;  					//add the star  					ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  					ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  					//set the name' then generate the star  					ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  					libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  					starLimit++;  					//increment the total number of stars we have generated  				}  			}  		}  	}  	else {  		minOrbitalDistance = 0;  		maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  		//roll for seperation  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice  			roll = velvetBag.gurpsRoll (-6);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			//set the subcompanion orbital  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  		}  		while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  	}  	libStarGen.calcEccentricity (velvetBag' ourSystem.sysStars [i]);  	int parent = ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID);  	ourSystem.sysStars [i].orbitalPeriod = Star.calcOrbitalPeriod (ourSystem.sysStars [parent].currMass' ourSystem.sysStars [i].currMass' ourSystem.sysStars [i].orbitalRadius);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].parentID == 0 || ourSystem.sysStars [i].parentID == Star.IS_PRIMARY) {  	//apply modifiers  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		modifiers = modifiers + 6;  	if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  		modifiers = modifiers + 4;  	if (minOrbitalDistance == 600.0) {  		//in this situation' orbital 3 or so can't be safely placed because the range is 0.   		// so we autogenerate it.  		tempVal = velvetBag.rollRange (25' 25);  		ourSystem.sysStars [i].orbitalSep = 5;  		ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  		ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  	}  	else {  		do {  			double lowerBound = 0.0;  			double higherBound = 0.0;  			//roll the dice and generate the orbital radius  			do {  				roll = velvetBag.gurpsRoll (modifiers);  				if (roll <= 6)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  				if (roll >= 7 && roll <= 9)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  				if (roll >= 10 && roll <= 11)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  				if (roll >= 12 && roll <= 14)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  				if (roll >= 15)  					ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  				tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			}  			while (tempVal <= minOrbitalDistance);  			//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   			lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  			higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  			//set for constraints  			if (lowerBound < minOrbitalDistance)  				lowerBound = minOrbitalDistance;  			if (higherBound > maxOrbitalDistance)  				higherBound = maxOrbitalDistance;  			ourSystem.sysStars [i].orbitalRadius = tempVal;  			ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  		}  		while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  		//let's see if it has a subcompanion  		if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  			roll = velvetBag.gurpsRoll ();  			if (roll >= 11) {  				//generate the subcompanion  				int order = 0;  				if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  					order = Star.IS_SECCOMP;  				if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  					order = Star.IS_TRICOMP;  				//add the star  				ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  				ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  				//set the name' then generate the star  				ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  				libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  				starLimit++;  				//increment the total number of stars we have generated  			}  		}  	}  }  else {  	minOrbitalDistance = 0;  	maxOrbitalDistance = ourSystem.sysStars [ourSystem.getStellarParentID (ourSystem.sysStars [i].parentID)].orbitalRadius;  	//roll for seperation  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice  		roll = velvetBag.gurpsRoll (-6);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		//set the subcompanion orbital  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  	}  	while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  	modifiers = modifiers + 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: modifiers = modifiers + 6;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (OptionCont.forceGardenFavorable && ourSystem.sysStars [i].parentID == Star.IS_PRIMARY)  	modifiers = modifiers + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: modifiers = modifiers + 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (minOrbitalDistance == 600.0) {  	//in this situation' orbital 3 or so can't be safely placed because the range is 0.   	// so we autogenerate it.  	tempVal = velvetBag.rollRange (25' 25);  	ourSystem.sysStars [i].orbitalSep = 5;  	ourSystem.sysStars [ourSystem.star2index].orbitalRadius = ourSystem.sysStars [ourSystem.star2index].orbitalRadius - tempVal;  	ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	minOrbitalDistance = ourSystem.sysStars [i].orbitalRadius;  }  else {  	do {  		double lowerBound = 0.0;  		double higherBound = 0.0;  		//roll the dice and generate the orbital radius  		do {  			roll = velvetBag.gurpsRoll (modifiers);  			if (roll <= 6)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  			if (roll >= 7 && roll <= 9)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  			if (roll >= 10 && roll <= 11)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  			if (roll >= 12 && roll <= 14)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  			if (roll >= 15)  				ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  			tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		}  		while (tempVal <= minOrbitalDistance);  		//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   		lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  		higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  		//set for constraints  		if (lowerBound < minOrbitalDistance)  			lowerBound = minOrbitalDistance;  		if (higherBound > maxOrbitalDistance)  			higherBound = maxOrbitalDistance;  		ourSystem.sysStars [i].orbitalRadius = tempVal;  		ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  	}  	while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  	//let's see if it has a subcompanion  	if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  		roll = velvetBag.gurpsRoll ();  		if (roll >= 11) {  			//generate the subcompanion  			int order = 0;  			if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  				order = Star.IS_SECCOMP;  			if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  				order = Star.IS_TRICOMP;  			//add the star  			ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  			ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  			//set the name' then generate the star  			ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  			libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  			starLimit++;  			//increment the total number of stars we have generated  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: tempVal = velvetBag.rollRange (25' 25);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: tempVal = velvetBag.rollRange (25' 25);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: ourSystem.sysStars [i].orbitalSep = 5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: ourSystem.sysStars [i].orbitalRadius = 600 + tempVal;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice and generate the orbital radius  	do {  		roll = velvetBag.gurpsRoll (modifiers);  		if (roll <= 6)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  		if (roll >= 7 && roll <= 9)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  		if (roll >= 10 && roll <= 11)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  		if (roll >= 12 && roll <= 14)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  		if (roll >= 15)  			ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  		tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	}  	while (tempVal <= minOrbitalDistance);  	//if (ourSystem.sysStars[i].selfID == 2) tempVal = this.velvetBag.six(1' 7) * ourSystem.sysStars[i].getSepModifier();   	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	//set for constraints  	if (lowerBound < minOrbitalDistance)  		lowerBound = minOrbitalDistance;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius;  }  while (ourSystem.sysStars [i].orbitalRadius <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	roll = velvetBag.gurpsRoll (modifiers);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  }  while (tempVal <= minOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll <= 6)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 15)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (ourSystem.sysStars [i].orbitalSep == Star.ORBSEP_DISTANT) {  	roll = velvetBag.gurpsRoll ();  	if (roll >= 11) {  		//generate the subcompanion  		int order = 0;  		if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  			order = Star.IS_SECCOMP;  		if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  			order = Star.IS_TRICOMP;  		//add the star  		ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  		ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  		//set the name' then generate the star  		ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  		libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  		starLimit++;  		//increment the total number of stars we have generated  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 11) {  	//generate the subcompanion  	int order = 0;  	if (ourSystem.sysStars [i].selfID == Star.IS_SECONDARY)  		order = Star.IS_SECCOMP;  	if (ourSystem.sysStars [i].selfID == Star.IS_TRINARY)  		order = Star.IS_TRICOMP;  	//add the star  	ourSystem.addStar (order' ourSystem.sysStars [i].selfID' (i + 1));  	ourSystem.sysStars [starLimit].name = Star.genGenericName (ourSystem.sysName' (i + 1));  	//set the name' then generate the star  	ourSystem.sysStars [starLimit].parentName = ourSystem.sysStars [i].name;  	libStarGen.generateAStar (ourSystem.sysStars [starLimit]' velvetBag' ourSystem.sysStars [i].currMass' ourSystem.sysName);  	starLimit++;  	//increment the total number of stars we have generated  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: do {  	double lowerBound = 0.0;  	double higherBound = 0.0;  	//roll the dice  	roll = velvetBag.gurpsRoll (-6);  	if (roll <= 6)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  	if (roll >= 7 && roll <= 9)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  	if (roll >= 10 && roll <= 11)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  	if (roll >= 12 && roll <= 14)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  	if (roll >= 15)  		ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  	//set the subcompanion orbital  	tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  	higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  	if (higherBound > maxOrbitalDistance)  		higherBound = maxOrbitalDistance;  	ourSystem.sysStars [i].orbitalRadius = tempVal;  	ourSystem.sysStars [i].distFromPrimary = ourSystem.sysStars [i].orbitalRadius + maxOrbitalDistance;  }  while (ourSystem.sysStars [i].orbitalRadius > maxOrbitalDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: roll = velvetBag.gurpsRoll (-6);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll <= 6)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_VERYCLOSE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_CLOSE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_MODERATE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_WIDE;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: if (roll >= 15)  	ourSystem.sysStars [i].orbitalSep = Star.ORBSEP_DISTANT;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: tempVal = velvetBag.rng (2' 6) * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: lowerBound = tempVal - .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,placeOurStars,The following statement contains a magic number: higherBound = .5 * libStarGen.getSepModifier (ourSystem.sysStars [i].orbitalSep) + tempVal;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	for (int j = 0; j < stars.Count; j++) {  		distChart [i' j] = 0.0;  		if (i == 0) {  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [i' 1] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [i' 2] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [i' 3] = stars [j].distFromPrimary * -1.0;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [i' 4] = stars [j].distFromPrimary * -1.0;  		}  		if (stars [i].orderID == Star.IS_SECONDARY) {  			distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRINARY) {  			distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_SECCOMP) {  			distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  		if (stars [i].orderID == Star.IS_TRICOMP) {  			distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECONDARY)  				distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRINARY)  				distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_SECCOMP)  				distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  			if (stars [j].orderID == Star.IS_TRICOMP)  				distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  		}  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: for (int j = 0; j < stars.Count; j++) {  	distChart [i' j] = 0.0;  	if (i == 0) {  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [i' 1] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [i' 2] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [i' 3] = stars [j].distFromPrimary * -1.0;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [i' 4] = stars [j].distFromPrimary * -1.0;  	}  	if (stars [i].orderID == Star.IS_SECONDARY) {  		distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRINARY) {  		distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_SECCOMP) {  		distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  	if (stars [i].orderID == Star.IS_TRICOMP) {  		distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECONDARY)  			distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRINARY)  			distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_SECCOMP)  			distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  		if (stars [j].orderID == Star.IS_TRICOMP)  			distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (i == 0) {  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [i' 1] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [i' 2] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [i' 3] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [i' 4] = stars [j].distFromPrimary * -1.0;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (i == 0) {  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [i' 1] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [i' 2] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [i' 3] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [i' 4] = stars [j].distFromPrimary * -1.0;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (i == 0) {  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [i' 1] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [i' 2] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [i' 3] = stars [j].distFromPrimary * -1.0;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [i' 4] = stars [j].distFromPrimary * -1.0;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [i' 2] = stars [j].distFromPrimary * -1.0;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [i' 2] = stars [j].distFromPrimary * -1.0;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [i' 3] = stars [j].distFromPrimary * -1.0;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [i' 3] = stars [j].distFromPrimary * -1.0;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [i' 4] = stars [j].distFromPrimary * -1.0;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [i' 4] = stars [j].distFromPrimary * -1.0;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECONDARY) {  	distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECONDARY) {  	distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECONDARY) {  	distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECONDARY) {  	distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECONDARY) {  	distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECONDARY) {  	distChart [1' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [1' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [1' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [1' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [1' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY) {  	distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 0] = distChart [0' 0] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECONDARY)  	distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 1] = distChart [0' 1] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [2' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP) {  	distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 0] = distChart [0' 0] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECONDARY)  	distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 1] = distChart [0' 1] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [3' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP) {  	distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECONDARY)  		distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRINARY)  		distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_SECCOMP)  		distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  	if (stars [j].orderID == Star.IS_TRICOMP)  		distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 0] = distChart [0' 0] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECONDARY)  	distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 1] = distChart [0' 1] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRINARY)  	distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 2] = distChart [0' 2] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_SECCOMP)  	distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 3] = distChart [0' 3] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: if (stars [j].orderID == Star.IS_TRICOMP)  	distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,genDistChart,The following statement contains a magic number: distChart [4' 4] = distChart [0' 4] + stars [i].distFromPrimary;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: do {  	currTemp = 0;  	foreach (Star s in stars) {  		int currStar = 0;  		//first' find the current star.  		if (s.orderID == Star.IS_PRIMARY)  			currStar = 0;  		if (s.orderID == Star.IS_SECONDARY)  			currStar = 1;  		if (s.orderID == Star.IS_TRINARY)  			currStar = 2;  		if (s.orderID == Star.IS_SECCOMP)  			currStar = 3;  		if (s.orderID == Star.IS_TRICOMP)  			currStar = 4;  		detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  		currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  	}  	currTemp = Math.Pow (currTemp' .25);  	if (currTemp == 320) {  		upperBound = currDistance;  	}  	if (currTemp == 240) {  		lowerBound = currDistance;  		habitableZone.Add (new Range (lowerBound' upperBound));  		lowerBound = 0;  		upperBound = 0;  	}  	currDistance = currDistance + (.00001);  }  while (currDistance <= maxDistance);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: foreach (Star s in stars) {  	int currStar = 0;  	//first' find the current star.  	if (s.orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (s.orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (s.orderID == Star.IS_TRINARY)  		currStar = 2;  	if (s.orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (s.orderID == Star.IS_TRICOMP)  		currStar = 4;  	detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  	currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: foreach (Star s in stars) {  	int currStar = 0;  	//first' find the current star.  	if (s.orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (s.orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (s.orderID == Star.IS_TRINARY)  		currStar = 2;  	if (s.orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (s.orderID == Star.IS_TRICOMP)  		currStar = 4;  	detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  	currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: foreach (Star s in stars) {  	int currStar = 0;  	//first' find the current star.  	if (s.orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (s.orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (s.orderID == Star.IS_TRINARY)  		currStar = 2;  	if (s.orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (s.orderID == Star.IS_TRICOMP)  		currStar = 4;  	detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  	currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: foreach (Star s in stars) {  	int currStar = 0;  	//first' find the current star.  	if (s.orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (s.orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (s.orderID == Star.IS_TRINARY)  		currStar = 2;  	if (s.orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (s.orderID == Star.IS_TRICOMP)  		currStar = 4;  	detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  	currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: foreach (Star s in stars) {  	int currStar = 0;  	//first' find the current star.  	if (s.orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (s.orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (s.orderID == Star.IS_TRINARY)  		currStar = 2;  	if (s.orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (s.orderID == Star.IS_TRICOMP)  		currStar = 4;  	detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  	currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: foreach (Star s in stars) {  	int currStar = 0;  	//first' find the current star.  	if (s.orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (s.orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (s.orderID == Star.IS_TRINARY)  		currStar = 2;  	if (s.orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (s.orderID == Star.IS_TRICOMP)  		currStar = 4;  	detDst = Math.Abs (distanceChart [0' currStar] + currDistance);  	currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: if (s.orderID == Star.IS_TRINARY)  	currStar = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currStar = 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: if (s.orderID == Star.IS_SECCOMP)  	currStar = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currStar = 3;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: if (s.orderID == Star.IS_TRICOMP)  	currStar = 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currStar = 4;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currTemp = currTemp + Math.Pow ((278.0 * Math.Pow (s.currLumin' .25)) / Math.Sqrt (detDst)' 4);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currTemp = Math.Pow (currTemp' .25);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: if (currTemp == 320) {  	upperBound = currDistance;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: if (currTemp == 240) {  	lowerBound = currDistance;  	habitableZone.Add (new Range (lowerBound' upperBound));  	lowerBound = 0;  	upperBound = 0;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,initateHabitableZones,The following statement contains a magic number: currDistance = currDistance + (.00001);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite s in ourPlanets) {  	if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT || s.baseType == Satellite.BASETYPE_EMPTY) {  		if (s.baseType == Satellite.BASETYPE_ASTEROIDBELT)  			determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  		continue;  	}  	double temp = 0.0;  	int parent = ourSystem.getValidParent (s.parentID);  	//set physical properties  	s.genGenericName (ourSystem.sysStars [parent].name' ourSystem.sysName);  	s.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	s.genDensity (velvetBag);  	s.genPhysicalParameters (velvetBag);  	s.setClimateData (ourSystem.maxMass' velvetBag);  	s.detSurfaceTemp (0);  	if (!(s.baseType == Satellite.BASETYPE_GASGIANT))  		s.calcAtmPres ();  	s.createMoons (ourSystem.sysName' velvetBag' OptionCont.moonOrbitFlag);  	s.getPlanetEccentricity (ourSystem.sysStars [parent].gasGiantFlag' Star.snowLine (ourSystem.sysStars [parent].initLumin)' velvetBag);  	s.generateOrbitalPeriod (ourSystem.sysStars [parent].currMass);  	s.createAxialTilt (velvetBag);  	foreach (Star sun in ourSystem.sysStars) {  		double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  		temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  		int tide = 0;  		//add the correct flag.  		if (sun.selfID == Star.IS_PRIMARY)  			tide = Satellite.TIDE_PRIMARYSTAR;  		if (sun.selfID == Star.IS_SECONDARY)  			tide = Satellite.TIDE_SECONDARYSTAR;  		if (sun.selfID == Star.IS_TRINARY)  			tide = Satellite.TIDE_TRINARYSTAR;  		if (sun.selfID == Star.IS_SECCOMP)  			tide = Satellite.TIDE_SECCOMPSTAR;  		if (sun.selfID == Star.IS_TRICOMP)  			tide = Satellite.TIDE_TRICOMPSTAR;  		s.tideForce.Add (tide' temp);  	}  	if (s.majorMoons.Count > 0) {  		foreach (Satellite moon in s.majorMoons) {  			double lunarTides = 0.0;  			double different = 0;  			moon.genGenericName (s.name' ourSystem.sysName);  			//establish physical properties  			moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//first' differentation test.  				double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  				if (dFactor > 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.15;  				}  				if (dFactor > 80 && dFactor <= 100) {  					if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  						moon.updateType (Satellite.SUBTYPE_SULFUR);  					different = -.1;  				}  				if (dFactor > 50 && dFactor <= 80) {  					different = -.05;  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  				if (dFactor > 30 && dFactor <= 50) {  					moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  				}  			}  			moon.genDensity (velvetBag);  			moon.genPhysicalParameters (velvetBag);  			moon.setClimateData (ourSystem.maxMass' velvetBag);  			moon.detSurfaceTemp (different);  			moon.calcAtmPres ();  			if (s.baseType == Satellite.BASETYPE_GASGIANT) {  				//radiation test  				if (moon.atmPres > .2) {  					moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  				}  				else {  					moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  				}  			}  			//orbital period  			moon.generateOrbitalPeriod (s.mass);  			//update parent.   			temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  			s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  			//moon tides  			lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  			lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  			moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  			moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  			if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  				moon.isResonant = true;  			}  			else if (moon.tideTotal >= 50) {  				moon.isTideLocked = true;  			}  			moon.generateOrbitalVelocity (velvetBag);  			if (moon.isTideLocked && !moon.isResonant) {  				updateTidalLock (moon' velvetBag);  			}  			if (moon.isResonant) {  				moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  				moon.rotationalPeriod = moon.siderealPeriod;  			}  			if (velvetBag.gurpsRoll () >= 17) {  				moon.retrogradeMotion = true;  			}  			if (moon.orbitalPeriod == moon.siderealPeriod)  				moon.rotationalPeriod = 0;  			else//calculate solar day from sidereal  			 {  				double sidereal;  				if (moon.retrogradeMotion)  					sidereal = -1 * moon.siderealPeriod;  				else  					sidereal = moon.siderealPeriod;  				moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  				moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  			}  			moon.createAxialTilt (velvetBag);  			determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  		}  	}  	//tides calculated already.  	s.tideTotal = s.totalTidalForce (ourSystem.sysAge);  	if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  		s.isResonant = true;  	}  	else if (s.tideTotal >= 50) {  		s.isTideLocked = true;  	}  	s.generateOrbitalVelocity (velvetBag);  	if (s.isTideLocked && !s.isResonant) {  		updateTidalLock (s' velvetBag);  	}  	if (s.isResonant) {  		s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  		s.rotationalPeriod = s.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 13) {  		s.retrogradeMotion = true;  	}  	if (s.orbitalPeriod == s.siderealPeriod) {  		s.rotationalPeriod = 0;  	}  	else {  		double sidereal;  		if (s.retrogradeMotion)  			sidereal = -1 * s.siderealPeriod;  		else  			sidereal = s.siderealPeriod;  		s.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  	}  	s.createAxialTilt (velvetBag);  	determineGeologicValues (s' velvetBag' ourSystem.sysAge' false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Star sun in ourSystem.sysStars) {  	double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  	temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  	int tide = 0;  	//add the correct flag.  	if (sun.selfID == Star.IS_PRIMARY)  		tide = Satellite.TIDE_PRIMARYSTAR;  	if (sun.selfID == Star.IS_SECONDARY)  		tide = Satellite.TIDE_SECONDARYSTAR;  	if (sun.selfID == Star.IS_TRINARY)  		tide = Satellite.TIDE_TRINARYSTAR;  	if (sun.selfID == Star.IS_SECCOMP)  		tide = Satellite.TIDE_SECCOMPSTAR;  	if (sun.selfID == Star.IS_TRICOMP)  		tide = Satellite.TIDE_TRICOMPSTAR;  	s.tideForce.Add (tide' temp);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Star sun in ourSystem.sysStars) {  	double dist = determineDistance (s.orbitalRadius' distanceTable' s.parentID' sun.selfID);  	temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  	int tide = 0;  	//add the correct flag.  	if (sun.selfID == Star.IS_PRIMARY)  		tide = Satellite.TIDE_PRIMARYSTAR;  	if (sun.selfID == Star.IS_SECONDARY)  		tide = Satellite.TIDE_SECONDARYSTAR;  	if (sun.selfID == Star.IS_TRINARY)  		tide = Satellite.TIDE_TRINARYSTAR;  	if (sun.selfID == Star.IS_SECCOMP)  		tide = Satellite.TIDE_SECCOMPSTAR;  	if (sun.selfID == Star.IS_TRICOMP)  		tide = Satellite.TIDE_TRICOMPSTAR;  	s.tideForce.Add (tide' temp);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: temp = (.46 * sun.currMass * s.diameter) / Math.Pow (s.orbitalRadius' 3);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.majorMoons.Count > 0) {  	foreach (Satellite moon in s.majorMoons) {  		double lunarTides = 0.0;  		double different = 0;  		moon.genGenericName (s.name' ourSystem.sysName);  		//establish physical properties  		moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//first' differentation test.  			double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  			if (dFactor > 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.15;  			}  			if (dFactor > 80 && dFactor <= 100) {  				if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  					moon.updateType (Satellite.SUBTYPE_SULFUR);  				different = -.1;  			}  			if (dFactor > 50 && dFactor <= 80) {  				different = -.05;  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  			if (dFactor > 30 && dFactor <= 50) {  				moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  			}  		}  		moon.genDensity (velvetBag);  		moon.genPhysicalParameters (velvetBag);  		moon.setClimateData (ourSystem.maxMass' velvetBag);  		moon.detSurfaceTemp (different);  		moon.calcAtmPres ();  		if (s.baseType == Satellite.BASETYPE_GASGIANT) {  			//radiation test  			if (moon.atmPres > .2) {  				moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  			}  			else {  				moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  			}  		}  		//orbital period  		moon.generateOrbitalPeriod (s.mass);  		//update parent.   		temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  		s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  		//moon tides  		lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  		lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  		moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  		moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  		if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  			moon.isResonant = true;  		}  		else if (moon.tideTotal >= 50) {  			moon.isTideLocked = true;  		}  		moon.generateOrbitalVelocity (velvetBag);  		if (moon.isTideLocked && !moon.isResonant) {  			updateTidalLock (moon' velvetBag);  		}  		if (moon.isResonant) {  			moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  			moon.rotationalPeriod = moon.siderealPeriod;  		}  		if (velvetBag.gurpsRoll () >= 17) {  			moon.retrogradeMotion = true;  		}  		if (moon.orbitalPeriod == moon.siderealPeriod)  			moon.rotationalPeriod = 0;  		else//calculate solar day from sidereal  		 {  			double sidereal;  			if (moon.retrogradeMotion)  				sidereal = -1 * moon.siderealPeriod;  			else  				sidereal = moon.siderealPeriod;  			moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  			moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  		}  		moon.createAxialTilt (velvetBag);  		determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: foreach (Satellite moon in s.majorMoons) {  	double lunarTides = 0.0;  	double different = 0;  	moon.genGenericName (s.name' ourSystem.sysName);  	//establish physical properties  	moon.genWorldType (ourSystem.maxMass' ourSystem.sysAge' velvetBag);  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//first' differentation test.  		double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  		if (dFactor > 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.15;  		}  		if (dFactor > 80 && dFactor <= 100) {  			if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  				moon.updateType (Satellite.SUBTYPE_SULFUR);  			different = -.1;  		}  		if (dFactor > 50 && dFactor <= 80) {  			different = -.05;  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  		if (dFactor > 30 && dFactor <= 50) {  			moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  		}  	}  	moon.genDensity (velvetBag);  	moon.genPhysicalParameters (velvetBag);  	moon.setClimateData (ourSystem.maxMass' velvetBag);  	moon.detSurfaceTemp (different);  	moon.calcAtmPres ();  	if (s.baseType == Satellite.BASETYPE_GASGIANT) {  		//radiation test  		if (moon.atmPres > .2) {  			moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  		}  		else {  			moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  		}  	}  	//orbital period  	moon.generateOrbitalPeriod (s.mass);  	//update parent.   	temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  	s.tideForce.Add ((Satellite.TIDE_MOON_BASE + (moon.selfID + 1))' temp);  	//moon tides  	lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  	lunarTides = (lunarTides * ourSystem.sysAge) / moon.mass;  	moon.tideForce.Add (Satellite.TIDE_PARPLANET' lunarTides);  	moon.tideTotal = moon.totalTidalForce (ourSystem.sysAge);  	if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  		moon.isResonant = true;  	}  	else if (moon.tideTotal >= 50) {  		moon.isTideLocked = true;  	}  	moon.generateOrbitalVelocity (velvetBag);  	if (moon.isTideLocked && !moon.isResonant) {  		updateTidalLock (moon' velvetBag);  	}  	if (moon.isResonant) {  		moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  		moon.rotationalPeriod = moon.siderealPeriod;  	}  	if (velvetBag.gurpsRoll () >= 17) {  		moon.retrogradeMotion = true;  	}  	if (moon.orbitalPeriod == moon.siderealPeriod)  		moon.rotationalPeriod = 0;  	else//calculate solar day from sidereal  	 {  		double sidereal;  		if (moon.retrogradeMotion)  			sidereal = -1 * moon.siderealPeriod;  		else  			sidereal = moon.siderealPeriod;  		moon.rotationalPeriod = (s.orbitalPeriod * sidereal) / (s.orbitalPeriod - sidereal);  		moon.orbitalCycle = (moon.orbitalPeriod * s.rotationalPeriod) / (moon.orbitalPeriod - s.rotationalPeriod);  	}  	moon.createAxialTilt (velvetBag);  	determineGeologicValues (moon' velvetBag' ourSystem.sysAge' s.baseType == Satellite.BASETYPE_GASGIANT ? true : false);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//first' differentation test.  	double dFactor = moon.getDifferentationFactor (s.mass' velvetBag);  	if (dFactor > 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.15;  	}  	if (dFactor > 80 && dFactor <= 100) {  		if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  			moon.updateType (Satellite.SUBTYPE_SULFUR);  		different = -.1;  	}  	if (dFactor > 50 && dFactor <= 80) {  		different = -.05;  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  	if (dFactor > 30 && dFactor <= 50) {  		moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 100) {  	if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  		moon.updateType (Satellite.SUBTYPE_SULFUR);  	different = -.15;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 100) {  	if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  		moon.updateType (Satellite.SUBTYPE_SULFUR);  	different = -.15;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: different = -.15;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 80 && dFactor <= 100) {  	if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  		moon.updateType (Satellite.SUBTYPE_SULFUR);  	different = -.1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 80 && dFactor <= 100) {  	if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  		moon.updateType (Satellite.SUBTYPE_SULFUR);  	different = -.1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 80 && dFactor <= 100) {  	if (moon.SatelliteType == Satellite.SUBTYPE_ICE)  		moon.updateType (Satellite.SUBTYPE_SULFUR);  	different = -.1;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: different = -.1;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 50 && dFactor <= 80) {  	different = -.05;  	moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 50 && dFactor <= 80) {  	different = -.05;  	moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 50 && dFactor <= 80) {  	different = -.05;  	moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: different = -.05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 30 && dFactor <= 50) {  	moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (dFactor > 30 && dFactor <= 50) {  	moon.updateDescListing (Satellite.DESC_SUBSURFOCEAN);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.baseType == Satellite.BASETYPE_GASGIANT) {  	//radiation test  	if (moon.atmPres > .2) {  		moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  	}  	else {  		moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  	}  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.atmPres > .2) {  	moon.updateDescListing (Satellite.DESC_RAD_HIGHBACK);  }  else {  	moon.updateDescListing (Satellite.DESC_RAD_LETHALBACK);  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: temp = (2230000 * moon.mass * s.diameter) / Math.Pow (moon.orbitalRadius' 3);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: lunarTides = (2230000 * s.mass * moon.diameter) / Math.Pow (moon.orbitalRadius' 3);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  	moon.isResonant = true;  }  else if (moon.tideTotal >= 50) {  	moon.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  	moon.isResonant = true;  }  else if (moon.tideTotal >= 50) {  	moon.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.tideTotal >= 50 && velvetBag.gurpsRoll () > 17) {  	moon.isResonant = true;  }  else if (moon.tideTotal >= 50) {  	moon.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.tideTotal >= 50) {  	moon.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.isResonant) {  	moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  	moon.rotationalPeriod = moon.siderealPeriod;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (moon.isResonant) {  	moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  	moon.rotationalPeriod = moon.siderealPeriod;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: moon.siderealPeriod = (moon.orbitalPeriod * 2.0 / 3.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (velvetBag.gurpsRoll () >= 17) {  	moon.retrogradeMotion = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  	s.isResonant = true;  }  else if (s.tideTotal >= 50) {  	s.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  	s.isResonant = true;  }  else if (s.tideTotal >= 50) {  	s.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.tideTotal >= 50 && s.orbitalEccent > .1) {  	s.isResonant = true;  }  else if (s.tideTotal >= 50) {  	s.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.tideTotal >= 50) {  	s.isTideLocked = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.isResonant) {  	s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  	s.rotationalPeriod = s.siderealPeriod;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (s.isResonant) {  	s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  	s.rotationalPeriod = s.siderealPeriod;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: s.siderealPeriod = (s.orbitalPeriod * 2.0 / 3.0);  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,createPlanets,The following statement contains a magic number: if (velvetBag.gurpsRoll () >= 13) {  	s.retrogradeMotion = true;  }  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: if (flag == Star.ORBSEP_CONTACT)  	return 0.00001;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: return 0.00001;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: if (flag == Star.ORBSEP_VERYCLOSE)  	return 0.05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: return 0.05;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: if (flag == Star.ORBSEP_CLOSE)  	return 0.5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: return 0.5;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: if (flag == Star.ORBSEP_MODERATE)  	return 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: return 2;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: if (flag == Star.ORBSEP_DISTANT)  	return 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: return 10;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: if (flag == Star.ORBSEP_WIDE)  	return 50;  
Magic Number,StarSystemGurpsGen,libStarGen,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\libStarGen.cs,getSepModifier,The following statement contains a magic number: return 50;  
Magic Number,StarSystemGurpsGen,OptionCont,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\OptionCont.cs,setAxialTilt,The following statement contains a magic number: if (tilt >= 1 && tilt <= 90) {  	OptionCont.forceAxialTilt = tilt;  	return true;  }  
Magic Number,StarSystemGurpsGen,OptionCont,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\OptionCont.cs,setNumberOfStars,The following statement contains a magic number: if ((num == -1) || (num >= 1 && num <= 3)) {  	OptionCont.numStars = num;  	return true;  }  else  	return false;  
Magic Number,StarSystemGurpsGen,OptionCont,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\OptionCont.cs,setNumberOfMoonsOverGarden,The following statement contains a magic number: if ((num == -1) || (num >= 1 && num <= 3)) {  	OptionCont.numMoonsOverGarden = num;  	return true;  }  else  	return false;  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,displayFromStar,The following statement contains a magic number: if ((double)numCurrMass.Value > .525)  	chkFlareStar.Enabled = false;  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numCurrMass_Leave,The following statement contains a magic number: txtCurrLumin.Text = Math.Round (Star.getCurrLumin (this.currAgeChart' (double)numAge.Value' (double)numCurrMass.Value)' 3).ToString ();  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numCurrMass_Leave,The following statement contains a magic number: if ((double)numCurrMass.Value > .525) {  	chkFlareStar.Checked = false;  	chkFlareStar.Enabled = false;  }  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,numAge_Leave,The following statement contains a magic number: txtCurrLumin.Text = Math.Round (Star.getCurrLumin (this.currAgeChart' (double)numAge.Value' (double)numCurrMass.Value)' 3).ToString ();  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,createAcceptRanges,The following statement contains a magic number: this.minGoodLumin = Math.Round (lumin * .9' 3);  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,createAcceptRanges,The following statement contains a magic number: this.minGoodLumin = Math.Round (lumin * .9' 3);  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,createAcceptRanges,The following statement contains a magic number: this.maxGoodLumin = Math.Round (lumin * 1.1' 3);  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,createAcceptRanges,The following statement contains a magic number: this.maxGoodLumin = Math.Round (lumin * 1.1' 3);  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,createAcceptRanges,The following statement contains a magic number: this.minGoodTemp = temp - 100;  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,createAcceptRanges,The following statement contains a magic number: this.maxGoodTemp = temp + 100;  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,txtRadius_Validating,The following statement contains a magic number: if (Double.TryParse (txtRadius.Text' out testRadius)) {  	if (!(testRadius >= 0 && testRadius <= 1000)) {  		MessageBox.Show ("This has been set outside the range of valid orbital radius");  		txtRadius.Text = this.origRadius.ToString ();  	}  }  else {  	MessageBox.Show ("Please enter a valid number");  	txtRadius.Text = this.origRadius.ToString ();  }  
Magic Number,StarSystemGurpsGen,StarAlter,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarAlter.cs,txtRadius_Validating,The following statement contains a magic number: if (!(testRadius >= 0 && testRadius <= 1000)) {  	MessageBox.Show ("This has been set outside the range of valid orbital radius");  	txtRadius.Text = this.origRadius.ToString ();  }  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,genNumOfStars,The following statement contains a magic number: if (OptionCont.inOpenCluster)  	roll = roll + 3;  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,genNumOfStars,The following statement contains a magic number: roll = roll + 3;  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,genNumOfStars,The following statement contains a magic number: roll = (int)Math.Floor ((roll - 1) / 5.0);  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,genNumOfStars,The following statement contains a magic number: if (roll > 3)  	roll = 3;  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,genNumOfStars,The following statement contains a magic number: if (roll > 3)  	roll = 3;  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,genNumOfStars,The following statement contains a magic number: roll = 3;  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= .01 && age < .1)  	return "Extreme Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= .01 && age < .1)  	return "Extreme Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= .1 && age < 2)  	return "Young Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= .1 && age < 2)  	return "Young Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 2 && age < 5.6)  	return "Intermediate Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 2 && age < 5.6)  	return "Intermediate Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 5.6 && age < 8.2)  	return "Old Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 5.6 && age < 8.2)  	return "Old Population I";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 8.2 && age < 10.4)  	return "Intermediate Population II";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 8.2 && age < 10.4)  	return "Intermediate Population II";  
Magic Number,StarSystemGurpsGen,StarSystem,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\StarSystem.cs,getPopulationFromAge,The following statement contains a magic number: if (age >= 10.4)  	return "Extreme Population II";  
Magic Number,StarSystemGurpsGen,Moonlet,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Moonlet.cs,ToString,The following statement contains a magic number: ret = this.moonName + " orbiting at " + Math.Round (this.orbitalRadius' 3) + " Earth diameters and ";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.volActivity == GEOLOGIC_EXTREME)  	mod = mod - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.tecActivity == GEOLOGIC_EXTREME)  	mod = mod - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.getAtmCategory () == ATM_PRES_THIN)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.getAtmCategory () == ATM_PRES_STANDARD)  	mod = mod + 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.getAtmCategory () == ATM_PRES_DENSE)  	mod = mod + 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.hydCoverage > .0 && this.hydCoverage <= .59)  	mod = mod + 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.hydCoverage > .59 && this.hydCoverage <= .90)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.hydCoverage > .59 && this.hydCoverage <= .90)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.hydCoverage > .59 && this.hydCoverage <= .90)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.hydCoverage > .90 && this.hydCoverage <= .99)  	mod = mod + 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.hydCoverage > .90 && this.hydCoverage <= .99)  	mod = mod + 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_COLD)  	mod = mod + 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_CHILLY)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_CHILLY)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_COOL)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_COOL)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_NORMAL)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_NORMAL)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_WARM)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_WARM)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_TROPICAL)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_TROPICAL)  	mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: mod = mod + 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (this.atmPres > 0.01 && this.getClimate (this.surfaceTemp) == Satellite.CLIMATE_HOT)  	mod = mod + 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (mod >= 8 && !OptionCont.overrideHabitability)  	return 8;  else  	return mod;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: if (mod >= 8 && !OptionCont.overrideHabitability)  	return 8;  else  	return mod;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getHabitability,The following statement contains a magic number: return 8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == -5)  	return "Worthless";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == -4)  	return "Very Scant";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == -3)  	return "Scant";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == -2)  	return "Very Poor";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == 2)  	return "Very Abundant";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == 3)  	return "Rich";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == 4)  	return "Very Rich";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getRVMDesc,The following statement contains a magic number: if (this.RVM == 5)  	return "Motherlode";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.baseType == Satellite.BASETYPE_TERRESTIAL) || (this.baseType == Satellite.BASETYPE_MOON)) {  	if (this.SatelliteSize == Satellite.SIZE_TINY) {  		if (this.blackbodyTemp <= 140.50)  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if (this.blackbodyTemp > 140.50)  			this.updateType (Satellite.SUBTYPE_ROCK);  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (this.blackbodyTemp <= 80.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			mod = (int)Math.Floor (sysAge / .5);  			if (mod > 10)  				mod = 10;  			roll = roll + mod;  			if (!OptionCont.noOceanOnlyGarden) {  				if (roll >= 18)  					this.updateType (Satellite.SUBTYPE_GARDEN);  				else  					this.updateType (Satellite.SUBTYPE_OCEAN);  			}  			else  				this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (this.blackbodyTemp <= 150.50)  			this.updateType (Satellite.SUBTYPE_HADEAN);  		if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  			if (maxMass <= .65)  				this.updateType (Satellite.SUBTYPE_AMMONIA);  			else  				this.updateType (Satellite.SUBTYPE_ICE);  		}  		if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  			this.updateType (Satellite.SUBTYPE_ICE);  		if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  			int roll = ourBag.rng (3' 6' 0)' mod = 0;  			if (OptionCont.moreAccurateO2Catastrophe)  				mod = (int)Math.Floor (sysAge / .3);  			else  				mod = (int)Math.Floor (sysAge / .5);  			if (!OptionCont.moreLargeGarden)  				if (mod > 5)  					mod = 5;  			if (OptionCont.moreLargeGarden)  				if (mod > 10)  					mod = 10;  			roll = roll + mod;  			this.updateType (Satellite.SUBTYPE_GARDEN);  		}  		if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  			this.updateType (Satellite.SUBTYPE_GREENHOUSE);  		if (this.blackbodyTemp > 500.50)  			this.updateType (Satellite.SUBTYPE_CHTHONIAN);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY) {  	if (this.blackbodyTemp <= 140.50)  		this.updateType (Satellite.SUBTYPE_ICE);  	if (this.blackbodyTemp > 140.50)  		this.updateType (Satellite.SUBTYPE_ROCK);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY) {  	if (this.blackbodyTemp <= 140.50)  		this.updateType (Satellite.SUBTYPE_ICE);  	if (this.blackbodyTemp > 140.50)  		this.updateType (Satellite.SUBTYPE_ROCK);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp <= 140.50)  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp > 140.50)  	this.updateType (Satellite.SUBTYPE_ROCK);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if (this.blackbodyTemp > 140.50)  		this.updateType (Satellite.SUBTYPE_ROCK);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if (this.blackbodyTemp > 140.50)  		this.updateType (Satellite.SUBTYPE_ROCK);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if (this.blackbodyTemp > 140.50)  		this.updateType (Satellite.SUBTYPE_ROCK);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if (this.blackbodyTemp > 140.50)  		this.updateType (Satellite.SUBTYPE_ROCK);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp <= 80.50)  	this.updateType (Satellite.SUBTYPE_HADEAN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((80.50 < this.blackbodyTemp) && (this.blackbodyTemp <= 140.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp > 140.50)  	this.updateType (Satellite.SUBTYPE_ROCK);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (this.blackbodyTemp <= 80.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		mod = (int)Math.Floor (sysAge / .5);  		if (mod > 10)  			mod = 10;  		roll = roll + mod;  		if (!OptionCont.noOceanOnlyGarden) {  			if (roll >= 18)  				this.updateType (Satellite.SUBTYPE_GARDEN);  			else  				this.updateType (Satellite.SUBTYPE_OCEAN);  		}  		else  			this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp <= 80.50)  	this.updateType (Satellite.SUBTYPE_HADEAN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 80.50) && (this.blackbodyTemp <= 150.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  	if (maxMass <= .65)  		this.updateType (Satellite.SUBTYPE_AMMONIA);  	else  		this.updateType (Satellite.SUBTYPE_ICE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  	if (maxMass <= .65)  		this.updateType (Satellite.SUBTYPE_AMMONIA);  	else  		this.updateType (Satellite.SUBTYPE_ICE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  	if (maxMass <= .65)  		this.updateType (Satellite.SUBTYPE_AMMONIA);  	else  		this.updateType (Satellite.SUBTYPE_ICE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (maxMass <= .65)  	this.updateType (Satellite.SUBTYPE_AMMONIA);  else  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	mod = (int)Math.Floor (sysAge / .5);  	if (mod > 10)  		mod = 10;  	roll = roll + mod;  	if (!OptionCont.noOceanOnlyGarden) {  		if (roll >= 18)  			this.updateType (Satellite.SUBTYPE_GARDEN);  		else  			this.updateType (Satellite.SUBTYPE_OCEAN);  	}  	else  		this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: mod = (int)Math.Floor (sysAge / .5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (mod > 10)  	mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (mod > 10)  	mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (!OptionCont.noOceanOnlyGarden) {  	if (roll >= 18)  		this.updateType (Satellite.SUBTYPE_GARDEN);  	else  		this.updateType (Satellite.SUBTYPE_OCEAN);  }  else  	this.updateType (Satellite.SUBTYPE_GARDEN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (roll >= 18)  	this.updateType (Satellite.SUBTYPE_GARDEN);  else  	this.updateType (Satellite.SUBTYPE_OCEAN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  	this.updateType (Satellite.SUBTYPE_GREENHOUSE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  	this.updateType (Satellite.SUBTYPE_GREENHOUSE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp > 500.50)  	this.updateType (Satellite.SUBTYPE_CHTHONIAN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.blackbodyTemp <= 150.50)  		this.updateType (Satellite.SUBTYPE_HADEAN);  	if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  		if (maxMass <= .65)  			this.updateType (Satellite.SUBTYPE_AMMONIA);  		else  			this.updateType (Satellite.SUBTYPE_ICE);  	}  	if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  		this.updateType (Satellite.SUBTYPE_ICE);  	if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  		int roll = ourBag.rng (3' 6' 0)' mod = 0;  		if (OptionCont.moreAccurateO2Catastrophe)  			mod = (int)Math.Floor (sysAge / .3);  		else  			mod = (int)Math.Floor (sysAge / .5);  		if (!OptionCont.moreLargeGarden)  			if (mod > 5)  				mod = 5;  		if (OptionCont.moreLargeGarden)  			if (mod > 10)  				mod = 10;  		roll = roll + mod;  		this.updateType (Satellite.SUBTYPE_GARDEN);  	}  	if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  		this.updateType (Satellite.SUBTYPE_GREENHOUSE);  	if (this.blackbodyTemp > 500.50)  		this.updateType (Satellite.SUBTYPE_CHTHONIAN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp <= 150.50)  	this.updateType (Satellite.SUBTYPE_HADEAN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  	if (maxMass <= .65)  		this.updateType (Satellite.SUBTYPE_AMMONIA);  	else  		this.updateType (Satellite.SUBTYPE_ICE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  	if (maxMass <= .65)  		this.updateType (Satellite.SUBTYPE_AMMONIA);  	else  		this.updateType (Satellite.SUBTYPE_ICE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 150.50) && (this.blackbodyTemp <= 230.50)) {  	if (maxMass <= .65)  		this.updateType (Satellite.SUBTYPE_AMMONIA);  	else  		this.updateType (Satellite.SUBTYPE_ICE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (maxMass <= .65)  	this.updateType (Satellite.SUBTYPE_AMMONIA);  else  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 230.50) && (this.blackbodyTemp <= 240.50))  	this.updateType (Satellite.SUBTYPE_ICE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 240.50) && (this.blackbodyTemp <= 320.50)) {  	int roll = ourBag.rng (3' 6' 0)' mod = 0;  	if (OptionCont.moreAccurateO2Catastrophe)  		mod = (int)Math.Floor (sysAge / .3);  	else  		mod = (int)Math.Floor (sysAge / .5);  	if (!OptionCont.moreLargeGarden)  		if (mod > 5)  			mod = 5;  	if (OptionCont.moreLargeGarden)  		if (mod > 10)  			mod = 10;  	roll = roll + mod;  	this.updateType (Satellite.SUBTYPE_GARDEN);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (OptionCont.moreAccurateO2Catastrophe)  	mod = (int)Math.Floor (sysAge / .3);  else  	mod = (int)Math.Floor (sysAge / .5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (OptionCont.moreAccurateO2Catastrophe)  	mod = (int)Math.Floor (sysAge / .3);  else  	mod = (int)Math.Floor (sysAge / .5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: mod = (int)Math.Floor (sysAge / .3);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: mod = (int)Math.Floor (sysAge / .5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (!OptionCont.moreLargeGarden)  	if (mod > 5)  		mod = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (!OptionCont.moreLargeGarden)  	if (mod > 5)  		mod = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (mod > 5)  	mod = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (mod > 5)  	mod = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: mod = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (OptionCont.moreLargeGarden)  	if (mod > 10)  		mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (OptionCont.moreLargeGarden)  	if (mod > 10)  		mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (mod > 10)  	mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (mod > 10)  	mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: mod = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  	this.updateType (Satellite.SUBTYPE_GREENHOUSE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if ((this.blackbodyTemp > 321.50) && (this.blackbodyTemp <= 500.50))  	this.updateType (Satellite.SUBTYPE_GREENHOUSE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genWorldType,The following statement contains a magic number: if (this.blackbodyTemp > 500.50)  	this.updateType (Satellite.SUBTYPE_CHTHONIAN);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: for (int i = 0; i < stars.Count; i++) {  	int currStar = 0' planetOwner = 0;  	//first' determine the lookup for the planet ownership  	if ((planetOwnership == Satellite.ORBIT_PRISEC) || (planetOwnership == Satellite.ORBIT_PRISECTRI) || (planetOwnership == Satellite.ORBIT_PRITRI) || (planetOwnership == Star.IS_PRIMARY))  		planetOwner = 0;  	if ((planetOwnership == Satellite.ORBIT_SECCOM) || (planetOwnership == Satellite.ORBIT_SECTRI) || (planetOwnership == Star.IS_SECONDARY))  		planetOwner = 1;  	if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  		planetOwner = 2;  	if (planetOwnership == Star.IS_SECCOMP)  		planetOwner = 3;  	if (planetOwnership == Star.IS_TRICOMP)  		planetOwner = 4;  	//second' lookup for the star we're in.  	if (stars [i].orderID == Star.IS_PRIMARY)  		currStar = 0;  	if (stars [i].orderID == Star.IS_SECONDARY)  		currStar = 1;  	if (stars [i].orderID == Star.IS_TRINARY)  		currStar = 2;  	if (stars [i].orderID == Star.IS_SECCOMP)  		currStar = 3;  	if (stars [i].orderID == Star.IS_TRICOMP)  		currStar = 4;  	currDistance = Math.Abs (distChart [planetOwner' currStar] + planetRadius);  	//add the blackbody for this star  	currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: if ((planetOwnership == Satellite.ORBIT_TRICOM) || (planetOwnership == Star.IS_TRINARY))  	planetOwner = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: planetOwner = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: if (planetOwnership == Star.IS_SECCOMP)  	planetOwner = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: planetOwner = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: if (planetOwnership == Star.IS_TRICOMP)  	planetOwner = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: planetOwner = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRINARY)  	currStar = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: currStar = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: if (stars [i].orderID == Star.IS_SECCOMP)  	currStar = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: currStar = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: if (stars [i].orderID == Star.IS_TRICOMP)  	currStar = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: currStar = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: currTemp = currTemp + Math.Pow ((blackMulti * Math.Pow (stars [i].currLumin' .25)) / Math.Sqrt (currDistance)' 4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcBlackbodyTemp,The following statement contains a magic number: currTemp = Math.Pow (currTemp' .25);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	double varMass = ourBag.rng (1' 50' 0) * .01;  	if (roll != 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		//now we interporlate  		this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  		this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  	}  	else if (roll == 18) {  		int massEntry = 0' densityEntry = 1;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			massEntry = 2;  			densityEntry = 3;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			massEntry = 4;  			densityEntry = 5;  		}  		this.mass = this.gasGiantTable [roll] [massEntry];  		this.density = this.gasGiantTable [roll] [densityEntry];  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll != 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	//now we interporlate  	this.mass = ((this.gasGiantTable [roll + 1] [massEntry] - this.gasGiantTable [roll] [massEntry] * varMass) + this.gasGiantTable [roll] [massEntry]);  	this.density = ((this.gasGiantTable [roll + 1] [densityEntry] - this.gasGiantTable [roll] [densityEntry] * varMass) + this.gasGiantTable [roll] [densityEntry]);  }  else if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	massEntry = 2;  	densityEntry = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	massEntry = 2;  	densityEntry = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: massEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	massEntry = 4;  	densityEntry = 5;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	massEntry = 4;  	densityEntry = 5;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: massEntry = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (roll == 18) {  	int massEntry = 0' densityEntry = 1;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		massEntry = 2;  		densityEntry = 3;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		massEntry = 4;  		densityEntry = 5;  	}  	this.mass = this.gasGiantTable [roll] [massEntry];  	this.density = this.gasGiantTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	massEntry = 2;  	densityEntry = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	massEntry = 2;  	densityEntry = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: massEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	massEntry = 4;  	densityEntry = 5;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	massEntry = 4;  	densityEntry = 5;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: massEntry = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	int densityEntry = 0;  	//means we don't need to bother specifying for icy core!  	if (this.SatelliteType == Satellite.SUBTYPE_ROCK)  		densityEntry = 1;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_LARGE)  		densityEntry = 2;  	this.density = this.terrDenTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	int densityEntry = 0;  	//means we don't need to bother specifying for icy core!  	if (this.SatelliteType == Satellite.SUBTYPE_ROCK)  		densityEntry = 1;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_LARGE)  		densityEntry = 2;  	this.density = this.terrDenTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	int densityEntry = 0;  	//means we don't need to bother specifying for icy core!  	if (this.SatelliteType == Satellite.SUBTYPE_ROCK)  		densityEntry = 1;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_LARGE)  		densityEntry = 2;  	this.density = this.terrDenTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	int densityEntry = 0;  	//means we don't need to bother specifying for icy core!  	if (this.SatelliteType == Satellite.SUBTYPE_ROCK)  		densityEntry = 1;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_LARGE)  		densityEntry = 2;  	this.density = this.terrDenTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	int densityEntry = 0;  	//means we don't need to bother specifying for icy core!  	if (this.SatelliteType == Satellite.SUBTYPE_ROCK)  		densityEntry = 1;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  		densityEntry = 2;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_LARGE)  		densityEntry = 2;  	this.density = this.terrDenTable [roll] [densityEntry];  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  	densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  	densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  	densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  	densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_LARGE)  	densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genDensity,The following statement contains a magic number: densityEntry = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_MOON) {  	double baseVal = Math.Sqrt (this.blackbodyTemp / this.density);  	//range for small is .004 to .024  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		this.diameter = ourBag.rollRange (.004' .020) * baseVal;  	//range for small is .024 to .030  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		this.diameter = ourBag.rollRange (.024' .006) * baseVal;  	//range for medium is .030 to .065  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		this.diameter = ourBag.rollRange (.030' .035) * baseVal;  	//range for large is .065 to .091  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.diameter = ourBag.rollRange (.065' .026) * baseVal;  	this.mass = this.density * Math.Pow (this.diameter' 3);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY)  	this.diameter = ourBag.rollRange (.004' .020) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY)  	this.diameter = ourBag.rollRange (.004' .020) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.004' .020) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.004' .020) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL)  	this.diameter = ourBag.rollRange (.024' .006) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL)  	this.diameter = ourBag.rollRange (.024' .006) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.024' .006) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.024' .006) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  	this.diameter = ourBag.rollRange (.030' .035) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  	this.diameter = ourBag.rollRange (.030' .035) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.030' .035) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.030' .035) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.diameter = ourBag.rollRange (.065' .026) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.diameter = ourBag.rollRange (.065' .026) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.065' .026) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = ourBag.rollRange (.065' .026) * baseVal;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.mass = this.density * Math.Pow (this.diameter' 3);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	this.diameter = Math.Pow ((this.mass / this.density)' .33);  	this.gravity = this.density * this.diameter;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genPhysicalParameters,The following statement contains a magic number: this.diameter = Math.Pow ((this.mass / this.density)' .33);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL && this.SatelliteType == Satellite.SUBTYPE_ICE)  	presFact = 10.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 10.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM && this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  	presFact = 100.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 100.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE && this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  	presFact = 500.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 500.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		presFact = 5.0;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		presFact = 5.0;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		presFact = 5.0;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_ICE)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  		presFact = 5.0;  	if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  		presFact = 5.0;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA)  	presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE)  	presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN)  	presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN)  	presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: presFact = 5.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN) || (this.SatelliteType == Satellite.SUBTYPE_ROCK && this.SatelliteSize == Satellite.SIZE_SMALL)) {  	this.atmPres = .01;  	this.atmMass = .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN) || (this.SatelliteType == Satellite.SUBTYPE_ROCK && this.SatelliteSize == Satellite.SIZE_SMALL)) {  	this.atmPres = .01;  	this.atmMass = .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: this.atmPres = .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,calcAtmPres,The following statement contains a magic number: this.atmMass = .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: do {  	switch (ourBag.gurpsRoll ()) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.axialTilt = ourBag.rng (2' 6' -2);  		break;  	case 7:  	case 8:  	case 9:  		this.axialTilt = 10 + ourBag.rng (2' 6' -2);  		break;  	case 10:  	case 11:  	case 12:  		this.axialTilt = 20 + ourBag.rng (2' 6' -2);  		break;  	case 13:  	case 14:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 15:  	case 16:  		this.axialTilt = 30 + ourBag.rng (2' 6' -2);  		break;  	case 17:  	case 18:  		switch (ourBag.rng (1' 6' 0)) {  		case 1:  		case 2:  			this.axialTilt = 50 + ourBag.rng (2' 6' -2);  			break;  		case 3:  		case 4:  			this.axialTilt = 60 + ourBag.rng (2' 6' -2);  			break;  		case 5:  			this.axialTilt = 70 + ourBag.rng (2' 6' -2);  			break;  		case 6:  			this.axialTilt = 80 + ourBag.rng (2' 6' -2);  			break;  		}  		break;  	}  }  while (OptionCont.rerollAxialTiltOver45 && this.axialTilt > 45);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 10 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 10 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 10 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 10 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 20 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 20 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 20 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 20 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 30 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 50 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 50 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 50 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 50 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 60 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 60 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 60 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 60 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 70 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 70 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 70 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 70 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 80 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 80 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 80 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following statement contains a magic number: this.axialTilt = 80 + ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT) {  	if (roll == 3)  		this.RVM = -5;  	if (roll == 4)  		this.RVM = -4;  	if (roll == 5)  		this.RVM = -3;  	if (roll == 6 || roll == 7)  		this.RVM = -2;  	if (roll == 8 || roll == 9)  		this.RVM = -1;  	if (roll == 10 || roll == 11)  		this.RVM = 0;  	if (roll == 12 || roll == 13)  		this.RVM = 1;  	if (roll == 14 || roll == 15)  		this.RVM = 2;  	if (roll == 16)  		this.RVM = 3;  	if (roll == 17)  		this.RVM = 4;  	if (roll == 18)  		this.RVM = 5;  }  else {  	if (roll <= 2)  		this.RVM = -3;  	if (roll == 3 || roll == 4)  		this.RVM = -2;  	if (roll >= 5 && roll <= 7)  		this.RVM = -1;  	if (roll >= 8 && roll <= 13)  		this.RVM = 0;  	if (roll >= 14 && roll <= 16)  		this.RVM = 1;  	if (roll >= 17 && roll <= 18)  		this.RVM = 2;  	if (roll >= 19)  		this.RVM = 3;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 3)  	this.RVM = -5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 3)  	this.RVM = -5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = -5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 4)  	this.RVM = -4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 4)  	this.RVM = -4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = -4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 5)  	this.RVM = -3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 5)  	this.RVM = -3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = -3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 6 || roll == 7)  	this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 6 || roll == 7)  	this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 6 || roll == 7)  	this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 8 || roll == 9)  	this.RVM = -1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 8 || roll == 9)  	this.RVM = -1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 10 || roll == 11)  	this.RVM = 0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 10 || roll == 11)  	this.RVM = 0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 12 || roll == 13)  	this.RVM = 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 12 || roll == 13)  	this.RVM = 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 14 || roll == 15)  	this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 14 || roll == 15)  	this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 14 || roll == 15)  	this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 16)  	this.RVM = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 16)  	this.RVM = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 17)  	this.RVM = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 17)  	this.RVM = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 18)  	this.RVM = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 18)  	this.RVM = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll <= 2)  	this.RVM = -3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll <= 2)  	this.RVM = -3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = -3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 3 || roll == 4)  	this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 3 || roll == 4)  	this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll == 3 || roll == 4)  	this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = -2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 5 && roll <= 7)  	this.RVM = -1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 5 && roll <= 7)  	this.RVM = -1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 8 && roll <= 13)  	this.RVM = 0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 8 && roll <= 13)  	this.RVM = 0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 14 && roll <= 16)  	this.RVM = 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 14 && roll <= 16)  	this.RVM = 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 17 && roll <= 18)  	this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 17 && roll <= 18)  	this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 17 && roll <= 18)  	this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 19)  	this.RVM = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: if (roll >= 19)  	this.RVM = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,populateRVM,The following statement contains a magic number: this.RVM = 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = 0.01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if ((this.SatelliteType == Satellite.SUBTYPE_ICE)) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 15)  			this.atmCate.Add (ATM_TOXIC_HIGHLY);  		else  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	else  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	else  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	else  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	else  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	else  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	else  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll >= 15)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  else  	this.atmCate.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE)  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll >= 13)  	this.atmCate.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA || this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_LETHALLY);  	this.atmCate.Add (ATM_COND_CORROSIVE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA || this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_LETHALLY);  	this.atmCate.Add (ATM_COND_CORROSIVE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA || this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_LETHALLY);  	this.atmCate.Add (ATM_COND_CORROSIVE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA || this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_LETHALLY);  	this.atmCate.Add (ATM_COND_CORROSIVE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA || this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_LETHALLY);  	this.atmCate.Add (ATM_COND_CORROSIVE);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (3' 6' 0);  		if (roll >= 13)  			this.atmCate.Add (ATM_TOXIC_MILDLY);  	}  	else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		this.atmCate.Add (ATM_COND_SUFFOCATING);  		this.atmCate.Add (ATM_TOXIC_HIGHLY);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 13)  		this.atmCate.Add (ATM_TOXIC_MILDLY);  }  else if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	this.atmCate.Add (ATM_COND_SUFFOCATING);  	this.atmCate.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll >= 13)  	this.atmCate.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 12 && !OptionCont.noMarginalAtm) {  		//add marginal code here  		foreach (int i in genMarginal (ourBag))  			this.atmCate.Add (i);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.atmMass = (ourBag.rng (3' 6' 0) / 10.0) + (ourBag.rng (1' 6' -1) / 100.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll >= 12 && !OptionCont.noMarginalAtm) {  	//add marginal code here  	foreach (int i in genMarginal (ourBag))  		this.atmCate.Add (i);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE) {  	if (this.SatelliteSize == Satellite.SIZE_SMALL) {  		roll = ourBag.rng (1' 6' 2);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (2' 6' -2);  		if (roll < 0)  			roll = 0;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (1' 6' 2);  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (1' 6' 2);  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL) {  	roll = ourBag.rng (1' 6' 2);  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 6' 2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 6' 2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = roll * .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (2' 6' -2);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (2' 6' -2);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (2' 6' -2);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (2' 6' -2);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = roll * .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA) {  	roll = ourBag.rng (2' 6' 0);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA) {  	roll = ourBag.rng (2' 6' 0);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA) {  	roll = ourBag.rng (2' 6' 0);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA) {  	roll = ourBag.rng (2' 6' 0);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA) {  	roll = ourBag.rng (2' 6' 0);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll > 10)  	roll = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll > 10)  	roll = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = roll * .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		roll = ourBag.rng (1' 6' 4);  		this.hydCoverage = roll * .1;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		roll = ourBag.rng (1' 6' 6);  		if (roll > 10)  			roll = 10;  		this.hydCoverage = roll * .1;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (1' 6' 4);  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (1' 6' 4);  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	roll = ourBag.rng (1' 6' 4);  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 6' 4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 6' 4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = roll * .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (1' 6' 6);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (1' 6' 6);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (1' 6' 6);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (1' 6' 6);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	roll = ourBag.rng (1' 6' 6);  	if (roll > 10)  		roll = 10;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 6' 6);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 6' 6);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll > 10)  	roll = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (roll > 10)  	roll = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = roll * .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	roll = ourBag.rng (2' 6' -7);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	roll = ourBag.rng (2' 6' -7);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	roll = ourBag.rng (2' 6' -7);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	roll = ourBag.rng (2' 6' -7);  	if (roll < 0)  		roll = 0;  	this.hydCoverage = roll * .1;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' -7);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' -7);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (2' 6' -7);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = roll * .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.hydCoverage >= .1) {  	roll = ourBag.rng (1' 10' -5);  	this.hydCoverage = this.hydCoverage + (roll * .01);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.hydCoverage >= .1) {  	roll = ourBag.rng (1' 10' -5);  	this.hydCoverage = this.hydCoverage + (roll * .01);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.hydCoverage >= .1) {  	roll = ourBag.rng (1' 10' -5);  	this.hydCoverage = this.hydCoverage + (roll * .01);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: if (this.hydCoverage >= .1) {  	roll = ourBag.rng (1' 10' -5);  	this.hydCoverage = this.hydCoverage + (roll * .01);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 10' -5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: roll = ourBag.rng (1' 10' -5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,setClimateData,The following statement contains a magic number: this.hydCoverage = this.hydCoverage + (roll * .01);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_SMALL) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .10;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .20;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .20;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE && (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE)) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .20;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .20;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  	if (this.hydCoverage > .90) {  		absorptionFactor = getAbsorptionFactor (modifiers);  		greenHouseFactor = .16;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage <= .20) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage <= .20) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .16;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .20 && this.hydCoverage <= .50) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .16;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .50 && this.hydCoverage <= .90) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .16;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .90) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.hydCoverage > .90) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = .16;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = .16;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE) {  	absorptionFactor = getAbsorptionFactor (modifiers);  	greenHouseFactor = 2.0;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,detSurfaceTemp,The following statement contains a magic number: greenHouseFactor = 2.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_ASTEROIDBELT)  	absorptionFactor = .97;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .97;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_TINY)  	absorptionFactor = .86;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .86;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ROCK && this.SatelliteSize == Satellite.SIZE_TINY)  	absorptionFactor = .97;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .97;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_SULFUR && this.SatelliteSize == Satellite.SIZE_TINY)  	absorptionFactor = .77;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .77;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_HADEAN && this.SatelliteSize == Satellite.SIZE_SMALL)  	absorptionFactor = .67;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .67;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE && this.SatelliteSize == Satellite.SIZE_SMALL)  	absorptionFactor = .93;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .93;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ROCK && this.SatelliteSize == Satellite.SIZE_SMALL)  	absorptionFactor = .96;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .96;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_HADEAN && this.SatelliteSize == Satellite.SIZE_MEDIUM)  	absorptionFactor = .67;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .67;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_AMMONIA)  	absorptionFactor = .84;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .84;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_ICE && (this.SatelliteSize == Satellite.SIZE_MEDIUM || this.SatelliteSize == Satellite.SIZE_LARGE))  	absorptionFactor = .86;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .86;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_OCEAN || this.SatelliteType == Satellite.SUBTYPE_GARDEN) {  	if (this.hydCoverage <= .20)  		absorptionFactor = .95;  	if (this.hydCoverage > .20 && this.hydCoverage <= .50)  		absorptionFactor = .92;  	if (this.hydCoverage > .50 && this.hydCoverage <= .90)  		absorptionFactor = .88;  	if (this.hydCoverage > .90)  		absorptionFactor = .84;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage <= .20)  	absorptionFactor = .95;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage <= .20)  	absorptionFactor = .95;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .95;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .20 && this.hydCoverage <= .50)  	absorptionFactor = .92;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .20 && this.hydCoverage <= .50)  	absorptionFactor = .92;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .20 && this.hydCoverage <= .50)  	absorptionFactor = .92;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .92;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .50 && this.hydCoverage <= .90)  	absorptionFactor = .88;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .50 && this.hydCoverage <= .90)  	absorptionFactor = .88;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .50 && this.hydCoverage <= .90)  	absorptionFactor = .88;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .88;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .90)  	absorptionFactor = .84;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.hydCoverage > .90)  	absorptionFactor = .84;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .84;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_GREENHOUSE)  	absorptionFactor = .77;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .77;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: if (this.SatelliteType == Satellite.SUBTYPE_CHTHONIAN)  	absorptionFactor = .97;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAbsorptionFactor,The following statement contains a magic number: absorptionFactor = .97;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	roll = ourBag.rng (3' 6' 0);  	//for the difference  	if (roll >= 16)  		ret.Add (ATM_MARG_FLOURINE);  	else  		ret.Add (ATM_MARG_CHLORINE);  	//always true  	ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	roll = ourBag.rng (3' 6' 0);  	//for the difference  	if (roll >= 16)  		ret.Add (ATM_MARG_FLOURINE);  	else  		ret.Add (ATM_MARG_CHLORINE);  	//always true  	ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	roll = ourBag.rng (3' 6' 0);  	//for the difference  	if (roll >= 16)  		ret.Add (ATM_MARG_FLOURINE);  	else  		ret.Add (ATM_MARG_CHLORINE);  	//always true  	ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	roll = ourBag.rng (3' 6' 0);  	//for the difference  	if (roll >= 16)  		ret.Add (ATM_MARG_FLOURINE);  	else  		ret.Add (ATM_MARG_CHLORINE);  	//always true  	ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 3 || roll == 4) {  	roll = ourBag.rng (3' 6' 0);  	//for the difference  	if (roll >= 16)  		ret.Add (ATM_MARG_FLOURINE);  	else  		ret.Add (ATM_MARG_CHLORINE);  	//always true  	ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 16)  	ret.Add (ATM_MARG_FLOURINE);  else  	ret.Add (ATM_MARG_CHLORINE);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ret.Add (ATM_MARG_SULFUR);  	ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 5 || roll == 6) {  	ret.Add (ATM_MARG_SULFUR);  	ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 7) {  	ret.Add (ATM_MARG_NITROGEN);  	ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 8 || roll == 9) {  	ret.Add (ATM_MARG_ORGANIC);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  	else if (roll >= 12 && roll <= 16)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  else if (roll >= 12 && roll <= 16)  	ret.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  else if (roll >= 12 && roll <= 16)  	ret.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  else if (roll >= 12 && roll <= 16)  	ret.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 12 && roll <= 16)  	ret.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 12 && roll <= 16)  	ret.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 10 || roll == 11) {  	ret.Add (ATM_MARG_LOWOXY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 10 || roll == 11) {  	ret.Add (ATM_MARG_LOWOXY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 12 || roll == 13) {  	ret.Add (ATM_MARG_POLLUTANTS);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 9 && roll <= 11)  		ret.Add (ATM_TOXIC_MILDLY);  	else if (roll >= 17)  		ret.Add (ATM_TOXIC_HIGHLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 9 && roll <= 11)  	ret.Add (ATM_TOXIC_MILDLY);  else if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 9 && roll <= 11)  	ret.Add (ATM_TOXIC_MILDLY);  else if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 9 && roll <= 11)  	ret.Add (ATM_TOXIC_MILDLY);  else if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 17)  	ret.Add (ATM_TOXIC_HIGHLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 14) {  	ret.Add (ATM_MARG_HIGHCO2);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 14) {  	ret.Add (ATM_MARG_HIGHCO2);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 14) {  	ret.Add (ATM_MARG_HIGHCO2);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 14) {  	ret.Add (ATM_MARG_HIGHCO2);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15)  		ret.Add (ATM_TOXIC_MILDLY);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 15)  	ret.Add (ATM_TOXIC_MILDLY);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ret.Add (ATM_MARG_HIGHOXY);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15) {  		ret.Add (ATM_TOXIC_MILDLY);  		ret.Add (ATM_COND_FLAMP1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ret.Add (ATM_MARG_HIGHOXY);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15) {  		ret.Add (ATM_TOXIC_MILDLY);  		ret.Add (ATM_COND_FLAMP1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ret.Add (ATM_MARG_HIGHOXY);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15) {  		ret.Add (ATM_TOXIC_MILDLY);  		ret.Add (ATM_COND_FLAMP1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ret.Add (ATM_MARG_HIGHOXY);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15) {  		ret.Add (ATM_TOXIC_MILDLY);  		ret.Add (ATM_COND_FLAMP1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 15 || roll == 16) {  	ret.Add (ATM_MARG_HIGHOXY);  	roll = ourBag.rng (3' 6' 0);  	if (roll >= 15) {  		ret.Add (ATM_TOXIC_MILDLY);  		ret.Add (ATM_COND_FLAMP1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll >= 15) {  	ret.Add (ATM_TOXIC_MILDLY);  	ret.Add (ATM_COND_FLAMP1);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ret.Add (ATM_MARG_INERT);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genMarginal,The following statement contains a magic number: if (roll == 17 || roll == 18) {  	ret.Add (ATM_MARG_INERT);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_GASGIANT) {  	this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_GASGIANT) {  	this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_GASGIANT) {  	this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: this.orbitalPeriod = (Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / ((this.mass * .0000030024584) + parentMass)) * 365.25);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_MOON) {  	this.orbitalPeriod = .166 * Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / (this.mass + parentMass));  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_MOON) {  	this.orbitalPeriod = .166 * Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / (this.mass + parentMass));  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: this.orbitalPeriod = .166 * Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / (this.mass + parentMass));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalPeriod,The following statement contains a magic number: this.orbitalPeriod = .166 * Math.Sqrt (Math.Pow (this.orbitalRadius' 3) / (this.mass + parentMass));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 3900)  	factor = .7;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 3900)  	factor = .7;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: factor = .7;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 2500 && parentMass < 3900)  	factor = .6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 2500 && parentMass < 3900)  	factor = .6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 2500 && parentMass < 3900)  	factor = .6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: factor = .6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 1000 && parentMass < 2500)  	factor = .5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 1000 && parentMass < 2500)  	factor = .5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 1000 && parentMass < 2500)  	factor = .5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: factor = .5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 300 && parentMass < 1000)  	factor = .4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 300 && parentMass < 1000)  	factor = .4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass > 300 && parentMass < 1000)  	factor = .4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: factor = .4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass < 300)  	factor = .3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: if (parentMass < 300)  	factor = .3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: factor = .3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getDifferentationFactor,The following statement contains a magic number: value = (1 / Math.Sqrt (this.moonRadius * factor) * 100);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (this.atmPres < 0.01)  	return ATM_PRES_NONE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (this.atmPres == 0.01)  	return ATM_PRES_TRACE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (0.01 < this.atmPres && this.atmPres <= 0.5)  	return ATM_PRES_VERYTHIN;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (0.01 < this.atmPres && this.atmPres <= 0.5)  	return ATM_PRES_VERYTHIN;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (0.5 < this.atmPres && this.atmPres <= 0.8)  	return ATM_PRES_THIN;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (0.5 < this.atmPres && this.atmPres <= 0.8)  	return ATM_PRES_THIN;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (0.8 < this.atmPres && this.atmPres <= 1.2)  	return ATM_PRES_STANDARD;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (0.8 < this.atmPres && this.atmPres <= 1.2)  	return ATM_PRES_STANDARD;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (1.2 < this.atmPres && this.atmPres <= 1.5)  	return ATM_PRES_DENSE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (1.2 < this.atmPres && this.atmPres <= 1.5)  	return ATM_PRES_DENSE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (1.5 < this.atmPres && this.atmPres <= 10)  	return ATM_PRES_VERYDENSE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (1.5 < this.atmPres && this.atmPres <= 10)  	return ATM_PRES_VERYDENSE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getAtmCategory,The following statement contains a magic number: if (this.atmPres > 10)  	return ATM_PRES_SUPERDENSE;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,diameterInKM,The following statement contains a magic number: return this.diameter * 12756;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (this.atmMass <= 0.01)  	return CLIMATE_NONE;  else {  	if (temp <= 244.50)  		return CLIMATE_FROZEN;  	if (temp > 244.50 && temp <= 255.50)  		return CLIMATE_VERYCOLD;  	if (temp > 255.50 && temp <= 266.50)  		return CLIMATE_COLD;  	if (temp > 266.50 && temp <= 278.50)  		return CLIMATE_CHILLY;  	if (temp > 278.50 && temp <= 289.50)  		return CLIMATE_COOL;  	if (temp > 289.50 && temp <= 300.50)  		return CLIMATE_NORMAL;  	if (temp > 300.50 && temp <= 311.50)  		return CLIMATE_WARM;  	if (temp > 311.50 && temp <= 322.50)  		return CLIMATE_TROPICAL;  	if (temp > 322.50 && temp <= 333.50)  		return CLIMATE_HOT;  	if (temp > 333.50 && temp <= 344.50)  		return CLIMATE_VERYHOT;  	if (temp > 344.50)  		return CLIMATE_INFERNAL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp <= 244.50)  	return CLIMATE_FROZEN;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 244.50 && temp <= 255.50)  	return CLIMATE_VERYCOLD;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 244.50 && temp <= 255.50)  	return CLIMATE_VERYCOLD;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 255.50 && temp <= 266.50)  	return CLIMATE_COLD;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 255.50 && temp <= 266.50)  	return CLIMATE_COLD;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 266.50 && temp <= 278.50)  	return CLIMATE_CHILLY;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 266.50 && temp <= 278.50)  	return CLIMATE_CHILLY;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 278.50 && temp <= 289.50)  	return CLIMATE_COOL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 278.50 && temp <= 289.50)  	return CLIMATE_COOL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 289.50 && temp <= 300.50)  	return CLIMATE_NORMAL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 289.50 && temp <= 300.50)  	return CLIMATE_NORMAL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 300.50 && temp <= 311.50)  	return CLIMATE_WARM;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 300.50 && temp <= 311.50)  	return CLIMATE_WARM;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 311.50 && temp <= 322.50)  	return CLIMATE_TROPICAL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 311.50 && temp <= 322.50)  	return CLIMATE_TROPICAL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 322.50 && temp <= 333.50)  	return CLIMATE_HOT;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 322.50 && temp <= 333.50)  	return CLIMATE_HOT;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 333.50 && temp <= 344.50)  	return CLIMATE_VERYHOT;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 333.50 && temp <= 344.50)  	return CLIMATE_VERYHOT;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getClimate,The following statement contains a magic number: if (temp > 344.50)  	return CLIMATE_INFERNAL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (this.selfID == 0 && this.baseType == Satellite.BASETYPE_GASGIANT && flag == Star.GASGIANT_EPISTELLAR)  	roll = roll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: roll = roll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT && flag == Star.GASGIANT_ECCENTRIC && this.orbitalRadius < snowLine)  	roll = roll + 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: roll = roll + 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (flag == Star.GASGIANT_CONVENTIONAL)  	roll = roll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: roll = roll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 3)  	this.orbitalEccent = .0;  else if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 4 && roll <= 6)  	this.orbitalEccent = .05;  else if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .05;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 7 && roll <= 9)  	this.orbitalEccent = .1;  else if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 10 && roll <= 11)  	this.orbitalEccent = .15;  else if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .15;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 12)  	this.orbitalEccent = .2;  else if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 13)  	this.orbitalEccent = .3;  else if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 14)  	this.orbitalEccent = .4;  else if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 15)  	this.orbitalEccent = .5;  else if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 16)  	this.orbitalEccent = .6;  else if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll == 17)  	this.orbitalEccent = .7;  else if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .7;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 18)  	this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: this.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll <= 11 && roll != 3) {  	mod = ourDice.rng (1' 5' -2) * .01;  }  else if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: mod = ourDice.rng (1' 5' -2) * .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: mod = ourDice.rng (1' 5' -2) * .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: mod = ourDice.rng (1' 5' -2) * .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: if (roll >= 12) {  	mod = ourDice.rng (1' 10' -5) * .01;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: mod = ourDice.rng (1' 10' -5) * .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: mod = ourDice.rng (1' 10' -5) * .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,getPlanetEccentricity,The following statement contains a magic number: mod = ourDice.rng (1' 10' -5) * .01;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.tideTotal < 50) {  	int roll = ourBag.gurpsRoll ();  	int temp = (int)Math.Floor (roll + this.tideTotal);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		temp = temp + 18;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		temp = temp + 14;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  		temp = temp + 10;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		temp = temp + 6;  	if ((roll >= 16) || (temp >= 36)) {  		switch (ourBag.rng (2' 6' 0)) {  		case 3:  		case 4:  		case 5:  		case 6:  			this.siderealPeriod = (temp / 24.0);  			break;  		case 7:  			this.siderealPeriod = (ourBag.rng (1' 6) * 2);  			break;  		case 8:  			this.siderealPeriod = (ourBag.rng (1' 6) * 5);  			break;  		case 9:  			this.siderealPeriod = (ourBag.rng (1' 6) * 10);  			break;  		case 10:  			this.siderealPeriod = (ourBag.rng (1' 6) * 20);  			break;  		case 11:  			this.siderealPeriod = (ourBag.rng (1' 6) * 50);  			break;  		case 12:  			this.siderealPeriod = (ourBag.rng (1' 6) * 100);  			break;  		}  	}  	else if (!this.isTideLocked)  		this.siderealPeriod = (double)(temp / 24.0);  	if (this.isTideLocked)  		this.siderealPeriod = this.orbitalPeriod;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY)  	temp = temp + 18;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: temp = temp + 18;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_SMALL)  	temp = temp + 14;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: temp = temp + 14;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM)  	temp = temp + 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: temp = temp + 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE)  	temp = temp + 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: temp = temp + 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if ((roll >= 16) || (temp >= 36)) {  	switch (ourBag.rng (2' 6' 0)) {  	case 3:  	case 4:  	case 5:  	case 6:  		this.siderealPeriod = (temp / 24.0);  		break;  	case 7:  		this.siderealPeriod = (ourBag.rng (1' 6) * 2);  		break;  	case 8:  		this.siderealPeriod = (ourBag.rng (1' 6) * 5);  		break;  	case 9:  		this.siderealPeriod = (ourBag.rng (1' 6) * 10);  		break;  	case 10:  		this.siderealPeriod = (ourBag.rng (1' 6) * 20);  		break;  	case 11:  		this.siderealPeriod = (ourBag.rng (1' 6) * 50);  		break;  	case 12:  		this.siderealPeriod = (ourBag.rng (1' 6) * 100);  		break;  	}  }  else if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 5);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 10);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 10);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 20);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 20);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 50);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 50);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 100);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (ourBag.rng (1' 6) * 100);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: if (!this.isTideLocked)  	this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following statement contains a magic number: this.siderealPeriod = (double)(temp / 24.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genGenericName,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_GASGIANT) {  	if (this.parentID >= 9000 && this.parentID <= 9050)  		this.name = parentName + (this.selfID + 1);  	else {  		if (this.parentID == Satellite.ORBIT_PRISEC)  			this.name = systemName + "-AB" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_PRISECTRI)  			this.name = systemName + "-ABC" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_PRITRI)  			this.name = systemName + "-AC" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_SECCOM)  			this.name = systemName + "-BD" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_SECTRI)  			this.name = systemName + "-BC" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_TRICOM)  			this.name = systemName + "-CE" + (this.selfID + 1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genGenericName,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_TERRESTIAL || this.baseType == Satellite.BASETYPE_GASGIANT) {  	if (this.parentID >= 9000 && this.parentID <= 9050)  		this.name = parentName + (this.selfID + 1);  	else {  		if (this.parentID == Satellite.ORBIT_PRISEC)  			this.name = systemName + "-AB" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_PRISECTRI)  			this.name = systemName + "-ABC" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_PRITRI)  			this.name = systemName + "-AC" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_SECCOM)  			this.name = systemName + "-BD" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_SECTRI)  			this.name = systemName + "-BC" + (this.selfID + 1);  		if (this.parentID == Satellite.ORBIT_TRICOM)  			this.name = systemName + "-CE" + (this.selfID + 1);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genGenericName,The following statement contains a magic number: if (this.parentID >= 9000 && this.parentID <= 9050)  	this.name = parentName + (this.selfID + 1);  else {  	if (this.parentID == Satellite.ORBIT_PRISEC)  		this.name = systemName + "-AB" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_PRISECTRI)  		this.name = systemName + "-ABC" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_PRITRI)  		this.name = systemName + "-AC" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_SECCOM)  		this.name = systemName + "-BD" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_SECTRI)  		this.name = systemName + "-BC" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_TRICOM)  		this.name = systemName + "-CE" + (this.selfID + 1);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,genGenericName,The following statement contains a magic number: if (this.parentID >= 9000 && this.parentID <= 9050)  	this.name = parentName + (this.selfID + 1);  else {  	if (this.parentID == Satellite.ORBIT_PRISEC)  		this.name = systemName + "-AB" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_PRISECTRI)  		this.name = systemName + "-ABC" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_PRITRI)  		this.name = systemName + "-AC" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_SECCOM)  		this.name = systemName + "-BD" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_SECTRI)  		this.name = systemName + "-BC" + (this.selfID + 1);  	if (this.parentID == Satellite.ORBIT_TRICOM)  		this.name = systemName + "-CE" + (this.selfID + 1);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == BASETYPE_TERRESTIAL) {  	//moonlets  	numRoll = ourBag.rng (1' 6' -2);  	//modifiers for moonlets  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll - 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll + 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  		numRoll = numRoll - 3;  	if (this.orbitalRadius <= .5)  		numRoll = 0;  	//set to 0' since we cannot have any in this range  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 6' 4);  				currOrbit = (roll / 4.0);  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' -4);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		numRoll = numRoll - 2;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		numRoll = numRoll + 1;  	if (this.SatelliteSize == Satellite.SIZE_LARGE)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  		numRoll = numRoll - 1;  	if (this.orbitalRadius <= .75)  		numRoll = 0;  	if (OptionCont.getNumberOfMoonsOverGarden () != -1 && this.SatelliteType == SUBTYPE_GARDEN)  		numRoll = OptionCont.getNumberOfMoonsOverGarden ();  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.rng (3' 6' 0);  			if (this.SatelliteSize == Satellite.SIZE_TINY)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_SMALL)  				size = Satellite.SIZE_TINY;  			if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  				if (roll >= 10)  					size = Satellite.SIZE_SMALL;  				else  					size = Satellite.SIZE_TINY;  			}  			if (this.SatelliteSize == Satellite.SIZE_LARGE) {  				if (roll >= 15)  					size = Satellite.SIZE_MEDIUM;  				if (roll >= 12 && roll <= 14)  					size = Satellite.SIZE_SMALL;  				size = Satellite.SIZE_TINY;  			}  			do {  				mods = 0;  				if (this.SatelliteType - size == 2)  					mods = 2;  				if (this.SatelliteType - size == 1)  					mods = 4;  				if (flag == OptionCont.MOON_BOOK)  					roll = ourBag.rng (2' 6' mods);  				if (flag == OptionCont.MOON_BOOKHIGH)  					roll = ourBag.rng (1' 6' mods + 6);  				if (flag == OptionCont.MOON_EXPAND)  					roll = ourBag.rng (2' 10' mods);  				if (flag == OptionCont.MOON_EXPANDHIGH)  					roll = ourBag.rng (2' 6' mods + 12);  				currOrbit = roll * 2.5;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (1' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (1' 6' -2);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY)  	numRoll = numRoll - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .75 && .5 < this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = 0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		do {  			roll = ourBag.rng (1' 6' 4);  			currOrbit = (roll / 4.0);  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  		occupiedOrbits.Add (currOrbit);  		this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  		this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		do {  			roll = ourBag.rng (1' 6' 4);  			currOrbit = (roll / 4.0);  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  		occupiedOrbits.Add (currOrbit);  		this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  		this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		do {  			roll = ourBag.rng (1' 6' 4);  			currOrbit = (roll / 4.0);  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  		occupiedOrbits.Add (currOrbit);  		this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  		this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	do {  		roll = ourBag.rng (1' 6' 4);  		currOrbit = (roll / 4.0);  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  	occupiedOrbits.Add (currOrbit);  	this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  	this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	do {  		roll = ourBag.rng (1' 6' 4);  		currOrbit = (roll / 4.0);  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  	occupiedOrbits.Add (currOrbit);  	this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  	this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	do {  		roll = ourBag.rng (1' 6' 4);  		currOrbit = (roll / 4.0);  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  	occupiedOrbits.Add (currOrbit);  	this.innerMoonlets.Add (new Moonlet (this.selfID' i' currOrbit' moonletNames [currMoonlet]));  	this.innerMoonlets [i].orbitalRadius = this.innerMoonlets [i].planetRadius * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (1' 6' 4);  	currOrbit = (roll / 4.0);  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (1' 6' 4);  	currOrbit = (roll / 4.0);  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (1' 6' 4);  	currOrbit = (roll / 4.0);  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (1' 6' 4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (1' 6' 4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: currOrbit = (roll / 4.0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (1' 6' -4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (1' 6' -4);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_TINY)  	numRoll = numRoll - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= 1.5 && .75 < this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .75)  	numRoll = 0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.rng (3' 6' 0);  		if (this.SatelliteSize == Satellite.SIZE_TINY)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_SMALL)  			size = Satellite.SIZE_TINY;  		if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  			if (roll >= 10)  				size = Satellite.SIZE_SMALL;  			else  				size = Satellite.SIZE_TINY;  		}  		if (this.SatelliteSize == Satellite.SIZE_LARGE) {  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			size = Satellite.SIZE_TINY;  		}  		do {  			mods = 0;  			if (this.SatelliteType - size == 2)  				mods = 2;  			if (this.SatelliteType - size == 1)  				mods = 4;  			if (flag == OptionCont.MOON_BOOK)  				roll = ourBag.rng (2' 6' mods);  			if (flag == OptionCont.MOON_BOOKHIGH)  				roll = ourBag.rng (1' 6' mods + 6);  			if (flag == OptionCont.MOON_EXPAND)  				roll = ourBag.rng (2' 10' mods);  			if (flag == OptionCont.MOON_EXPANDHIGH)  				roll = ourBag.rng (2' 6' mods + 12);  			currOrbit = roll * 2.5;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.rng (3' 6' 0);  	if (this.SatelliteSize == Satellite.SIZE_TINY)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_SMALL)  		size = Satellite.SIZE_TINY;  	if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  		if (roll >= 10)  			size = Satellite.SIZE_SMALL;  		else  			size = Satellite.SIZE_TINY;  	}  	if (this.SatelliteSize == Satellite.SIZE_LARGE) {  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		size = Satellite.SIZE_TINY;  	}  	do {  		mods = 0;  		if (this.SatelliteType - size == 2)  			mods = 2;  		if (this.SatelliteType - size == 1)  			mods = 4;  		if (flag == OptionCont.MOON_BOOK)  			roll = ourBag.rng (2' 6' mods);  		if (flag == OptionCont.MOON_BOOKHIGH)  			roll = ourBag.rng (1' 6' mods + 6);  		if (flag == OptionCont.MOON_EXPAND)  			roll = ourBag.rng (2' 10' mods);  		if (flag == OptionCont.MOON_EXPANDHIGH)  			roll = ourBag.rng (2' 6' mods + 12);  		currOrbit = roll * 2.5;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (3' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_MEDIUM) {  	if (roll >= 10)  		size = Satellite.SIZE_SMALL;  	else  		size = Satellite.SIZE_TINY;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 10)  	size = Satellite.SIZE_SMALL;  else  	size = Satellite.SIZE_TINY;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	size = Satellite.SIZE_TINY;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	size = Satellite.SIZE_TINY;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteSize == Satellite.SIZE_LARGE) {  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	size = Satellite.SIZE_TINY;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 15)  	size = Satellite.SIZE_MEDIUM;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	size = Satellite.SIZE_SMALL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	size = Satellite.SIZE_SMALL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	mods = 0;  	if (this.SatelliteType - size == 2)  		mods = 2;  	if (this.SatelliteType - size == 1)  		mods = 4;  	if (flag == OptionCont.MOON_BOOK)  		roll = ourBag.rng (2' 6' mods);  	if (flag == OptionCont.MOON_BOOKHIGH)  		roll = ourBag.rng (1' 6' mods + 6);  	if (flag == OptionCont.MOON_EXPAND)  		roll = ourBag.rng (2' 10' mods);  	if (flag == OptionCont.MOON_EXPANDHIGH)  		roll = ourBag.rng (2' 6' mods + 12);  	currOrbit = roll * 2.5;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 5.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteType - size == 2)  	mods = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteType - size == 2)  	mods = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: mods = 2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.SatelliteType - size == 1)  	mods = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: mods = 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_BOOK)  	roll = ourBag.rng (2' 6' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_BOOK)  	roll = ourBag.rng (2' 6' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 6' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 6' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_BOOKHIGH)  	roll = ourBag.rng (1' 6' mods + 6);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_BOOKHIGH)  	roll = ourBag.rng (1' 6' mods + 6);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (1' 6' mods + 6);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (1' 6' mods + 6);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_EXPAND)  	roll = ourBag.rng (2' 10' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_EXPAND)  	roll = ourBag.rng (2' 10' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 10' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 10' mods);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_EXPANDHIGH)  	roll = ourBag.rng (2' 6' mods + 12);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_EXPANDHIGH)  	roll = ourBag.rng (2' 6' mods + 12);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (flag == OptionCont.MOON_EXPANDHIGH)  	roll = ourBag.rng (2' 6' mods + 12);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 6' mods + 12);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 6' mods + 12);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (2' 6' mods + 12);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: currOrbit = roll * 2.5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: this.majorMoons [i].parentDiam = this.diameter * 12756.2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	//moonlets (inner)  	numRoll = ourBag.rng (2' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 10;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 8;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 3;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			currOrbit = ourBag.rng (1' 6' 4) * .25;  			this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  			currMoonlet++;  		}  	}  	//major moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .1)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			int size = Satellite.SIZE_MEDIUM;  			roll = ourBag.gurpsRoll ();  			if (roll >= 15)  				size = Satellite.SIZE_MEDIUM;  			if (roll >= 12 && roll <= 14)  				size = Satellite.SIZE_SMALL;  			if (roll < 12)  				size = Satellite.SIZE_TINY;  			do {  				roll = ourBag.rng (3' 6' 3);  				if (roll >= 15)  					roll = roll + ourBag.rng (2' 6' 0);  				currOrbit = roll / 2.0;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  			occupiedOrbits.Add (currOrbit);  			this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  			this.majorMoons [i].updateSize (size);  			this.majorMoons [i].moonRadius = currOrbit;  			this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  			this.majorMoons [i].parentDiam = this.diameter * 12756.2;  		}  	}  	//Captured Moons  	numRoll = ourBag.rng (1' 6' 0);  	if (this.orbitalRadius <= .5)  		numRoll = numRoll - 6;  	else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  		numRoll = numRoll - 5;  	else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  		numRoll = numRoll - 4;  	else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  		numRoll = numRoll - 1;  	if (numRoll > 0) {  		for (int i = 0; i < numRoll; i++) {  			do {  				roll = ourBag.rng (1' 280' 20);  				currOrbit = roll;  			}  			while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  			occupiedOrbits.Add (currOrbit);  			this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  			this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  			currMoonlet++;  		}  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 10;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 10;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 8;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 8;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 3;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		currOrbit = ourBag.rng (1' 6' 4) * .25;  		this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  		this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		currOrbit = ourBag.rng (1' 6' 4) * .25;  		this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  		this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		currOrbit = ourBag.rng (1' 6' 4) * .25;  		this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  		this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	currOrbit = ourBag.rng (1' 6' 4) * .25;  	this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  	this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	currOrbit = ourBag.rng (1' 6' 4) * .25;  	this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  	this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	currOrbit = ourBag.rng (1' 6' 4) * .25;  	this.innerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  	this.innerMoonlets [i].orbitalRadius = currOrbit * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: currOrbit = ourBag.rng (1' 6' 4) * .25;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: currOrbit = ourBag.rng (1' 6' 4) * .25;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: currOrbit = ourBag.rng (1' 6' 4) * .25;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (1' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .1)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .1 && .5 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		int size = Satellite.SIZE_MEDIUM;  		roll = ourBag.gurpsRoll ();  		if (roll >= 15)  			size = Satellite.SIZE_MEDIUM;  		if (roll >= 12 && roll <= 14)  			size = Satellite.SIZE_SMALL;  		if (roll < 12)  			size = Satellite.SIZE_TINY;  		do {  			roll = ourBag.rng (3' 6' 3);  			if (roll >= 15)  				roll = roll + ourBag.rng (2' 6' 0);  			currOrbit = roll / 2.0;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  		occupiedOrbits.Add (currOrbit);  		this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  		this.majorMoons [i].updateSize (size);  		this.majorMoons [i].moonRadius = currOrbit;  		this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  		this.majorMoons [i].parentDiam = this.diameter * 12756.2;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	int size = Satellite.SIZE_MEDIUM;  	roll = ourBag.gurpsRoll ();  	if (roll >= 15)  		size = Satellite.SIZE_MEDIUM;  	if (roll >= 12 && roll <= 14)  		size = Satellite.SIZE_SMALL;  	if (roll < 12)  		size = Satellite.SIZE_TINY;  	do {  		roll = ourBag.rng (3' 6' 3);  		if (roll >= 15)  			roll = roll + ourBag.rng (2' 6' 0);  		currOrbit = roll / 2.0;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  	occupiedOrbits.Add (currOrbit);  	this.majorMoons.Add (new Satellite (Satellite.ORBIT_PLANET' i' (currOrbit * this.diameter)' i' Satellite.BASETYPE_MOON));  	this.majorMoons [i].updateSize (size);  	this.majorMoons [i].moonRadius = currOrbit;  	this.majorMoons [i].blackbodyTemp = this.blackbodyTemp;  	this.majorMoons [i].parentDiam = this.diameter * 12756.2;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 15)  	size = Satellite.SIZE_MEDIUM;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	size = Satellite.SIZE_SMALL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 12 && roll <= 14)  	size = Satellite.SIZE_SMALL;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll < 12)  	size = Satellite.SIZE_TINY;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (3' 6' 3);  	if (roll >= 15)  		roll = roll + ourBag.rng (2' 6' 0);  	currOrbit = roll / 2.0;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)) && !(withinOtherOrbits (occupiedOrbits' currOrbit' 1.0)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (3' 6' 3);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (3' 6' 3);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (3' 6' 3);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 15)  	roll = roll + ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 15)  	roll = roll + ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (roll >= 15)  	roll = roll + ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = roll + ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = roll + ourBag.rng (2' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: currOrbit = roll / 2.0;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: this.majorMoons [i].parentDiam = this.diameter * 12756.2;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = ourBag.rng (1' 6' 0);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius <= .5)  	numRoll = numRoll - 6;  else if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 6;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .5 && .75 >= this.orbitalRadius)  	numRoll = numRoll - 5;  else if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 5;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > .75 && 1.5 >= this.orbitalRadius)  	numRoll = numRoll - 4;  else if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: numRoll = numRoll - 4;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.orbitalRadius > 1.5 && 3 >= this.orbitalRadius)  	numRoll = numRoll - 1;  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		do {  			roll = ourBag.rng (1' 280' 20);  			currOrbit = roll;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  		occupiedOrbits.Add (currOrbit);  		this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  		this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (numRoll > 0) {  	for (int i = 0; i < numRoll; i++) {  		do {  			roll = ourBag.rng (1' 280' 20);  			currOrbit = roll;  		}  		while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  		occupiedOrbits.Add (currOrbit);  		this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  		this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  		currMoonlet++;  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	do {  		roll = ourBag.rng (1' 280' 20);  		currOrbit = roll;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  	occupiedOrbits.Add (currOrbit);  	this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  	this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: for (int i = 0; i < numRoll; i++) {  	do {  		roll = ourBag.rng (1' 280' 20);  		currOrbit = roll;  	}  	while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  	occupiedOrbits.Add (currOrbit);  	this.outerMoonlets.Add (new Moonlet (this.selfID' currMoonlet' currOrbit' moonletNames [currMoonlet]));  	this.outerMoonlets [i].orbitalRadius = currMoonlet * this.diameter;  	currMoonlet++;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (1' 280' 20);  	currOrbit = roll;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: do {  	roll = ourBag.rng (1' 280' 20);  	currOrbit = roll;  }  while ((scanOccupiedOrbits (occupiedOrbits' currOrbit)));  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (1' 280' 20);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: roll = ourBag.rng (1' 280' 20);  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	if (this.innerMoonlets.Count >= 10) {  		this.updateDescListing (Satellite.DESC_SPECRINGSYS);  	}  	if (this.innerMoonlets.Count >= 6 && this.innerMoonlets.Count < 9) {  		this.updateDescListing (Satellite.DESC_FAINTRINGSYS);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	if (this.innerMoonlets.Count >= 10) {  		this.updateDescListing (Satellite.DESC_SPECRINGSYS);  	}  	if (this.innerMoonlets.Count >= 6 && this.innerMoonlets.Count < 9) {  		this.updateDescListing (Satellite.DESC_FAINTRINGSYS);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.baseType == Satellite.BASETYPE_GASGIANT) {  	if (this.innerMoonlets.Count >= 10) {  		this.updateDescListing (Satellite.DESC_SPECRINGSYS);  	}  	if (this.innerMoonlets.Count >= 6 && this.innerMoonlets.Count < 9) {  		this.updateDescListing (Satellite.DESC_FAINTRINGSYS);  	}  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.innerMoonlets.Count >= 10) {  	this.updateDescListing (Satellite.DESC_SPECRINGSYS);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.innerMoonlets.Count >= 6 && this.innerMoonlets.Count < 9) {  	this.updateDescListing (Satellite.DESC_FAINTRINGSYS);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createMoons,The following statement contains a magic number: if (this.innerMoonlets.Count >= 6 && this.innerMoonlets.Count < 9) {  	this.updateDescListing (Satellite.DESC_FAINTRINGSYS);  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Diameter: " + Math.Round (this.diameter' 3) + " Earth diameters (" + (Math.Round (this.diameter * CONVFAC_DIAMETER' 3)) + " km)";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Diameter: " + Math.Round (this.diameter' 3) + " Earth diameters (" + (Math.Round (this.diameter * CONVFAC_DIAMETER' 3)) + " km)";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Mass: " + Math.Round (this.mass' 3) + " Earth masses";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Gravity: " + Math.Round (this.gravity' 3) + " Earth gravities (" + Math.Round (this.gravity * CONVFAC_GRAVITY' 3) + " m/s²)";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Gravity: " + Math.Round (this.gravity' 3) + " Earth gravities (" + Math.Round (this.gravity * CONVFAC_GRAVITY' 3) + " m/s²)";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Orbital Period: " + Math.Round (this.orbitalPeriod' 3) + "d (" + Math.Round (this.orbitalPeriod / 365.25' 3) + "y).";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Orbital Period: " + Math.Round (this.orbitalPeriod' 3) + "d (" + Math.Round (this.orbitalPeriod / 365.25' 3) + "y).";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Orbital Period: " + Math.Round (this.orbitalPeriod' 3) + "d (" + Math.Round (this.orbitalPeriod / 365.25' 3) + "y).";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: if (!this.isTideLocked) {  	ret = ret + nL + spacing + "Sidereal Period: " + Math.Round (this.siderealPeriod' 3) + "d.";  	ret = ret + " Solar Day: " + Math.Round (this.rotationalPeriod' 3) + "d.";  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: if (!this.isTideLocked) {  	ret = ret + nL + spacing + "Sidereal Period: " + Math.Round (this.siderealPeriod' 3) + "d.";  	ret = ret + " Solar Day: " + Math.Round (this.rotationalPeriod' 3) + "d.";  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Sidereal Period: " + Math.Round (this.siderealPeriod' 3) + "d.";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + " Solar Day: " + Math.Round (this.rotationalPeriod' 3) + "d.";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: if (this.hydCoverage > 0 || OptionCont.alwaysDisplayTidalData) {  	ret = ret + nL;  	ret = ret + nL + spacing + "Tidal Data:";  	if (OptionCont.getVerboseOutput () || OptionCont.alwaysDisplayTidalData)  		ret = ret + nL + spacing + "Total tidal force: " + Math.Round (this.tideTotal' 3) + " units";  	if (OptionCont.getVerboseOutput () || OptionCont.alwaysDisplayTidalData)  		ret = ret + nL;  	ret = ret + this.displayTidalData () + nL;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: if (OptionCont.getVerboseOutput () || OptionCont.alwaysDisplayTidalData)  	ret = ret + nL + spacing + "Total tidal force: " + Math.Round (this.tideTotal' 3) + " units";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,ToString,The following statement contains a magic number: ret = ret + nL + spacing + "Total tidal force: " + Math.Round (this.tideTotal' 3) + " units";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (temp' 3) + "K' ";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (((temp - 273.15) * 1.8) + 32' 3) + "°F' ";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (((temp - 273.15) * 1.8) + 32' 3) + "°F' ";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (((temp - 273.15) * 1.8) + 32' 3) + "°F' ";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (((temp - 273.15) * 1.8) + 32' 3) + "°F' ";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (temp - 273.15' 3) + "°C";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,tempInKelFarCel,The following statement contains a magic number: ret = ret + Math.Round (temp - 273.15' 3) + "°C";  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,displayTidalData,The following statement contains a magic number: foreach (KeyValuePair<int' double> tideData in this.tideForce) {  	addStr = true;  	if (tideData.Key == Satellite.TIDE_MOON1)  		ourFlag = "moon one";  	if (tideData.Key == Satellite.TIDE_MOON2)  		ourFlag = "moon two";  	if (tideData.Key == Satellite.TIDE_MOON3)  		ourFlag = "moon three";  	if (tideData.Key == Satellite.TIDE_MOON4)  		ourFlag = "moon four";  	if (tideData.Key == Satellite.TIDE_MOON5)  		ourFlag = "moon five";  	if (tideData.Key == Satellite.TIDE_MOON6)  		ourFlag = "moon six";  	if (tideData.Key == Satellite.TIDE_MOON7)  		ourFlag = "moon seven";  	if (tideData.Key == Satellite.TIDE_MOON8)  		ourFlag = "moon eight";  	if (tideData.Key == Satellite.TIDE_MOON9)  		ourFlag = "moon nine";  	if (tideData.Key == Satellite.TIDE_MOON10)  		ourFlag = "moon ten";  	if (tideData.Key == Satellite.TIDE_PRIMARYSTAR)  		ourFlag = "the primary star";  	if (tideData.Key == Satellite.TIDE_SECONDARYSTAR)  		ourFlag = "the secondary star";  	if (tideData.Key == Satellite.TIDE_TRINARYSTAR)  		ourFlag = "the trinary star";  	if (tideData.Key == Satellite.TIDE_SECCOMPSTAR)  		ourFlag = "the secondary companion star";  	if (tideData.Key == Satellite.TIDE_TRICOMPSTAR)  		ourFlag = "the trinary companion star";  	if (tideData.Key == Satellite.TIDE_PARPLANET)  		ourFlag = "parent planet";  	tideVal = tideData.Value;  	toBeAdded = nL + spacing + "Tidal Force generated by " + ourFlag + " is " + String.Format ("{0:N2}"' tideVal) + "ft amplitude";  	if (tideData.Key >= Satellite.TIDE_MOON_BASE && tideData.Key <= (Satellite.TIDE_MOON_BASE + 10)) {  		if (OptionCont.ignoreLunarTidesOnGardenWorlds && this.SatelliteType == SUBTYPE_GARDEN)  			addStr = false;  	}  	if (addStr)  		ret = ret + toBeAdded;  }  
Magic Number,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,displayTidalData,The following statement contains a magic number: if (tideData.Key >= Satellite.TIDE_MOON_BASE && tideData.Key <= (Satellite.TIDE_MOON_BASE + 10)) {  	if (OptionCont.ignoreLunarTidesOnGardenWorlds && this.SatelliteType == SUBTYPE_GARDEN)  		addStr = false;  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_MAINBRANCH && mass < .45)  	//if it's under .45 solar masses' it'll always be the minimum luminosity.  	return Star.getMinLumin (mass);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_MAINBRANCH && mass >= .45)  	// now it's going to be somewhere between the minimum and maximum' given it's age.  	return (Star.getMinLumin (mass) + ((age / ageL.getMainLimit ()) * (Star.getMaxLumin (mass) - Star.getMinLumin (mass))));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_GIANTBRANCH)  	return Star.getMaxLumin (mass) * 10000;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: return Star.getMaxLumin (mass) * 10000;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_COLLASPEDSTAR)  	return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_COLLASPEDSTAR)  	return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_COLLASPEDSTAR)  	return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: if (ageGroup == StarAgeLine.RET_COLLASPEDSTAR)  	return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrLumin,The following statement contains a magic number: return (1611047115.0 * mass * Math.Pow ((ageL.getAgeFromCollapse (age) * 100000000)' (-7.0 / 5.0)));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_SUBBRANCH)  	return (Star.getInitTemp (mass) - ageL.calcWithInSubLimit (age) * (Star.getInitTemp (mass) - 4800));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return (Star.getInitTemp (mass) - ageL.calcWithInSubLimit (age) * (Star.getInitTemp (mass) - 4800));  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_GIANTBRANCH)  	return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_GIANTBRANCH)  	return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_GIANTBRANCH)  	return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_GIANTBRANCH)  	return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_GIANTBRANCH)  	return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return (3000 + ourDice.rng (2' 6' -2) * 200);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_COLLASPEDSTAR)  	return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_COLLASPEDSTAR)  	return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_COLLASPEDSTAR)  	return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_COLLASPEDSTAR)  	return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: if (ageL.findCurrentAgeGroup (age) == StarAgeLine.RET_COLLASPEDSTAR)  	return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,getCurrentTemp,The following statement contains a magic number: return Math.Pow ((lumin / Math.Pow (Star.getRadius (mass' 0' lumin' StarAgeLine.RET_COLLASPEDSTAR)' 2)) * (5.38937375 * Math.Pow (10' 26))' 1 / 4);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setLumin,The following statement contains a magic number: if (currAgeGroup == StarAgeLine.RET_COLLASPEDSTAR)  	this.maxLumin = Star.getMinLumin (this.currMass) * 10000;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setLumin,The following statement contains a magic number: this.maxLumin = Star.getMinLumin (this.currMass) * 10000;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,updateLumin,The following statement contains a magic number: if (currStatus == StarAgeLine.RET_MAINBRANCH && this.currMass < .45) {  	this.currLumin = lumin;  	this.initLumin = lumin;  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,updateLumin,The following statement contains a magic number: if ((currStatus == StarAgeLine.RET_MAINBRANCH && this.currMass >= .45) || currStatus == StarAgeLine.RET_SUBBRANCH || currStatus == StarAgeLine.RET_GIANTBRANCH || currStatus == StarAgeLine.RET_GIANTBRANCH)  	this.currLumin = lumin;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.evoLine.findCurrentAgeGroup (this.starAge) == StarAgeLine.RET_COLLASPEDSTAR) {  	if (this.effTemp >= 1000)  		this.specType = "DA";  	if (this.effTemp >= 300 && this.effTemp < 1000)  		this.specType = "DB";  	if (this.effTemp < 300)  		this.specType = "DC";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.evoLine.findCurrentAgeGroup (this.starAge) == StarAgeLine.RET_COLLASPEDSTAR) {  	if (this.effTemp >= 1000)  		this.specType = "DA";  	if (this.effTemp >= 300 && this.effTemp < 1000)  		this.specType = "DB";  	if (this.effTemp < 300)  		this.specType = "DC";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.evoLine.findCurrentAgeGroup (this.starAge) == StarAgeLine.RET_COLLASPEDSTAR) {  	if (this.effTemp >= 1000)  		this.specType = "DA";  	if (this.effTemp >= 300 && this.effTemp < 1000)  		this.specType = "DB";  	if (this.effTemp < 300)  		this.specType = "DC";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.evoLine.findCurrentAgeGroup (this.starAge) == StarAgeLine.RET_COLLASPEDSTAR) {  	if (this.effTemp >= 1000)  		this.specType = "DA";  	if (this.effTemp >= 300 && this.effTemp < 1000)  		this.specType = "DB";  	if (this.effTemp < 300)  		this.specType = "DC";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.effTemp >= 1000)  	this.specType = "DA";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.effTemp >= 300 && this.effTemp < 1000)  	this.specType = "DB";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.effTemp >= 300 && this.effTemp < 1000)  	this.specType = "DB";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setSpectralType,The following statement contains a magic number: if (this.effTemp < 300)  	this.specType = "DC";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (!OptionCont.fantasyColors) {  	if (effTemp >= 33000)  		return "Blue";  	if (effTemp >= 10000 && effTemp < 33000)  		return "Blue-White";  	if (effTemp >= 7500 && effTemp < 10000)  		return "Whitish Blue";  	if (effTemp >= 6000 && effTemp < 7500)  		return "White";  	if (effTemp >= 5200 && effTemp < 6000)  		return "Yellow";  	if (effTemp >= 4250 && effTemp < 5200)  		return "Yellowish Orange";  	if (effTemp >= 3700 && effTemp < 4250)  		return "Orange";  	if (effTemp >= 2000 && effTemp < 3700)  		return "Orangish Red";  	if (effTemp >= 1300 && effTemp < 2000)  		return "Red";  	if (effTemp >= 700 && effTemp < 1300)  		return "Purplish Red";  	if (effTemp >= 100 && effTemp < 700)  		return "Brown";  	if (effTemp < 100)  		return "Black";  }  else {  	int roll = ourDice.rng (100019);  	if (libStarGen.inbetween (roll' 0' 10))  		return "Black";  	if (libStarGen.inbetween (roll' 11' 531))  		return "Green";  	if (libStarGen.inbetween (roll' 532' 952))  		return "Yellow-Green";  	if (libStarGen.inbetween (roll' 953' 6057))  		return "Red-Orange";  	if (libStarGen.inbetween (roll' 6058' 6835))  		return "Blue";  	if (libStarGen.inbetween (roll' 6836' 11940))  		return "Purple-Red";  	if (libStarGen.inbetween (roll' 11941' 23948))  		return "Red";  	if (libStarGen.inbetween (roll' 23949' 49960))  		return "Yellow";  	if (libStarGen.inbetween (roll' 49961' 75972))  		return "Orange";  	if (libStarGen.inbetween (roll' 75973' 87980))  		return "Yellow-Orange";  	if (libStarGen.inbetween (roll' 87981' 93085))  		return "Blue-White";  	if (libStarGen.inbetween (roll' 93086' 93763))  		return "White";  	if (libStarGen.inbetween (roll' 93764' 98868))  		return "White-Blue";  	if (libStarGen.inbetween (roll' 98869' 99289))  		return "Green-Blue";  	if (libStarGen.inbetween (roll' 99290' 99710))  		return "Blue-Violet";  	if (libStarGen.inbetween (roll' 99711' 100019))  		return "Purple";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 33000)  	return "Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 10000 && effTemp < 33000)  	return "Blue-White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 10000 && effTemp < 33000)  	return "Blue-White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 7500 && effTemp < 10000)  	return "Whitish Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 7500 && effTemp < 10000)  	return "Whitish Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 6000 && effTemp < 7500)  	return "White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 6000 && effTemp < 7500)  	return "White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 5200 && effTemp < 6000)  	return "Yellow";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 5200 && effTemp < 6000)  	return "Yellow";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 4250 && effTemp < 5200)  	return "Yellowish Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 4250 && effTemp < 5200)  	return "Yellowish Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 3700 && effTemp < 4250)  	return "Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 3700 && effTemp < 4250)  	return "Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 2000 && effTemp < 3700)  	return "Orangish Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 2000 && effTemp < 3700)  	return "Orangish Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 1300 && effTemp < 2000)  	return "Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 1300 && effTemp < 2000)  	return "Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 700 && effTemp < 1300)  	return "Purplish Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 700 && effTemp < 1300)  	return "Purplish Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 100 && effTemp < 700)  	return "Brown";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp >= 100 && effTemp < 700)  	return "Brown";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (effTemp < 100)  	return "Black";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 0' 10))  	return "Black";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 11' 531))  	return "Green";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 11' 531))  	return "Green";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 532' 952))  	return "Yellow-Green";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 532' 952))  	return "Yellow-Green";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 953' 6057))  	return "Red-Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 953' 6057))  	return "Red-Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 6058' 6835))  	return "Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 6058' 6835))  	return "Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 6836' 11940))  	return "Purple-Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 6836' 11940))  	return "Purple-Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 11941' 23948))  	return "Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 11941' 23948))  	return "Red";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 23949' 49960))  	return "Yellow";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 23949' 49960))  	return "Yellow";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 49961' 75972))  	return "Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 49961' 75972))  	return "Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 75973' 87980))  	return "Yellow-Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 75973' 87980))  	return "Yellow-Orange";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 87981' 93085))  	return "Blue-White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 87981' 93085))  	return "Blue-White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 93086' 93763))  	return "White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 93086' 93763))  	return "White";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 93764' 98868))  	return "White-Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 93764' 98868))  	return "White-Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 98869' 99289))  	return "Green-Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 98869' 99289))  	return "Green-Blue";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 99290' 99710))  	return "Blue-Violet";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 99290' 99710))  	return "Blue-Violet";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 99711' 100019))  	return "Purple";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,setColor,The following statement contains a magic number: if (libStarGen.inbetween (roll' 99711' 100019))  	return "Purple";  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: if (this.evoLine.getGiantLimit () < 1000) {  	ret = ret + nL + "Main Sequence Ends: " + this.evoLine.getMainLimit () + " Gyr'";  	ret = ret + " Subgiant Ends: " + this.evoLine.getSubLimit () + " Gyr";  	ret = ret + nL + "Giant Stage Ends: " + this.evoLine.getGiantLimit () + " Gyr";  	if (this.starAge < this.evoLine.getMainLimit ())  		ret = ret + nL + "This star will exit the main sequence phase in: " + (this.evoLine.getMainLimit () - this.starAge) + " Gyr";  	if (this.starAge >= this.evoLine.getMainLimit () && this.starAge < this.evoLine.getSubLimit ())  		ret = ret + nL + "This star will exit the subgiant phase in: " + (this.evoLine.getSubLimit () - this.starAge) + " Gyr";  	if (this.starAge >= this.evoLine.getSubLimit () && this.starAge < this.evoLine.getGiantLimit ())  		ret = ret + nL + "This star will exit the giant phase in: " + (this.evoLine.getGiantLimit () - this.starAge) + " Gyr";  	if (this.starAge >= this.evoLine.getGiantLimit ())  		ret = ret + nL + "This star has been a white dwarf for: " + (this.starAge - this.evoLine.getGiantLimit ()) + " Gyr";  }  else {  	ret = ret + nL + "This star will burn out sometime well after the galaxy disappears.";  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: if (this.selfID != Star.IS_PRIMARY) {  	ret = ret + Environment.NewLine;  	ret = ret + nL + "Orbital Details";  	ret = ret + nL + "This orbits " + this.parentName + " at " + this.orbitalRadius + " AU.";  	if (this.orbitalEccent > 0) {  		ret = ret + nL + "Eccentricity: " + this.orbitalEccent + ".";  		ret = ret + nL + "Periapsis: " + Orbital.getPeriapsis (this.orbitalEccent' this.orbitalRadius) + " AU and Apapasis: " + Orbital.getApapsis (this.orbitalEccent' this.orbitalRadius) + " AU.";  	}  	ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2);  	ret = ret + " days)";  	ret = ret + nL + "This has a seperation of " + libStarGen.getSeperationStr (this.orbitalSep);  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: if (this.selfID != Star.IS_PRIMARY) {  	ret = ret + Environment.NewLine;  	ret = ret + nL + "Orbital Details";  	ret = ret + nL + "This orbits " + this.parentName + " at " + this.orbitalRadius + " AU.";  	if (this.orbitalEccent > 0) {  		ret = ret + nL + "Eccentricity: " + this.orbitalEccent + ".";  		ret = ret + nL + "Periapsis: " + Orbital.getPeriapsis (this.orbitalEccent' this.orbitalRadius) + " AU and Apapasis: " + Orbital.getApapsis (this.orbitalEccent' this.orbitalRadius) + " AU.";  	}  	ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2);  	ret = ret + " days)";  	ret = ret + nL + "This has a seperation of " + libStarGen.getSeperationStr (this.orbitalSep);  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: if (this.selfID != Star.IS_PRIMARY) {  	ret = ret + Environment.NewLine;  	ret = ret + nL + "Orbital Details";  	ret = ret + nL + "This orbits " + this.parentName + " at " + this.orbitalRadius + " AU.";  	if (this.orbitalEccent > 0) {  		ret = ret + nL + "Eccentricity: " + this.orbitalEccent + ".";  		ret = ret + nL + "Periapsis: " + Orbital.getPeriapsis (this.orbitalEccent' this.orbitalRadius) + " AU and Apapasis: " + Orbital.getApapsis (this.orbitalEccent' this.orbitalRadius) + " AU.";  	}  	ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2);  	ret = ret + " days)";  	ret = ret + nL + "This has a seperation of " + libStarGen.getSeperationStr (this.orbitalSep);  }  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,ToString,The following statement contains a magic number: ret = ret + nL + "Orbital period is " + Math.Round (this.orbitalPeriod' 2) + " years (" + Math.Round (this.orbitalPeriod * 365.25' 2);  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll <= 3)  	s.orbitalEccent = 0;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 4)  	s.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 4)  	s.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .1;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 5)  	s.orbitalEccent = .2;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 5)  	s.orbitalEccent = .2;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .2;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 6)  	s.orbitalEccent = .3;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 6)  	s.orbitalEccent = .3;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .3;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 7 || roll == 8)  	s.orbitalEccent = .4;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 7 || roll == 8)  	s.orbitalEccent = .4;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 7 || roll == 8)  	s.orbitalEccent = .4;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .4;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll >= 9 && roll <= 11)  	s.orbitalEccent = .5;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll >= 9 && roll <= 11)  	s.orbitalEccent = .5;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll >= 9 && roll <= 11)  	s.orbitalEccent = .5;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .5;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 12 || roll == 13)  	s.orbitalEccent = .6;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 12 || roll == 13)  	s.orbitalEccent = .6;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 12 || roll == 13)  	s.orbitalEccent = .6;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .6;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 14 || roll == 15)  	s.orbitalEccent = .7;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 14 || roll == 15)  	s.orbitalEccent = .7;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 14 || roll == 15)  	s.orbitalEccent = .7;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .7;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 16)  	s.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 16)  	s.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .8;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 17)  	s.orbitalEccent = .9;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll == 17)  	s.orbitalEccent = .9;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .9;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll >= 18)  	s.orbitalEccent = .95;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: if (roll >= 18)  	s.orbitalEccent = .95;  
Magic Number,StarSystemGurpsGen,Star,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Star.cs,generateEccentricity,The following statement contains a magic number: s.orbitalEccent = .95;  
Magic Number,StarSystemGurpsGen,Dice,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\Dice.cs,gurpsRoll,The following statement contains a magic number: return this.rng (3' 6);  
Magic Number,StarSystemGurpsGen,Dice,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\Dice.cs,gurpsRoll,The following statement contains a magic number: return this.rng (3' 6);  
Magic Number,StarSystemGurpsGen,Dice,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\Dice.cs,gurpsRoll,The following statement contains a magic number: return this.rng (3' 6' mod);  
Magic Number,StarSystemGurpsGen,Dice,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\Dice.cs,gurpsRoll,The following statement contains a magic number: return this.rng (3' 6' mod);  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getOwnership,The following statement contains a magic number: return -9999;  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: foreach (forbiddenZone o in forbiddenZones) {  	//forbidden zone left.  	if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  		mod = mod - 6;  	}  	//inner radius  	if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  		mod = mod - 3;  		IRorbitChecked = true;  	}  	//outer radius  	if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  		mod = mod - 3;  		ORorbitChecked = true;  	}  	//forbidden zone right  	if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  		mod = mod - 6;  	}  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= o.upperBound && orbital / 2.0 >= o.upperBound) || o.upperBound <= orbital - .15) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: mod = mod - 6;  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  	mod = mod - 3;  	IRorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  	mod = mod - 3;  	IRorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  	mod = mod - 3;  	IRorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital / 1.4 <= creationRange.lowerBound && orbital / 2.0 >= creationRange.lowerBound) || (orbital - .15 <= creationRange.lowerBound) && !(IRorbitChecked)) {  	mod = mod - 3;  	IRorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: mod = mod - 3;  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  	mod = mod - 3;  	ORorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  	mod = mod - 3;  	ORorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital * 1.4 >= creationRange.upperBound && orbital * 2.0 <= creationRange.upperBound) && (!ORorbitChecked)) {  	mod = mod - 3;  	ORorbitChecked = true;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: mod = mod - 3;  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: if ((orbital * 1.4 >= o.lowerBound && orbital * 2.0 <= o.lowerBound)) {  	mod = mod - 6;  }  
Magic Number,StarSystemGurpsGen,formationHelper,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\formationHelper.cs,getAdjacencyMod,The following statement contains a magic number: mod = mod - 6;  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (FormationSegment l in segments) {  	if (l.withinRange (orbit)) {  		if (l.parentID == FormationZone.FZ_BADPARENT)  			return FZ_FORBIDDEN;  		foreach (double d in ourOrbits) {  			if (d - .15 < orbit && orbit > d + .15)  				return FZ_TOOCLOSE;  			if (d / 1.4 < orbit && orbit > d * 1.4)  				return FZ_TOOCLOSE;  		}  		return FZ_VALIDORBIT;  	}  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (FormationSegment l in segments) {  	if (l.withinRange (orbit)) {  		if (l.parentID == FormationZone.FZ_BADPARENT)  			return FZ_FORBIDDEN;  		foreach (double d in ourOrbits) {  			if (d - .15 < orbit && orbit > d + .15)  				return FZ_TOOCLOSE;  			if (d / 1.4 < orbit && orbit > d * 1.4)  				return FZ_TOOCLOSE;  		}  		return FZ_VALIDORBIT;  	}  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (FormationSegment l in segments) {  	if (l.withinRange (orbit)) {  		if (l.parentID == FormationZone.FZ_BADPARENT)  			return FZ_FORBIDDEN;  		foreach (double d in ourOrbits) {  			if (d - .15 < orbit && orbit > d + .15)  				return FZ_TOOCLOSE;  			if (d / 1.4 < orbit && orbit > d * 1.4)  				return FZ_TOOCLOSE;  		}  		return FZ_VALIDORBIT;  	}  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (FormationSegment l in segments) {  	if (l.withinRange (orbit)) {  		if (l.parentID == FormationZone.FZ_BADPARENT)  			return FZ_FORBIDDEN;  		foreach (double d in ourOrbits) {  			if (d - .15 < orbit && orbit > d + .15)  				return FZ_TOOCLOSE;  			if (d / 1.4 < orbit && orbit > d * 1.4)  				return FZ_TOOCLOSE;  		}  		return FZ_VALIDORBIT;  	}  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (l.withinRange (orbit)) {  	if (l.parentID == FormationZone.FZ_BADPARENT)  		return FZ_FORBIDDEN;  	foreach (double d in ourOrbits) {  		if (d - .15 < orbit && orbit > d + .15)  			return FZ_TOOCLOSE;  		if (d / 1.4 < orbit && orbit > d * 1.4)  			return FZ_TOOCLOSE;  	}  	return FZ_VALIDORBIT;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (l.withinRange (orbit)) {  	if (l.parentID == FormationZone.FZ_BADPARENT)  		return FZ_FORBIDDEN;  	foreach (double d in ourOrbits) {  		if (d - .15 < orbit && orbit > d + .15)  			return FZ_TOOCLOSE;  		if (d / 1.4 < orbit && orbit > d * 1.4)  			return FZ_TOOCLOSE;  	}  	return FZ_VALIDORBIT;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (l.withinRange (orbit)) {  	if (l.parentID == FormationZone.FZ_BADPARENT)  		return FZ_FORBIDDEN;  	foreach (double d in ourOrbits) {  		if (d - .15 < orbit && orbit > d + .15)  			return FZ_TOOCLOSE;  		if (d / 1.4 < orbit && orbit > d * 1.4)  			return FZ_TOOCLOSE;  	}  	return FZ_VALIDORBIT;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (l.withinRange (orbit)) {  	if (l.parentID == FormationZone.FZ_BADPARENT)  		return FZ_FORBIDDEN;  	foreach (double d in ourOrbits) {  		if (d - .15 < orbit && orbit > d + .15)  			return FZ_TOOCLOSE;  		if (d / 1.4 < orbit && orbit > d * 1.4)  			return FZ_TOOCLOSE;  	}  	return FZ_VALIDORBIT;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (double d in ourOrbits) {  	if (d - .15 < orbit && orbit > d + .15)  		return FZ_TOOCLOSE;  	if (d / 1.4 < orbit && orbit > d * 1.4)  		return FZ_TOOCLOSE;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (double d in ourOrbits) {  	if (d - .15 < orbit && orbit > d + .15)  		return FZ_TOOCLOSE;  	if (d / 1.4 < orbit && orbit > d * 1.4)  		return FZ_TOOCLOSE;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (double d in ourOrbits) {  	if (d - .15 < orbit && orbit > d + .15)  		return FZ_TOOCLOSE;  	if (d / 1.4 < orbit && orbit > d * 1.4)  		return FZ_TOOCLOSE;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: foreach (double d in ourOrbits) {  	if (d - .15 < orbit && orbit > d + .15)  		return FZ_TOOCLOSE;  	if (d / 1.4 < orbit && orbit > d * 1.4)  		return FZ_TOOCLOSE;  }  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (d - .15 < orbit && orbit > d + .15)  	return FZ_TOOCLOSE;  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (d - .15 < orbit && orbit > d + .15)  	return FZ_TOOCLOSE;  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (d / 1.4 < orbit && orbit > d * 1.4)  	return FZ_TOOCLOSE;  
Magic Number,StarSystemGurpsGen,FormationZone,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\FormationZone.cs,checkOrbit,The following statement contains a magic number: if (d / 1.4 < orbit && orbit > d * 1.4)  	return FZ_TOOCLOSE;  
Magic Number,StarSystemGurpsGen,StarAgeLine,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\StarAgeLine.cs,addSubLimit,The following statement contains a magic number: if (this.points.Count > 2)  	this.points [AG_SUBLIMIT] = d + this.points [AG_MAINLIMIT];  //add the main limit to this.  else if (this.points.Count < 1)  	throw new Exception ("Main sequence limit has not been set.");  else  	this.points.Add (d + this.points [AG_MAINLIMIT]);  
Magic Number,StarSystemGurpsGen,StarAgeLine,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\StarAgeLine.cs,addGiantLimit,The following statement contains a magic number: if (this.points.Count > 3)  	this.points [AG_GIANTLIMIT] = d + this.points [AG_SUBLIMIT];  //add the sub limit to this.  else if (this.points.Count < 2)  	throw new Exception ("Sublimit has not been set.");  else  	this.points.Add (d + this.points [AG_SUBLIMIT]);  
Magic Number,StarSystemGurpsGen,StarAgeLine,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\StarAgeLine.cs,addGiantLimit,The following statement contains a magic number: if (this.points.Count > 3)  	this.points [AG_GIANTLIMIT] = d + this.points [AG_SUBLIMIT];  //add the sub limit to this.  else if (this.points.Count < 2)  	throw new Exception ("Sublimit has not been set.");  else  	this.points.Add (d + this.points [AG_SUBLIMIT]);  
Magic Number,StarSystemGurpsGen,StarAgeLine,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\StarAgeLine.cs,addGiantLimit,The following statement contains a magic number: if (this.points.Count < 2)  	throw new Exception ("Sublimit has not been set.");  else  	this.points.Add (d + this.points [AG_SUBLIMIT]);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,NextBytes,The following statement contains a magic number: for (Int32 idx = 0; idx < bufLen; ++idx) {  	buffer [idx] = (Byte)Next (256);  }  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,NextBytes,The following statement contains a magic number: buffer [idx] = (Byte)Next (256);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,NextDoublePositive,The following statement contains a magic number: return compute53BitRandom (0.5' Inverse53BitsOf1s);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,temperingShiftU,The following statement contains a magic number: return (y >> 11);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,temperingShiftS,The following statement contains a magic number: return (y << 7);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,temperingShiftT,The following statement contains a magic number: return (y << 15);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,temperingShiftL,The following statement contains a magic number: return (y >> 18);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,init,The following statement contains a magic number: for (_mti = 1; _mti < N; _mti++) {  	_mt [_mti] = (uint)(1812433253U * (_mt [_mti - 1] ^ (_mt [_mti - 1] >> 30)) + _mti);  	// See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier.   	// In the previous versions' MSBs of the seed affect     	// only MSBs of the array _mt[].                          	// 2002/01/09 modified by Makoto Matsumoto               	_mt [_mti] &= 0xffffffffU;  	// for >32 bit machines  }  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,init,The following statement contains a magic number: _mt [_mti] = (uint)(1812433253U * (_mt [_mti - 1] ^ (_mt [_mti - 1] >> 30)) + _mti);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,init,The following statement contains a magic number: for (; k > 0; k--) {  	_mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1664525U)) + key [j] + j);  	/* non linear */_mt [i] &= 0xffffffffU;  	// for WORDSIZE > 32 machines  	i++;  	j++;  	if (i >= N) {  		_mt [0] = _mt [N - 1];  		i = 1;  	}  	if (j >= keyLength)  		j = 0;  }  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,init,The following statement contains a magic number: _mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1664525U)) + key [j] + j);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,init,The following statement contains a magic number: for (k = N - 1; k > 0; k--) {  	_mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1566083941U)) - i);  	/* non linear */_mt [i] &= 0xffffffffU;  	// for WORDSIZE > 32 machines  	i++;  	if (i < N) {  		continue;  	}  	_mt [0] = _mt [N - 1];  	i = 1;  }  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,init,The following statement contains a magic number: _mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1566083941U)) - i);  
Magic Number,NPack,MersenneTwister,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Utility Classes\MersenneTwister.cs,compute53BitRandom,The following statement contains a magic number: return ((a * 67108864.0 + b) + translate) * scale;  
Missing Default,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following switch statement is missing a default case: switch (ourBag.gurpsRoll ()) {  case 3:  case 4:  case 5:  case 6:  	this.axialTilt = ourBag.rng (2' 6' -2);  	break;  case 7:  case 8:  case 9:  	this.axialTilt = 10 + ourBag.rng (2' 6' -2);  	break;  case 10:  case 11:  case 12:  	this.axialTilt = 20 + ourBag.rng (2' 6' -2);  	break;  case 13:  case 14:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 15:  case 16:  	this.axialTilt = 30 + ourBag.rng (2' 6' -2);  	break;  case 17:  case 18:  	switch (ourBag.rng (1' 6' 0)) {  	case 1:  	case 2:  		this.axialTilt = 50 + ourBag.rng (2' 6' -2);  		break;  	case 3:  	case 4:  		this.axialTilt = 60 + ourBag.rng (2' 6' -2);  		break;  	case 5:  		this.axialTilt = 70 + ourBag.rng (2' 6' -2);  		break;  	case 6:  		this.axialTilt = 80 + ourBag.rng (2' 6' -2);  		break;  	}  	break;  }  
Missing Default,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,createAxialTilt,The following switch statement is missing a default case: switch (ourBag.rng (1' 6' 0)) {  case 1:  case 2:  	this.axialTilt = 50 + ourBag.rng (2' 6' -2);  	break;  case 3:  case 4:  	this.axialTilt = 60 + ourBag.rng (2' 6' -2);  	break;  case 5:  	this.axialTilt = 70 + ourBag.rng (2' 6' -2);  	break;  case 6:  	this.axialTilt = 80 + ourBag.rng (2' 6' -2);  	break;  }  
Missing Default,StarSystemGurpsGen,Satellite,C:\repos\KoihimeNakamura_CelestialNavigation\StarSystemGurpsGen\Stellar Objects\Satelite.cs,generateOrbitalVelocity,The following switch statement is missing a default case: switch (ourBag.rng (2' 6' 0)) {  case 3:  case 4:  case 5:  case 6:  	this.siderealPeriod = (temp / 24.0);  	break;  case 7:  	this.siderealPeriod = (ourBag.rng (1' 6) * 2);  	break;  case 8:  	this.siderealPeriod = (ourBag.rng (1' 6) * 5);  	break;  case 9:  	this.siderealPeriod = (ourBag.rng (1' 6) * 10);  	break;  case 10:  	this.siderealPeriod = (ourBag.rng (1' 6) * 20);  	break;  case 11:  	this.siderealPeriod = (ourBag.rng (1' 6) * 50);  	break;  case 12:  	this.siderealPeriod = (ourBag.rng (1' 6) * 100);  	break;  }  
