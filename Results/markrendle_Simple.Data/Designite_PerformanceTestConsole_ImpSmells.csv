Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PerformanceTestConsole,Program,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,RunTests,The length of the statement  "            foreach (var method in typeof(Tests).GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)) " is 121.
Magic Number,PerformanceTestConsole,Program,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,RunPerformanceTests,The following statement contains a magic number: test.Run(500);
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
Magic Number,PerformanceTestConsole,PerformanceTests,D:\research\architectureSmells\repos\markrendle_Simple.Data\PerformanceTestConsole\Program.cs,Run,The following statement contains a magic number: tests.Add(id =>              {                  idParam.Value = id;                    using (var reader = postCommand.ExecuteReader())                  {                      reader.Read();                      var post = new Post();                      post.Id = reader.GetInt32(0);                      post.Text = reader.GetNullableString(1);                      post.CreationDate = reader.GetDateTime(2);                      post.LastChangeDate = reader.GetDateTime(3);                        post.Counter1 = reader.GetNullableValue<int>(4);                      post.Counter2 = reader.GetNullableValue<int>(5);                      post.Counter3 = reader.GetNullableValue<int>(6);                      post.Counter4 = reader.GetNullableValue<int>(7);                      post.Counter5 = reader.GetNullableValue<int>(8);                      post.Counter6 = reader.GetNullableValue<int>(9);                      post.Counter7 = reader.GetNullableValue<int>(10);                      post.Counter8 = reader.GetNullableValue<int>(11);                      post.Counter9 = reader.GetNullableValue<int>(12);                  }              }' "hand coded");
