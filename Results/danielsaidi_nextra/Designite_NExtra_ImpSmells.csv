Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,Cyclomatic complexity of the method is 11
Complex Method,NExtra.Extensions,Char_AsciiExtensions,F:\newReposMay17\danielsaidi_nextra\NExtra\Extensions\Char_AsciiExtensions.cs,RemapInternationalCharToAscii,Cyclomatic complexity of the method is 19
Complex Method,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,Cyclomatic complexity of the method is 8
Complex Method,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,Cyclomatic complexity of the method is 26
Complex Method,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,Cyclomatic complexity of the method is 8
Long Parameter List,NExtra.Diagnostics,IProcess,F:\newReposMay17\danielsaidi_nextra\NExtra\Diagnostics\IProcess.cs,Start,The method has 5 parameters.
Long Parameter List,NExtra.Diagnostics,ProcessFacade,F:\newReposMay17\danielsaidi_nextra\NExtra\Diagnostics\ProcessFacade.cs,Start,The method has 5 parameters.
Long Parameter List,NExtra.Documentation,XmlDocumentationHandler,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\XmlDocumentationHandler.cs,XmlDocumentationHandler,The method has 5 parameters.
Long Parameter List,NExtra.Email,IEmailSender,F:\newReposMay17\danielsaidi_nextra\NExtra\Email\IEmailSender.cs,SendEmail,The method has 5 parameters.
Long Parameter List,NExtra.Email,EmailNonSender,F:\newReposMay17\danielsaidi_nextra\NExtra\Email\EmailNonSender.cs,SendEmail,The method has 5 parameters.
Long Parameter List,NExtra.Email,SmtpClientBasedEmailSender,F:\newReposMay17\danielsaidi_nextra\NExtra\Email\SmtpClientBasedEmailSender.cs,SendEmail,The method has 5 parameters.
Long Identifier,NExtra.Documentation,MemberInfoXmlDocumentationExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\MemberInfoXmlDocumentationExtractor.cs,MemberInfoXmlDocumentationExtractor,The length of the parameter xmlDocumentationElementExtractor is 32.
Long Identifier,NExtra.Documentation,MethodInfoXmlDocumentationExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\MethodInfoXmlDocumentationExtractor.cs,MethodInfoXmlDocumentationExtractor,The length of the parameter xmlDocumentationElementExtractor is 32.
Long Identifier,NExtra.Documentation,TypeXmlDocumentationExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\TypeXmlDocumentationExtractor.cs,TypeXmlDocumentationExtractor,The length of the parameter xmlDocumentationElementExtractor is 32.
Long Identifier,NExtra.Documentation,XmlDocumentationElementExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\XmlDocumentationElementExtractor.cs,XmlDocumentationElementExtractor,The length of the parameter assemblyXmlDocumentationExtractor is 33.
Long Statement,NExtra.Extensions,IQueryable_OrderByExtensions,F:\newReposMay17\danielsaidi_nextra\NExtra\Extensions\IQueryable_OrderByExtensions.cs,ApplyOrder,The length of the statement  "	var result = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' type).Invoke (null' new object[] { " is 274.
Long Statement,NExtra.Extensions,Assembly_Extensions,F:\newReposMay17\danielsaidi_nextra\NExtra\Extensions\Assembly_Extensions.cs,GetTitle,The length of the statement  "	return attributes.Length == 0 ? Path.GetFileNameWithoutExtension (assembly.CodeBase) : ((AssemblyTitleAttribute)attributes [0]).Title; " is 134.
Long Statement,NExtra.Extensions,Uri_Extensions,F:\newReposMay17\danielsaidi_nextra\NExtra\Extensions\Uri_Extensions.cs,GetQueryParameters,The length of the statement  "	result = rawQuery.Split ('&').Select (part => part.Split ('=')).ToDictionary (split => split [0]' split => split.Length > 1 ? split [1] : String.Empty); " is 152.
Long Statement,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateBearing,The length of the statement  "	var dLon = _angleConverter.ConvertDegreesToRadians (pos2.Longitude) - _angleConverter.ConvertDegreesToRadians (pos1.Longitude); " is 127.
Long Statement,NExtra.Geo,PositionDistanceCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionDistanceCalculator.cs,CalculateDistance,The length of the statement  "	var dLat = _angleConverter.ConvertDegreesToRadians (pos2.Latitude) - _angleConverter.ConvertDegreesToRadians (pos1.Latitude); " is 125.
Long Statement,NExtra.Geo,PositionDistanceCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionDistanceCalculator.cs,CalculateDistance,The length of the statement  "	var dLon = _angleConverter.ConvertDegreesToRadians (pos2.Longitude) - _angleConverter.ConvertDegreesToRadians (pos1.Longitude); " is 127.
Long Statement,NExtra.Geo,PositionDistanceCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionDistanceCalculator.cs,CalculateDistance,The length of the statement  "	var a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Cos (_angleConverter.ConvertDegreesToRadians (pos1.Latitude)) * Math.Cos (_angleConverter.ConvertDegreesToRadians (pos2.Latitude)) * Math.Sin (dLon / 2) * Math.Sin (dLon / 2); " is 232.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectTextFileEncoding,The length of the statement  "	var sampleBytes = new byte[heuristicSampleSize > inputFileStream.Length ? inputFileStream.Length : heuristicSampleSize]; " is 120.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "	if (((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6) " is 128.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "	if (((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6) " is 128.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "	var utf8Validator = new Regex (@"\A(" + @"[\x09\x0A\x0D\x20-\x7E]" + @"|[\xC2-\xDF][\x80-\xBF]" + @"|\xE0[\xA0-\xBF][\x80-\xBF]" + @"|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}" + @"|\xED[\x80-\x9F][\x80-\xBF]" + @"|\xF0[\x90-\xBF][\x80-\xBF]{2}" + @"|[\xF1-\xF3][\x80-\xBF]{3}" + @"|\xF4[\x80-\x8F][\x80-\xBF]{2}" + @")*\z"); " is 317.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "		//If some of the characters were in the upper range (western accented characters)' however' they would likely be mangled to 2-byte by the UTF-8 encoding process. " is 161.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "		sampleBytes.Length - suspiciousUtf8BytesTotal == 0 || likelyUsAsciiBytesInSample * 1.0 / (sampleBytes.Length - suspiciousUtf8BytesTotal) >= 0.8)) " is 145.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The length of the statement  "		if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F) " is 121.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The length of the statement  "		else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE) " is 126.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The length of the statement  "			if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A) " is 121.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The length of the statement  "			if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E) " is 121.
Long Statement,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The length of the statement  "			if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2) " is 121.
Long Statement,NExtra.Documentation,AssemblyXmlDocumentationExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\AssemblyXmlDocumentationExtractor.cs,ExtractDocumentation,The length of the statement  "		throw new FileNotFoundException (String.Format ("The XML documentation file {0} does not exist. Make sure that the file is generated when building the assembly."' xmlFilePath)); " is 177.
Long Statement,NExtra.Documentation,MemberInfoXmlDocumentationExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\MemberInfoXmlDocumentationExtractor.cs,ExtractDocumentation,The length of the statement  "	return _xmlDocumentationElementExtractor.ExtractDocumentationElement (memberInfo.DeclaringType' memberInfo.MemberType.ToString () [0]' memberInfo.Name); " is 152.
Long Statement,NExtra.Documentation,MethodInfoXmlDocumentationExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\MethodInfoXmlDocumentationExtractor.cs,ExtractDocumentation,The length of the statement  "	return parametersString.Length > 0 ? _xmlDocumentationElementExtractor.ExtractDocumentationElement (methodInfo.DeclaringType' 'M'' methodInfo.Name + "(" + parametersString + ")") : _xmlDocumentationElementExtractor.ExtractDocumentationElement (methodInfo.DeclaringType' 'M'' methodInfo.Name); " is 292.
Long Statement,NExtra.Documentation,XmlDocumentationElementExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\XmlDocumentationElementExtractor.cs,ExtractDocumentationElement,The length of the statement  "	var fullName = String.IsNullOrEmpty (subElementName) ? prefix + ":" + type.FullName : prefix + ":" + type.FullName + "." + subElementName; " is 138.
Long Statement,NExtra.Documentation,XmlDocumentationElementExtractor,F:\newReposMay17\danielsaidi_nextra\NExtra\Documentation\XmlDocumentationElementExtractor.cs,ExtractDocumentationElement,The length of the statement  "	foreach (var memberElement in membersElement.Cast<XmlElement> ().Where (memberElement => memberElement.Attributes ["name"].Value.Equals (fullName))) { " is 150.
Long Statement,NExtra.Testing,CrossThreadTestRunner,F:\newReposMay17\danielsaidi_nextra\NExtra\Testing\CrossThreadTestRunner.cs,ThrowExceptionPreservingStack,The length of the statement  "	var remoteStackTraceString = typeof(Exception).GetField ("_remoteStackTraceString"' BindingFlags.Instance | BindingFlags.NonPublic); " is 132.
Long Statement,NExtra.Testing,MetadataRegistrator,F:\newReposMay17\danielsaidi_nextra\NExtra\Testing\MetadataRegistrator.cs,Register,The length of the statement  "		TypeDescriptor.AddProviderTransparent (new AssociatedMetadataTypeTypeDescriptionProvider (type' attrib.MetadataClassType)' type); " is 129.
Complex Conditional,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The conditional expression  "bomBytes [0] == 0xff && bomBytes [1] == 0xfe && (bomBytes.Length < 4 || bomBytes [2] != 0 || bomBytes [3] != 0)"  is complex.
Complex Conditional,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The conditional expression  "bomBytes [0] == 0xff && bomBytes [1] == 0xfe && bomBytes [2] == 0 && bomBytes [3] == 0"  is complex.
Complex Conditional,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The conditional expression  "bomBytes [0] == 0 && bomBytes [1] == 0 && bomBytes [2] == 0xfe && bomBytes [3] == 0xff"  is complex.
Complex Conditional,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,IsCommonUsAsciiByte,The conditional expression  "testByte == 0x0A //lf  || testByte == 0x0D //cr  || testByte == 0x09 //tab  || (testByte >= 0x20 && testByte <= 0x2F) //common punctuation  || (testByte >= 0x30 && testByte <= 0x39) //digits  || (testByte >= 0x3A && testByte <= 0x40) //common punctuation  || (testByte >= 0x41 && testByte <= 0x5A) //capital letters  || (testByte >= 0x5B && testByte <= 0x60) //common punctuation  || (testByte >= 0x61 && testByte <= 0x7A) //lowercase letters  || (testByte >= 0x7B && testByte <= 0x7E)"  is complex.
Complex Conditional,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Complex Conditional,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The conditional expression  "c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '='"  is complex.
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,The following statement contains a magic number: foreach (var parts in args.Select (arg => _splitter.Split (arg' 3))) {  	switch (parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		parameter = ParseValue (parts' parameter' parameters);  		break;  	// Found just a parameter  	case 2:  		parameter = ParseParameter (parts' parameter' parameters);  		break;  	// Parameter with enclosed value  	case 3:  		parameter = ParseParameterWithEnclosedValue (parts' parameter' parameters);  		break;  	}  }  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,The following statement contains a magic number: foreach (var parts in args.Select (arg => _splitter.Split (arg' 3))) {  	switch (parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		parameter = ParseValue (parts' parameter' parameters);  		break;  	// Found just a parameter  	case 2:  		parameter = ParseParameter (parts' parameter' parameters);  		break;  	// Parameter with enclosed value  	case 3:  		parameter = ParseParameterWithEnclosedValue (parts' parameter' parameters);  		break;  	}  }  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,The following statement contains a magic number: foreach (var parts in args.Select (arg => _splitter.Split (arg' 3))) {  	switch (parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		parameter = ParseValue (parts' parameter' parameters);  		break;  	// Found just a parameter  	case 2:  		parameter = ParseParameter (parts' parameter' parameters);  		break;  	// Parameter with enclosed value  	case 3:  		parameter = ParseParameterWithEnclosedValue (parts' parameter' parameters);  		break;  	}  }  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	parameter = ParseValue (parts' parameter' parameters);  	break;  // Found just a parameter  case 2:  	parameter = ParseParameter (parts' parameter' parameters);  	break;  // Parameter with enclosed value  case 3:  	parameter = ParseParameterWithEnclosedValue (parts' parameter' parameters);  	break;  }  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	parameter = ParseValue (parts' parameter' parameters);  	break;  // Found just a parameter  case 2:  	parameter = ParseParameter (parts' parameter' parameters);  	break;  // Parameter with enclosed value  case 3:  	parameter = ParseParameterWithEnclosedValue (parts' parameter' parameters);  	break;  }  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseParameterWithEnclosedValue,The following statement contains a magic number: parts [2] = _remover.Replace (parts [2]' "$1");  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseParameterWithEnclosedValue,The following statement contains a magic number: parts [2] = _remover.Replace (parts [2]' "$1");  
Magic Number,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseParameterWithEnclosedValue,The following statement contains a magic number: parameters.Add (parameter' parts [2]);  
Magic Number,NExtra.Extensions,Int_Extensions,F:\newReposMay17\danielsaidi_nextra\NExtra\Extensions\Int_Extensions.cs,IsEven,The following statement contains a magic number: return value % 2 == 0;  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateBearing,The following statement contains a magic number: return (_angleConverter.ConvertRadiansToDegrees (brng) + 360) % 360;  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateBearing,The following statement contains a magic number: return (_angleConverter.ConvertRadiansToDegrees (brng) + 360) % 360;  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateRhumbBearing,The following statement contains a magic number: if (Math.Abs (dLon) > Math.PI)  	dLon = (dLon > 0) ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateRhumbBearing,The following statement contains a magic number: if (Math.Abs (dLon) > Math.PI)  	dLon = (dLon > 0) ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateRhumbBearing,The following statement contains a magic number: dLon = (dLon > 0) ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateRhumbBearing,The following statement contains a magic number: dLon = (dLon > 0) ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateRhumbBearing,The following statement contains a magic number: return (_angleConverter.ConvertRadiansToDegrees (brng) + 360) % 360;  
Magic Number,NExtra.Geo,PositionBearingCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionBearingCalculator.cs,CalculateRhumbBearing,The following statement contains a magic number: return (_angleConverter.ConvertRadiansToDegrees (brng) + 360) % 360;  
Magic Number,NExtra.Geo,PositionDistanceCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionDistanceCalculator.cs,CalculateDistance,The following statement contains a magic number: return Math.Round (distance' 2);  
Magic Number,NExtra.Geo,PositionDistanceCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionDistanceCalculator.cs,CalculateRhumbDistance,The following statement contains a magic number: if (dLon > Math.PI)  	dLon = 2 * Math.PI - dLon;  
Magic Number,NExtra.Geo,PositionDistanceCalculator,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\PositionDistanceCalculator.cs,CalculateRhumbDistance,The following statement contains a magic number: dLon = 2 * Math.PI - dLon;  
Magic Number,NExtra.Geo,AngleConverter,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\AngleConverter.cs,ConvertDegreesToRadians,The following statement contains a magic number: return Math.PI * degrees / 180.0;  
Magic Number,NExtra.Geo,AngleConverter,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\AngleConverter.cs,ConvertRadiansToDegrees,The following statement contains a magic number: return 180.0 * radians / Math.PI;  
Magic Number,NExtra.Geo,DistanceConverter,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\DistanceConverter.cs,ConvertKilometersToMiles,The following statement contains a magic number: return kilometers * 0.621371192;  
Magic Number,NExtra.Geo,DistanceConverter,F:\newReposMay17\danielsaidi_nextra\NExtra\Geo\DistanceConverter.cs,ConvertMilesToKilometers,The following statement contains a magic number: return miles * 1.609344;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes.Length < 2)  	return null;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0xff && bomBytes [1] == 0xfe && (bomBytes.Length < 4 || bomBytes [2] != 0 || bomBytes [3] != 0))  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0xff && bomBytes [1] == 0xfe && (bomBytes.Length < 4 || bomBytes [2] != 0 || bomBytes [3] != 0))  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0xff && bomBytes [1] == 0xfe && (bomBytes.Length < 4 || bomBytes [2] != 0 || bomBytes [3] != 0))  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes.Length < 3)  	return null;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0xef && bomBytes [1] == 0xbb && bomBytes [2] == 0xbf)  	return Encoding.UTF8;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0x2b && bomBytes [1] == 0x2f && bomBytes [2] == 0x76)  	return Encoding.UTF7;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes.Length < 4)  	return null;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0xff && bomBytes [1] == 0xfe && bomBytes [2] == 0 && bomBytes [3] == 0)  	return Encoding.UTF32;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0xff && bomBytes [1] == 0xfe && bomBytes [2] == 0 && bomBytes [3] == 0)  	return Encoding.UTF32;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0 && bomBytes [1] == 0 && bomBytes [2] == 0xfe && bomBytes [3] == 0xff)  	return Encoding.GetEncoding (12001);  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0 && bomBytes [1] == 0 && bomBytes [2] == 0xfe && bomBytes [3] == 0xff)  	return Encoding.GetEncoding (12001);  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (bomBytes [0] == 0 && bomBytes [1] == 0 && bomBytes [2] == 0xfe && bomBytes [3] == 0xff)  	return Encoding.GetEncoding (12001);  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: return Encoding.GetEncoding (12001);  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: while (currentPos < sampleBytes.Length) {  	//binary null distribution  	if (sampleBytes [currentPos] == 0) {  		if (currentPos % 2 == 0)  			evenBinaryNullsInSample++;  		else  			oddBinaryNullsInSample++;  	}  	//likely US-ASCII characters  	if (IsCommonUsAsciiByte (sampleBytes [currentPos]))  		likelyUsAsciiBytesInSample++;  	//suspicious sequences (look like UTF-8)  	if (skipUtf8Bytes == 0) {  		var lengthFound = DetectSuspiciousUtf8SequenceLength (sampleBytes' currentPos);  		if (lengthFound > 0) {  			suspiciousUtf8SequenceCount++;  			suspiciousUtf8BytesTotal += lengthFound;  			skipUtf8Bytes = lengthFound - 1;  		}  	} else {  		skipUtf8Bytes--;  	}  	currentPos++;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (sampleBytes [currentPos] == 0) {  	if (currentPos % 2 == 0)  		evenBinaryNullsInSample++;  	else  		oddBinaryNullsInSample++;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (currentPos % 2 == 0)  	evenBinaryNullsInSample++;  else  	oddBinaryNullsInSample++;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / sampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / sampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (utf8Validator.IsMatch (potentiallyMangledString)) {  	//Unfortunately' just the fact that it CAN be UTF-8 doesn't tell you much about probabilities.  	//If all the characters are in the 0-127 range' no harm done' most western charsets are same as UTF-8 in these ranges.  	//If some of the characters were in the upper range (western accented characters)' however' they would likely be mangled to 2-byte by the UTF-8 encoding process.  	// So' we need to play stats.  	// The "Random" likelihood of any pair of randomly generated characters being one   	//   of these "suspicious" character sequences is:  	//     128 / (256 * 256) = 0.2%.  	//  	// In western text data' that is SIGNIFICANTLY reduced - most text data stays in the <127   	//   character range' so we assume that more than 1 in 500'000 of these character   	//   sequences indicates UTF-8. The number 500'000 is completely arbitrary - so sue me.  	//  	// We can only assume these character sequences will be rare if we ALSO assume that this  	//   IS in fact western text - in which case the bulk of the UTF-8 encoded data (that is   	//   not already suspicious sequences) should be plain US-ASCII bytes. This' I   	//   arbitrarily decided' should be 80% (a random distribution' eg binary data' would yield   	//   approx 40%' so the chances of hitting this threshold by accident in random data are   	//   VERY low).   	if ((suspiciousUtf8SequenceCount * 500000.0 / sampleBytes.Length >= 1) //suspicious sequences  	&& (//all suspicious' so cannot evaluate proportion of US-Ascii  	sampleBytes.Length - suspiciousUtf8BytesTotal == 0 || likelyUsAsciiBytesInSample * 1.0 / (sampleBytes.Length - suspiciousUtf8BytesTotal) >= 0.8))  		return Encoding.UTF8;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (utf8Validator.IsMatch (potentiallyMangledString)) {  	//Unfortunately' just the fact that it CAN be UTF-8 doesn't tell you much about probabilities.  	//If all the characters are in the 0-127 range' no harm done' most western charsets are same as UTF-8 in these ranges.  	//If some of the characters were in the upper range (western accented characters)' however' they would likely be mangled to 2-byte by the UTF-8 encoding process.  	// So' we need to play stats.  	// The "Random" likelihood of any pair of randomly generated characters being one   	//   of these "suspicious" character sequences is:  	//     128 / (256 * 256) = 0.2%.  	//  	// In western text data' that is SIGNIFICANTLY reduced - most text data stays in the <127   	//   character range' so we assume that more than 1 in 500'000 of these character   	//   sequences indicates UTF-8. The number 500'000 is completely arbitrary - so sue me.  	//  	// We can only assume these character sequences will be rare if we ALSO assume that this  	//   IS in fact western text - in which case the bulk of the UTF-8 encoded data (that is   	//   not already suspicious sequences) should be plain US-ASCII bytes. This' I   	//   arbitrarily decided' should be 80% (a random distribution' eg binary data' would yield   	//   approx 40%' so the chances of hitting this threshold by accident in random data are   	//   VERY low).   	if ((suspiciousUtf8SequenceCount * 500000.0 / sampleBytes.Length >= 1) //suspicious sequences  	&& (//all suspicious' so cannot evaluate proportion of US-Ascii  	sampleBytes.Length - suspiciousUtf8BytesTotal == 0 || likelyUsAsciiBytesInSample * 1.0 / (sampleBytes.Length - suspiciousUtf8BytesTotal) >= 0.8))  		return Encoding.UTF8;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if ((suspiciousUtf8SequenceCount * 500000.0 / sampleBytes.Length >= 1) //suspicious sequences  && (//all suspicious' so cannot evaluate proportion of US-Ascii  sampleBytes.Length - suspiciousUtf8BytesTotal == 0 || likelyUsAsciiBytesInSample * 1.0 / (sampleBytes.Length - suspiciousUtf8BytesTotal) >= 0.8))  	return Encoding.UTF8;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if ((suspiciousUtf8SequenceCount * 500000.0 / sampleBytes.Length >= 1) //suspicious sequences  && (//all suspicious' so cannot evaluate proportion of US-Ascii  sampleBytes.Length - suspiciousUtf8BytesTotal == 0 || likelyUsAsciiBytesInSample * 1.0 / (sampleBytes.Length - suspiciousUtf8BytesTotal) >= 0.8))  	return Encoding.UTF8;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC2) {  	if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x81 || sampleBytes [currentPos + 1] == 0x8D || sampleBytes [currentPos + 1] == 0x8F)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x90 || sampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] >= 0xA0 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC3) {  	if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] >= 0x80 && sampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC5) {  	if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x92 || sampleBytes [currentPos + 1] == 0x93)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0xA0 || sampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0xB8 || sampleBytes [currentPos + 1] == 0xBD || sampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xC6) {  	if (sampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x92)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 1 && sampleBytes [currentPos] == 0xCB) {  	if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  } else if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x86 || sampleBytes [currentPos + 1] == 0x9C)  	lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes.Length >= currentPos + 2 && sampleBytes [currentPos] == 0xE2) {  	if (sampleBytes [currentPos + 1] == 0x80) {  		if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	} else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x80) {  	if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  } else if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x93 || sampleBytes [currentPos + 2] == 0x94)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x98 || sampleBytes [currentPos + 2] == 0x99 || sampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0x9C || sampleBytes [currentPos + 2] == 0x9D || sampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xA0 || sampleBytes [currentPos + 2] == 0xA1 || sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xA6)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xA6)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xB0)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xB0)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 2] == 0xB9 || sampleBytes [currentPos + 2] == 0xBA)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x82 && sampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: if (sampleBytes [currentPos + 1] == 0x84 && sampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,NExtra.IO,KlerksSoftFileEncodingDetector,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\KlerksSoftFileEncodingDetector.cs,DetectSuspiciousUtf8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,NExtra.IO,PathPatternMatcher,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\PathPatternMatcher.cs,ShouldMatchExact,The following statement contains a magic number: if (hasExtension)  	return CatchExtentionRegex.Match (pattern).Groups [1].Length != 3;  
Magic Number,NExtra.IO,PathPatternMatcher,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\PathPatternMatcher.cs,ShouldMatchExact,The following statement contains a magic number: return CatchExtentionRegex.Match (pattern).Groups [1].Length != 3;  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize < 1000)  	return fileSize + " B";  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000 && fileSize < 1000000)  	return String.Format (numberFormat + " kB"' fileSize / 1000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000 && fileSize < 1000000)  	return String.Format (numberFormat + " kB"' fileSize / 1000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000 && fileSize < 1000000)  	return String.Format (numberFormat + " kB"' fileSize / 1000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: return String.Format (numberFormat + " kB"' fileSize / 1000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000000 && fileSize < 1000000000)  	return String.Format (numberFormat + " MB"' fileSize / 1000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000000 && fileSize < 1000000000)  	return String.Format (numberFormat + " MB"' fileSize / 1000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000000 && fileSize < 1000000000)  	return String.Format (numberFormat + " MB"' fileSize / 1000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: return String.Format (numberFormat + " MB"' fileSize / 1000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000000000 && fileSize < 1000000000000)  	return String.Format (numberFormat + " GB"' fileSize / 1000000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000000000 && fileSize < 1000000000000)  	return String.Format (numberFormat + " GB"' fileSize / 1000000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: if (fileSize >= 1000000000 && fileSize < 1000000000000)  	return String.Format (numberFormat + " GB"' fileSize / 1000000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: return String.Format (numberFormat + " GB"' fileSize / 1000000000);  
Magic Number,NExtra.IO,FileSizePresenter,F:\newReposMay17\danielsaidi_nextra\NExtra\IO\FileSizePresenter.cs,PresentFileSize,The following statement contains a magic number: return String.Format (numberFormat + " TB"' fileSize / 1000000000000);  
Magic Number,NExtra.Date,Iso8601WeekResolver,F:\newReposMay17\danielsaidi_nextra\NExtra\Date\Iso8601WeekResolver.cs,GetWeekNumber,The following statement contains a magic number: if (startWeekDayOfYear == 0)  	startWeekDayOfYear = 7;  
Magic Number,NExtra.Date,Iso8601WeekResolver,F:\newReposMay17\danielsaidi_nextra\NExtra\Date\Iso8601WeekResolver.cs,GetWeekNumber,The following statement contains a magic number: startWeekDayOfYear = 7;  
Magic Number,NExtra.Date,Iso8601WeekResolver,F:\newReposMay17\danielsaidi_nextra\NExtra\Date\Iso8601WeekResolver.cs,GetWeekNumber,The following statement contains a magic number: if (endWeekDayOfYear == 0)  	endWeekDayOfYear = 7;  
Magic Number,NExtra.Date,Iso8601WeekResolver,F:\newReposMay17\danielsaidi_nextra\NExtra\Date\Iso8601WeekResolver.cs,GetWeekNumber,The following statement contains a magic number: endWeekDayOfYear = 7;  
Magic Number,NExtra.Date,Iso8601WeekResolver,F:\newReposMay17\danielsaidi_nextra\NExtra\Date\Iso8601WeekResolver.cs,GetWeekNumber,The following statement contains a magic number: if (resultWeekNumber > 52 && !thursdayFlag)  	resultWeekNumber = 1;  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = str [i];  	if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  		sb.Append (c);  		prevdash = false;  	} else if (c >= 'A' && c <= 'Z') {  		// tricky way to convert to lowercase  		sb.Append ((char)(c | 32));  		prevdash = false;  	} else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  		if (prevdash || sb.Length <= 0)  			continue;  		sb.Append ('-');  		prevdash = true;  	} else if (c >= 128) {  		var prevlen = sb.Length;  		sb.Append (c.RemapInternationalCharToAscii ());  		if (prevlen != sb.Length)  			prevdash = false;  	}  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = str [i];  	if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  		sb.Append (c);  		prevdash = false;  	} else if (c >= 'A' && c <= 'Z') {  		// tricky way to convert to lowercase  		sb.Append ((char)(c | 32));  		prevdash = false;  	} else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  		if (prevdash || sb.Length <= 0)  			continue;  		sb.Append ('-');  		prevdash = true;  	} else if (c >= 128) {  		var prevlen = sb.Length;  		sb.Append (c.RemapInternationalCharToAscii ());  		if (prevlen != sb.Length)  			prevdash = false;  	}  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  	sb.Append (c);  	prevdash = false;  } else if (c >= 'A' && c <= 'Z') {  	// tricky way to convert to lowercase  	sb.Append ((char)(c | 32));  	prevdash = false;  } else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  	if (prevdash || sb.Length <= 0)  		continue;  	sb.Append ('-');  	prevdash = true;  } else if (c >= 128) {  	var prevlen = sb.Length;  	sb.Append (c.RemapInternationalCharToAscii ());  	if (prevlen != sb.Length)  		prevdash = false;  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  	sb.Append (c);  	prevdash = false;  } else if (c >= 'A' && c <= 'Z') {  	// tricky way to convert to lowercase  	sb.Append ((char)(c | 32));  	prevdash = false;  } else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  	if (prevdash || sb.Length <= 0)  		continue;  	sb.Append ('-');  	prevdash = true;  } else if (c >= 128) {  	var prevlen = sb.Length;  	sb.Append (c.RemapInternationalCharToAscii ());  	if (prevlen != sb.Length)  		prevdash = false;  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: if (c >= 'A' && c <= 'Z') {  	// tricky way to convert to lowercase  	sb.Append ((char)(c | 32));  	prevdash = false;  } else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  	if (prevdash || sb.Length <= 0)  		continue;  	sb.Append ('-');  	prevdash = true;  } else if (c >= 128) {  	var prevlen = sb.Length;  	sb.Append (c.RemapInternationalCharToAscii ());  	if (prevlen != sb.Length)  		prevdash = false;  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: if (c >= 'A' && c <= 'Z') {  	// tricky way to convert to lowercase  	sb.Append ((char)(c | 32));  	prevdash = false;  } else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  	if (prevdash || sb.Length <= 0)  		continue;  	sb.Append ('-');  	prevdash = true;  } else if (c >= 128) {  	var prevlen = sb.Length;  	sb.Append (c.RemapInternationalCharToAscii ());  	if (prevlen != sb.Length)  		prevdash = false;  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: sb.Append ((char)(c | 32));  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=') {  	if (prevdash || sb.Length <= 0)  		continue;  	sb.Append ('-');  	prevdash = true;  } else if (c >= 128) {  	var prevlen = sb.Length;  	sb.Append (c.RemapInternationalCharToAscii ());  	if (prevlen != sb.Length)  		prevdash = false;  }  
Magic Number,NExtra.Url,StringUrlifier,F:\newReposMay17\danielsaidi_nextra\NExtra\Url\StringUrlifier.cs,Urlify,The following statement contains a magic number: if (c >= 128) {  	var prevlen = sb.Length;  	sb.Append (c.RemapInternationalCharToAscii ());  	if (prevlen != sb.Length)  		prevdash = false;  }  
Magic Number,NExtra.Validation,LuhnAttribute,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\LuhnAttribute.cs,IsValid,The following statement contains a magic number: for (var i = 0; i < str.Length; i++) {  	var temp = (str [i] - '0') << (1 - (i & 1));  	if (temp > 9)  		temp -= 9;  	sum += temp;  }  
Magic Number,NExtra.Validation,LuhnAttribute,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\LuhnAttribute.cs,IsValid,The following statement contains a magic number: for (var i = 0; i < str.Length; i++) {  	var temp = (str [i] - '0') << (1 - (i & 1));  	if (temp > 9)  		temp -= 9;  	sum += temp;  }  
Magic Number,NExtra.Validation,LuhnAttribute,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\LuhnAttribute.cs,IsValid,The following statement contains a magic number: if (temp > 9)  	temp -= 9;  
Magic Number,NExtra.Validation,LuhnAttribute,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\LuhnAttribute.cs,IsValid,The following statement contains a magic number: if (temp > 9)  	temp -= 9;  
Magic Number,NExtra.Validation,LuhnAttribute,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\LuhnAttribute.cs,IsValid,The following statement contains a magic number: temp -= 9;  
Magic Number,NExtra.Validation,LuhnAttribute,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\LuhnAttribute.cs,IsValid,The following statement contains a magic number: return (sum % 10) == 0;  
Magic Number,NExtra.Validation.Ssn,NorwegianSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\NorwegianSsnChecksumValidator.cs,CalculateMod,The following statement contains a magic number: if (result == 11)  	result = 0;  
Magic Number,NExtra.Validation.Ssn,FinnishSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\FinnishSsnChecksumValidator.cs,RemoveSeparator,The following statement contains a magic number: if ("-+A".Contains (separator.ToString (CultureInfo.InvariantCulture)))  	stringValue = stringValue.Substring (0' 6) + stringValue.Substring (7' 4);  
Magic Number,NExtra.Validation.Ssn,FinnishSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\FinnishSsnChecksumValidator.cs,RemoveSeparator,The following statement contains a magic number: if ("-+A".Contains (separator.ToString (CultureInfo.InvariantCulture)))  	stringValue = stringValue.Substring (0' 6) + stringValue.Substring (7' 4);  
Magic Number,NExtra.Validation.Ssn,FinnishSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\FinnishSsnChecksumValidator.cs,RemoveSeparator,The following statement contains a magic number: if ("-+A".Contains (separator.ToString (CultureInfo.InvariantCulture)))  	stringValue = stringValue.Substring (0' 6) + stringValue.Substring (7' 4);  
Magic Number,NExtra.Validation.Ssn,FinnishSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\FinnishSsnChecksumValidator.cs,RemoveSeparator,The following statement contains a magic number: stringValue = stringValue.Substring (0' 6) + stringValue.Substring (7' 4);  
Magic Number,NExtra.Validation.Ssn,FinnishSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\FinnishSsnChecksumValidator.cs,RemoveSeparator,The following statement contains a magic number: stringValue = stringValue.Substring (0' 6) + stringValue.Substring (7' 4);  
Magic Number,NExtra.Validation.Ssn,FinnishSsnChecksumValidator,F:\newReposMay17\danielsaidi_nextra\NExtra\Validation\Ssn\FinnishSsnChecksumValidator.cs,RemoveSeparator,The following statement contains a magic number: stringValue = stringValue.Substring (0' 6) + stringValue.Substring (7' 4);  
Missing Default,NExtra.Console,CommandLineArgumentParser,F:\newReposMay17\danielsaidi_nextra\NExtra\Console\CommandLineArgumentParser.cs,ParseCommandLineArguments,The following switch statement is missing a default case: switch (parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	parameter = ParseValue (parts' parameter' parameters);  	break;  // Found just a parameter  case 2:  	parameter = ParseParameter (parts' parameter' parameters);  	break;  // Parameter with enclosed value  case 3:  	parameter = ParseParameterWithEnclosedValue (parts' parameter' parameters);  	break;  }  
