Implementation smell,Namespace,Class,File,Method,Description
Long Method,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,BuildPropertyParameters,The method has 103 lines of code.
Complex Method,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,BuildParameters,Cyclomatic complexity of the method is 9
Complex Method,Susanoo.Mapping.Properties,ResultMappingBase,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Mapping\Properties\ResultMappingBase.cs,TryAddMapping,Cyclomatic complexity of the method is 33
Complex Method,Susanoo.DependencyInjection.TinyIoC,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Complex Method,System.Reflection,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Long Parameter List,Susanoo,ComponentModelMetadataExtractor,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ComponentModelMetadataExtractor.cs,IsActionableProperty,The method has 5 parameters. Parameters: propertyInfo' customAttributes' actions' whitelist' blacklist
Long Parameter List,Susanoo,DatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DatabaseManager.cs,PrepCommand,The method has 5 parameters. Parameters: connection' commandText' commandType' commandTimeout' parameters
Long Parameter List,Susanoo,DatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DatabaseManager.cs,ExecuteDataReaderAsync,The method has 5 parameters. Parameters: commandText' commandType' commandTimeout' cancellationToken' parameters
Long Parameter List,Susanoo,DatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DatabaseManager.cs,ExecuteNonQueryAsync,The method has 5 parameters. Parameters: commandText' commandType' commandTimeout' cancellationToken' parameters
Long Parameter List,Susanoo,DatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DatabaseManager.cs,ExecuteScalarAsync,The method has 5 parameters. Parameters: commandText' commandType' commandTimeout' cancellationToken' parameters
Long Parameter List,Susanoo,IDatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\IDatabaseManager.cs,ExecuteDataReaderAsync,The method has 5 parameters. Parameters: commandText' commandType' commandTimeout' cancellationToken' parameters
Long Parameter List,Susanoo,IDatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\IDatabaseManager.cs,ExecuteScalarAsync,The method has 5 parameters. Parameters: commandText' commandType' commandTimeout' cancellationToken' parameters
Long Parameter List,Susanoo,IDatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\IDatabaseManager.cs,ExecuteNonQueryAsync,The method has 5 parameters. Parameters: commandText' commandType' commandTimeout' cancellationToken' parameters
Long Parameter List,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,CommandExpression,The method has 6 parameters. Parameters: propertyMetadataExtractor' noResultSetCommandProcessorFactory' commandMultipleResultExpressionFactory' commandSingleResultExpressionFactory' commandText' commandType
Long Parameter List,Susanoo.Exceptions,SusanooExecutionException,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Exceptions\SusanooExecutionException.cs,SusanooExecutionException,The method has 5 parameters. Parameters: message' innerException' info' timeout' parameters
Long Parameter List,Susanoo.Processing,IMultipleResultSetCommandProcessorAsync,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\IMultipleResultSetCommandProcessorAsync.cs,ExecuteAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,ISingleResultSetCommandProcessorAsync,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\ISingleResultSetCommandProcessorAsync.cs,ExecuteAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,NoResultCommandProcessorStructure<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\NoResultCommandProcessorStructure.cs,ExecuteScalarAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,NoResultCommandProcessorStructure<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\NoResultCommandProcessorStructure.cs,ExecuteNonQueryAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,MultipleResultSetCommandProcessorStructure<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\MultipleResultSetCommandProcessorStructure.cs,ExecuteAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,SingleResultSetCommandProcessorStructure<TFilter;TResult>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\SingleResultSetCommandProcessorStructure.cs,ExecuteAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,INoResultSetCommandProcessorAsync,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\INoResultSetCommandProcessor.cs,ExecuteScalarAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.Processing,INoResultSetCommandProcessorAsync,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Processing\INoResultSetCommandProcessor.cs,ExecuteNonQueryAsync,The method has 5 parameters. Parameters: databaseManager' filter' parameterObject' cancellationToken' explicitParameters
Long Parameter List,Susanoo.DependencyInjection.TinyIoC,TypeExtensions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,Susanoo.DependencyInjection.TinyIoC,TypeExtensions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Parameter List,System.Reflection,TypeExtensions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,System.Reflection,TypeExtensions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Identifier,Susanoo,DatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DatabaseManager.cs,DatabaseManager,The length of the parameter providerSpecificCommandSettings is 31.
Long Identifier,Susanoo,DatabaseManager,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DatabaseManager.cs,,The length of the parameter _providerSpecificCommandSettings is 32.
Long Identifier,Susanoo.Command,CommandExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpressionFactory.cs,CommandExpressionFactory,The length of the parameter noResultSetCommandProcessorFactory is 34.
Long Identifier,Susanoo.Command,CommandExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpressionFactory.cs,CommandExpressionFactory,The length of the parameter commandMultipleResultExpressionFactory is 38.
Long Identifier,Susanoo.Command,CommandExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpressionFactory.cs,CommandExpressionFactory,The length of the parameter commandSingleResultExpressionFactory is 36.
Long Identifier,Susanoo.Command,CommandExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpressionFactory.cs,,The length of the parameter _noResultSetCommandProcessorFactory is 35.
Long Identifier,Susanoo.Command,CommandExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpressionFactory.cs,,The length of the parameter _commandMultipleResultExpressionFactory is 39.
Long Identifier,Susanoo.Command,CommandExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpressionFactory.cs,,The length of the parameter _commandSingleResultExpressionFactory is 37.
Long Identifier,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,CommandExpression,The length of the parameter noResultSetCommandProcessorFactory is 34.
Long Identifier,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,CommandExpression,The length of the parameter commandMultipleResultExpressionFactory is 38.
Long Identifier,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,CommandExpression,The length of the parameter commandSingleResultExpressionFactory is 36.
Long Identifier,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,,The length of the parameter _noResultSetCommandProcessorFactory is 35.
Long Identifier,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,,The length of the parameter _commandMultipleResultExpressionFactory is 39.
Long Identifier,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,,The length of the parameter _commandSingleResultExpressionFactory is 37.
Long Identifier,Susanoo.Exceptions,ColumnBindingException,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Exceptions\ColumnBindingException.cs,,The length of the parameter MessageAndInnerExceptionConstructorInfo is 39.
Long Identifier,Susanoo.ResultSets,CommandMultipleResultExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandMultipleResultExpression.cs,CommandMultipleResultExpression,The length of the parameter multipleResultSetCommandProcessorFactory is 40.
Long Identifier,Susanoo.ResultSets,CommandMultipleResultExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandMultipleResultExpression.cs,,The length of the parameter _multipleResultSetCommandProcessorFactory is 41.
Long Identifier,Susanoo.ResultSets,CommandSingleResultExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandSingleResultExpressionFactory.cs,CommandSingleResultExpressionFactory,The length of the parameter singleResultSetCommandProcessorFactory is 38.
Long Identifier,Susanoo.ResultSets,CommandSingleResultExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandSingleResultExpressionFactory.cs,,The length of the parameter _singleResultSetCommandProcessorFactory is 39.
Long Identifier,Susanoo.ResultSets,CommandMultipleResultExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandMultipleResultExpressionFactory.cs,CommandMultipleResultExpressionFactory,The length of the parameter multipleResultSetCommandProcessorFactory is 40.
Long Identifier,Susanoo.ResultSets,CommandMultipleResultExpressionFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandMultipleResultExpressionFactory.cs,,The length of the parameter _multipleResultSetCommandProcessorFactory is 41.
Long Identifier,Susanoo.ResultSets,CommandSingleResultExpression<TFilter;TResult>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandSingleResultExpression.cs,CommandSingleResultExpression,The length of the parameter singleResultSetCommandProcessorFactory is 38.
Long Identifier,Susanoo.ResultSets,CommandSingleResultExpression<TFilter;TResult>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\ResultSets\CommandSingleResultExpression.cs,,The length of the parameter _singleResultSetCommandProcessorFactory is 39.
Long Identifier,Susanoo.DependencyInjection.TinyIoC,ResolveOptions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Identifier,System.Reflection,ResolveOptions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Statement,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,BuildParameters,The length of the statement  "            if (filter == null && parameterObject == null && _constantParameters.Count == 0 && explicitParameters == new DbParameter[0]) " is 124.
Long Statement,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,BuildParameters,The length of the statement  "            var propertyParameters = filter != null ? BuildPropertyParameters(databaseManager' filter).ToArray() :  new DbParameter[0]; " is 123.
Long Statement,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,BuildParameters,The length of the statement  "            var additionalParameters = parameterObject != null ? BuildPropertyParameters(databaseManager' parameterObject).ToArray() : new DbParameter[0]; " is 142.
Long Statement,Susanoo.Mapping.Properties,ResultMappingBase,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Mapping\Properties\ResultMappingBase.cs,CanConvert,The length of the statement  "            if (from.Namespace.Equals("system"' StringComparison.OrdinalIgnoreCase) && to.Namespace.Equals("system"' StringComparison.OrdinalIgnoreCase)) return false; " is 155.
Long Statement,Susanoo.Proxies.ExceptionInterception,SingleResultSetExceptionInterceptionProxy<TFilter;TResult>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Proxies\ExceptionInterception\SingleResultSetExceptionInterceptionProxy.cs,Execute,The length of the statement  "                    throw new SusanooExecutionException("Exception interception failed."' new AggregateException(exFault' ex)' ex.Info' ex.Timeout' ex.Parameters); " is 143.
Long Statement,Susanoo.Proxies.ExceptionInterception,SingleResultSetExceptionInterceptionProxy<TFilter;TResult>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Proxies\ExceptionInterception\SingleResultSetExceptionInterceptionProxy.cs,ExecuteAsync,The length of the statement  "                    throw new SusanooExecutionException("Exception interception failed."' new AggregateException(exFault' ex)' ex.Info' ex.Timeout' ex.Parameters); " is 143.
Long Statement,Susanoo.Proxies.ExceptionInterception,MultipleResultSetExceptionInterceptionProxy<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Proxies\ExceptionInterception\MultipleResultSetExceptionInterceptionProxy.cs,Execute,The length of the statement  "                    throw new SusanooExecutionException("Exception interception failed."' new AggregateException(exFault' ex)' ex.Info' ex.Timeout' ex.Parameters); " is 143.
Long Statement,Susanoo.Proxies.ExceptionInterception,MultipleResultSetExceptionInterceptionProxy<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Proxies\ExceptionInterception\MultipleResultSetExceptionInterceptionProxy.cs,ExecuteAsync,The length of the statement  "                    throw new SusanooExecutionException("Exception interception failed."' new AggregateException(exFault' ex)' ex.Info' ex.Timeout' ex.Parameters); " is 143.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate); " is 122.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Register,The length of the statement  "			return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Register,The length of the statement  "			return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,RegisterMultiple,The length of the statement  "					throw new ArgumentException(String.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,RegisterMultiple,The length of the statement  "				var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Resolve,The length of the statement  "			return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolve,The length of the statement  "			return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "					.Where(type => type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition()))) " is 169.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "											 where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,IsIgnoredType,The length of the statement  "			 t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,The length of the statement  "			if (!String.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,The length of the statement  "			if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,The length of the statement  "				return (GetBestConstructor(checkType' parameters' options) != null) || (_Parent?.CanResolveInternal(registration' parameters' options) ?? false); " is 145.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "//			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "			if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<String' object>))) " is 161.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,The length of the statement  "			if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,The length of the statement  "			if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,The length of the statement  "			if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "			if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "				var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "//			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "			var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanConstruct,The length of the statement  "				if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ConstructType,The length of the statement  "				constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,BuildUpInternal,The length of the statement  "//							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,BuildUpInternal,The length of the statement  "					property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveAllInternal,The length of the statement  "			var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)); " is 129.
Long Statement,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveAllInternal,The length of the statement  "			return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,Susanoo.DependencyInjection.TinyIoC,RegisterOptions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "				return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,Susanoo.DependencyInjection.TinyIoC,MultiRegisterOptions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "				instance._RegisterOptions = instance.ExecuteOnAllRegisterOptions(ro => RegisterOptions.ToCustomLifetimeManager(ro' lifetimeProvider' errorString)); " is 147.
Long Statement,Susanoo.DependencyInjection.TinyIoC,DelegateFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,Susanoo.DependencyInjection.TinyIoC,WeakDelegateFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,Susanoo.DependencyInjection.TinyIoC,InstanceFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,Susanoo.DependencyInjection.TinyIoC,WeakInstanceFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegister,The length of the statement  "			AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate); " is 122.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Register,The length of the statement  "			return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Register,The length of the statement  "			return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,RegisterMultiple,The length of the statement  "					throw new ArgumentException(String.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,RegisterMultiple,The length of the statement  "				var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,Resolve,The length of the statement  "			return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolve,The length of the statement  "			return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "					.Where(type => type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition()))) " is 169.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "											 where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,IsIgnoredType,The length of the statement  "			 t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,The length of the statement  "			if (!String.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,The length of the statement  "			if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanResolveInternal,The length of the statement  "				return (GetBestConstructor(checkType' parameters' options) != null) || (_Parent?.CanResolveInternal(registration' parameters' options) ?? false); " is 145.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "//			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "			if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<String' object>))) " is 161.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,The length of the statement  "			if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,The length of the statement  "			if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveInternal,The length of the statement  "			if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "			if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "				var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "//			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "			var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,CanConstruct,The length of the statement  "				if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ConstructType,The length of the statement  "				constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,BuildUpInternal,The length of the statement  "//							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,BuildUpInternal,The length of the statement  "					property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveAllInternal,The length of the statement  "			var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)); " is 129.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ResolveAllInternal,The length of the statement  "			return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,System.Reflection,RegisterOptions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "				return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,System.Reflection,MultiRegisterOptions,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "				instance._RegisterOptions = instance.ExecuteOnAllRegisterOptions(ro => RegisterOptions.ToCustomLifetimeManager(ro' lifetimeProvider' errorString)); " is 147.
Long Statement,System.Reflection,DelegateFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,System.Reflection,WeakDelegateFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,System.Reflection,InstanceFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,System.Reflection,WeakInstanceFactory,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,SetConstructor,The length of the statement  "				throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Complex Conditional,Susanoo.Command,CommandExpression<TFilter>,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Command\CommandExpression.cs,BuildParameters,The conditional expression  "filter == null && parameterObject == null && _constantParameters.Count == 0 && explicitParameters == new DbParameter[0]"  is complex.
Empty Catch Block,Susanoo.Deserialization,DeserializerResolver,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Deserialization\DeserializerResolver.cs,DeserializerResolver,The method has an empty catch block.
Empty Catch Block,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,Susanoo,UInt64Helpers,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,RotateLeft,The following statement contains a magic number: return (original << bits) | (original >> (64 - bits));
Magic Number,Susanoo,UInt64Helpers,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,RotateRight,The following statement contains a magic number: return (original >> bits) | (original << (64 - bits));
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixBody,The following statement contains a magic number: _h1 = _h1.RotateLeft(27);
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixBody,The following statement contains a magic number: _h1 = _h1 * 5 + 0x52dce729;
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixBody,The following statement contains a magic number: _h2 = _h2.RotateLeft(31);
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixBody,The following statement contains a magic number: _h2 = _h2 * 5 + 0x38495ab5;
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixKey1,The following statement contains a magic number: k1 = k1.RotateLeft(31);
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixKey2,The following statement contains a magic number: k2 = k2.RotateLeft(33);
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixFinal,The following statement contains a magic number: k ^= k >> 33;
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixFinal,The following statement contains a magic number: k ^= k >> 33;
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,MixFinal,The following statement contains a magic number: k ^= k >> 33;
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytes,The following statement contains a magic number: while (remaining >= ReadSize)              {                  var k1 = bb.GetUInt64(pos);                  pos += 8;                  var k2 = bb.GetUInt64(pos);                  pos += 8;                  _length += ReadSize;                  remaining -= ReadSize;                  MixBody(k1' k2);              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytes,The following statement contains a magic number: while (remaining >= ReadSize)              {                  var k1 = bb.GetUInt64(pos);                  pos += 8;                  var k2 = bb.GetUInt64(pos);                  pos += 8;                  _length += ReadSize;                  remaining -= ReadSize;                  MixBody(k1' k2);              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo,Murmur3,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Murmur3.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining)              {                  case 15:                      k2 ^= (ulong)bb[pos + 14] << 48; // fall through                      goto case 14;                  case 14:                      k2 ^= (ulong)bb[pos + 13] << 40; // fall through                      goto case 13;                  case 13:                      k2 ^= (ulong)bb[pos + 12] << 32; // fall through                      goto case 12;                  case 12:                      k2 ^= (ulong)bb[pos + 11] << 24; // fall through                      goto case 11;                  case 11:                      k2 ^= (ulong)bb[pos + 10] << 16; // fall through                      goto case 10;                  case 10:                      k2 ^= (ulong)bb[pos + 9] << 8; // fall through                      goto case 9;                  case 9:                      k2 ^= bb[pos + 8]; // fall through                      goto case 8;                  case 8:                      k1 ^= bb.GetUInt64(pos);                      break;                  case 7:                      k1 ^= (ulong)bb[pos + 6] << 48; // fall through                      goto case 6;                  case 6:                      k1 ^= (ulong)bb[pos + 5] << 40; // fall through                      goto case 5;                  case 5:                      k1 ^= (ulong)bb[pos + 4] << 32; // fall through                      goto case 4;                  case 4:                      k1 ^= (ulong)bb[pos + 3] << 24; // fall through                      goto case 3;                  case 3:                      k1 ^= (ulong)bb[pos + 2] << 16; // fall through                      goto case 2;                  case 2:                      k1 ^= (ulong)bb[pos + 1] << 8; // fall through                      goto case 1;                  case 1:                      k1 ^= bb[pos]; // fall through                      break;                  default:                      throw new Exception("Something went wrong with remaining bytes calculation.");              }
Magic Number,Susanoo.Deserialization,DeserializerResolver,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\Deserialization\DeserializerResolver.cs,DeserializerResolver,The following statement contains a magic number: try              {                  workflow.InsertRange(2' deserializerFactories);              }              catch (ArgumentOutOfRangeException)              {              }
Magic Number,Susanoo.DependencyInjection.TinyIoC,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked  				{  					var result = _sourceType.GetHashCode();    					result = (result * 397) ^ _methodName.GetHashCode();    					for (int i = 0; i < _genericTypes.Length; ++i)  					{  						result = (result * 397) ^ _genericTypes[i].GetHashCode();  					}    					for (int i = 0; i < _parameterTypes.Length; ++i)  					{  						result = (result * 397) ^ _parameterTypes[i].GetHashCode();  					}    					return result;  				}
Magic Number,Susanoo.DependencyInjection.TinyIoC,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked  				{  					var result = _sourceType.GetHashCode();    					result = (result * 397) ^ _methodName.GetHashCode();    					for (int i = 0; i < _genericTypes.Length; ++i)  					{  						result = (result * 397) ^ _genericTypes[i].GetHashCode();  					}    					for (int i = 0; i < _parameterTypes.Length; ++i)  					{  						result = (result * 397) ^ _parameterTypes[i].GetHashCode();  					}    					return result;  				}
Magic Number,Susanoo.DependencyInjection.TinyIoC,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked  				{  					var result = _sourceType.GetHashCode();    					result = (result * 397) ^ _methodName.GetHashCode();    					for (int i = 0; i < _genericTypes.Length; ++i)  					{  						result = (result * 397) ^ _genericTypes[i].GetHashCode();  					}    					for (int i = 0; i < _parameterTypes.Length; ++i)  					{  						result = (result * 397) ^ _parameterTypes[i].GetHashCode();  					}    					return result;  				}
Magic Number,Susanoo.DependencyInjection.TinyIoC,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))  //#endif  			{  				Type returnType = genericArguments[2];    				var name = Expression.Parameter(typeof(string)' "name");  				var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");    //#if NETFX_CORE  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));  //#else  				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) });  //#endif  				resolveMethod = resolveMethod.MakeGenericMethod(returnType);    				var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));    				var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();    				return resolveLambda;  			}
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked  				{  					var result = _sourceType.GetHashCode();    					result = (result * 397) ^ _methodName.GetHashCode();    					for (int i = 0; i < _genericTypes.Length; ++i)  					{  						result = (result * 397) ^ _genericTypes[i].GetHashCode();  					}    					for (int i = 0; i < _parameterTypes.Length; ++i)  					{  						result = (result * 397) ^ _parameterTypes[i].GetHashCode();  					}    					return result;  				}
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked  				{  					var result = _sourceType.GetHashCode();    					result = (result * 397) ^ _methodName.GetHashCode();    					for (int i = 0; i < _genericTypes.Length; ++i)  					{  						result = (result * 397) ^ _genericTypes[i].GetHashCode();  					}    					for (int i = 0; i < _parameterTypes.Length; ++i)  					{  						result = (result * 397) ^ _parameterTypes[i].GetHashCode();  					}    					return result;  				}
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked  				{  					var result = _sourceType.GetHashCode();    					result = (result * 397) ^ _methodName.GetHashCode();    					for (int i = 0; i < _genericTypes.Length; ++i)  					{  						result = (result * 397) ^ _genericTypes[i].GetHashCode();  					}    					for (int i = 0; i < _parameterTypes.Length; ++i)  					{  						result = (result * 397) ^ _parameterTypes[i].GetHashCode();  					}    					return result;  				}
Magic Number,System.Reflection,TinyIoCContainer,C:\repos\psibernetic_Susanoo\src\Susanoo.Core\DependencyInjection\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))  //#endif  			{  				Type returnType = genericArguments[2];    				var name = Expression.Parameter(typeof(string)' "name");  				var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");    //#if NETFX_CORE  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));  //#else  				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) });  //#endif  				resolveMethod = resolveMethod.MakeGenericMethod(returnType);    				var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));    				var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();    				return resolveLambda;  			}
