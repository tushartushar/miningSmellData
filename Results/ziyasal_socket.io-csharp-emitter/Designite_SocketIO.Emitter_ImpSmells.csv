Implementation smell,Namespace,Class,File,Method,Description
Magic Number,SocketIO.Emitter,StreamReader,C:\repos\ziyasal_socket.io-csharp-emitter\src\SocketIO.Emitter\StreamReader.cs,ReadToEnd,The following statement contains a magic number: try              {                  byte[] readBuffer = new byte[4096];                    int totalBytesRead = 0;                  int bytesRead;                    while ((bytesRead = stream.Read(readBuffer' totalBytesRead' readBuffer.Length - totalBytesRead)) > 0)                  {                      totalBytesRead += bytesRead;                        if (totalBytesRead == readBuffer.Length)                      {                          int nextByte = stream.ReadByte();                          if (nextByte != -1)                          {                              byte[] temp = new byte[readBuffer.Length * 2];                              Buffer.BlockCopy(readBuffer' 0' temp' 0' readBuffer.Length);                              Buffer.SetByte(temp' totalBytesRead' (byte)nextByte);                              readBuffer = temp;                              totalBytesRead++;                          }                      }                  }                    byte[] buffer = readBuffer;                  if (readBuffer.Length != totalBytesRead)                  {                      buffer = new byte[totalBytesRead];                      Buffer.BlockCopy(readBuffer' 0' buffer' 0' totalBytesRead);                  }                  return buffer;              }              finally              {                  if (stream.CanSeek)                  {                      stream.Position = originalPosition;                  }              }
Magic Number,SocketIO.Emitter,StreamReader,C:\repos\ziyasal_socket.io-csharp-emitter\src\SocketIO.Emitter\StreamReader.cs,ReadToEnd,The following statement contains a magic number: try              {                  byte[] readBuffer = new byte[4096];                    int totalBytesRead = 0;                  int bytesRead;                    while ((bytesRead = stream.Read(readBuffer' totalBytesRead' readBuffer.Length - totalBytesRead)) > 0)                  {                      totalBytesRead += bytesRead;                        if (totalBytesRead == readBuffer.Length)                      {                          int nextByte = stream.ReadByte();                          if (nextByte != -1)                          {                              byte[] temp = new byte[readBuffer.Length * 2];                              Buffer.BlockCopy(readBuffer' 0' temp' 0' readBuffer.Length);                              Buffer.SetByte(temp' totalBytesRead' (byte)nextByte);                              readBuffer = temp;                              totalBytesRead++;                          }                      }                  }                    byte[] buffer = readBuffer;                  if (readBuffer.Length != totalBytesRead)                  {                      buffer = new byte[totalBytesRead];                      Buffer.BlockCopy(readBuffer' 0' buffer' 0' totalBytesRead);                  }                  return buffer;              }              finally              {                  if (stream.CanSeek)                  {                      stream.Position = originalPosition;                  }              }
