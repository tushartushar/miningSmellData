Implementation smell,Namespace,Class,File,Method,Description
Long Method,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The method has 162 lines of code.
Long Method,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The method has 147 lines of code.
Complex Method,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,Cyclomatic complexity of the method is 16
Complex Method,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,SEARCH,Cyclomatic complexity of the method is 8
Complex Method,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,Cyclomatic complexity of the method is 25
Complex Method,WfcPatcher,CommandLineArguments,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\CommandLineArguments.cs,ParseCommandLineArguments,Cyclomatic complexity of the method is 12
Complex Method,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,Cyclomatic complexity of the method is 19
Complex Method,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,Cyclomatic complexity of the method is 11
Long Parameter List,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,SEARCH,The method has 8 parameters.
Long Parameter List,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The method has 5 parameters.
Long Parameter List,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,ReplaceInData,The method has 5 parameters.
Long Parameter List,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,RunProgram,The method has 5 parameters.
Long Parameter List,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,CopyByteArrayPart,The method has 5 parameters.
Long Parameter List,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,IsByteArrayPartEqual,The method has 5 parameters.
Long Statement,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,Main,The length of the statement  "		string newFilename = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (filename)' System.IO.Path.GetFileNameWithoutExtension (filename)) + " (" + domainFilenamePart + ")" + System.IO.Path.GetExtension (filename); " is 219.
Long Statement,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,ReplaceInData,The length of the statement  "		replaced = ReplaceInData (data' "nintendowifi.net"' CommandLineArguments.Domain' paddingByte' writeAdditionalBytePostString) || replaced; " is 137.
Long Statement,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The length of the statement  "	return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56); " is 241.
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: inc_len = BitConverter.ToUInt32 (pak_buffer' (int)pak_len - 4);  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len == 0) {  	throw new blzDecodingException ("Not coded file!");  } else {  	if (pak_len < 8)  		throw new blzDecodingException ("File has a bad header");  	hdr_len = pak_buffer [pak_len - 5];  	if ((hdr_len < 0x08) || (hdr_len > 0x0B))  		throw new blzDecodingException ("Bad header length");  	if (pak_len <= hdr_len)  		throw new blzDecodingException ("Bad length");  	enc_len = BitConverter.ToUInt32 (pak_buffer' (int)pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM)  		throw new blzDecodingException ("Bad decoded length");  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len == 0) {  	throw new blzDecodingException ("Not coded file!");  } else {  	if (pak_len < 8)  		throw new blzDecodingException ("File has a bad header");  	hdr_len = pak_buffer [pak_len - 5];  	if ((hdr_len < 0x08) || (hdr_len > 0x0B))  		throw new blzDecodingException ("Bad header length");  	if (pak_len <= hdr_len)  		throw new blzDecodingException ("Bad length");  	enc_len = BitConverter.ToUInt32 (pak_buffer' (int)pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM)  		throw new blzDecodingException ("Bad decoded length");  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len == 0) {  	throw new blzDecodingException ("Not coded file!");  } else {  	if (pak_len < 8)  		throw new blzDecodingException ("File has a bad header");  	hdr_len = pak_buffer [pak_len - 5];  	if ((hdr_len < 0x08) || (hdr_len > 0x0B))  		throw new blzDecodingException ("Bad header length");  	if (pak_len <= hdr_len)  		throw new blzDecodingException ("Bad length");  	enc_len = BitConverter.ToUInt32 (pak_buffer' (int)pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM)  		throw new blzDecodingException ("Bad decoded length");  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if (pak_len < 8)  	throw new blzDecodingException ("File has a bad header");  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: hdr_len = pak_buffer [pak_len - 5];  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: enc_len = BitConverter.ToUInt32 (pak_buffer' (int)pak_len - 8) & 0x00FFFFFF;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		if (pak == pak_end)  			break;  		flags = pak_buffer [pak++];  		mask = BLZ_MASK;  	}  	if ((flags & mask) == 0) {  		if (pak == pak_end)  			break;  		//Console.WriteLine( "C# Copy pak " + pak + " to raw " + raw );  		raw_buffer [raw++] = pak_buffer [pak++];  	} else {  		if (pak + 1 >= pak_end)  			break;  		pos = (uint)(pak_buffer [pak++] << 8);  		pos |= pak_buffer [pak++];  		len = (pos >> 12) + BLZ_THRESHOLD + 1;  		if (raw + len > raw_end) {  			Console.Write ("' WARNING: wrong decoded length!");  			len = raw_end - raw;  		}  		pos = (pos & 0xFFF) + 3;  		while (len-- != 0) {  			//Console.WriteLine( "C# Copy raw " + (raw - pos) + " to raw " + raw );  			raw_buffer [raw] = raw_buffer [raw - pos];  			raw++;  		}  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		if (pak == pak_end)  			break;  		flags = pak_buffer [pak++];  		mask = BLZ_MASK;  	}  	if ((flags & mask) == 0) {  		if (pak == pak_end)  			break;  		//Console.WriteLine( "C# Copy pak " + pak + " to raw " + raw );  		raw_buffer [raw++] = pak_buffer [pak++];  	} else {  		if (pak + 1 >= pak_end)  			break;  		pos = (uint)(pak_buffer [pak++] << 8);  		pos |= pak_buffer [pak++];  		len = (pos >> 12) + BLZ_THRESHOLD + 1;  		if (raw + len > raw_end) {  			Console.Write ("' WARNING: wrong decoded length!");  			len = raw_end - raw;  		}  		pos = (pos & 0xFFF) + 3;  		while (len-- != 0) {  			//Console.WriteLine( "C# Copy raw " + (raw - pos) + " to raw " + raw );  			raw_buffer [raw] = raw_buffer [raw - pos];  			raw++;  		}  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		if (pak == pak_end)  			break;  		flags = pak_buffer [pak++];  		mask = BLZ_MASK;  	}  	if ((flags & mask) == 0) {  		if (pak == pak_end)  			break;  		//Console.WriteLine( "C# Copy pak " + pak + " to raw " + raw );  		raw_buffer [raw++] = pak_buffer [pak++];  	} else {  		if (pak + 1 >= pak_end)  			break;  		pos = (uint)(pak_buffer [pak++] << 8);  		pos |= pak_buffer [pak++];  		len = (pos >> 12) + BLZ_THRESHOLD + 1;  		if (raw + len > raw_end) {  			Console.Write ("' WARNING: wrong decoded length!");  			len = raw_end - raw;  		}  		pos = (pos & 0xFFF) + 3;  		while (len-- != 0) {  			//Console.WriteLine( "C# Copy raw " + (raw - pos) + " to raw " + raw );  			raw_buffer [raw] = raw_buffer [raw - pos];  			raw++;  		}  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if ((flags & mask) == 0) {  	if (pak == pak_end)  		break;  	//Console.WriteLine( "C# Copy pak " + pak + " to raw " + raw );  	raw_buffer [raw++] = pak_buffer [pak++];  } else {  	if (pak + 1 >= pak_end)  		break;  	pos = (uint)(pak_buffer [pak++] << 8);  	pos |= pak_buffer [pak++];  	len = (pos >> 12) + BLZ_THRESHOLD + 1;  	if (raw + len > raw_end) {  		Console.Write ("' WARNING: wrong decoded length!");  		len = raw_end - raw;  	}  	pos = (pos & 0xFFF) + 3;  	while (len-- != 0) {  		//Console.WriteLine( "C# Copy raw " + (raw - pos) + " to raw " + raw );  		raw_buffer [raw] = raw_buffer [raw - pos];  		raw++;  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if ((flags & mask) == 0) {  	if (pak == pak_end)  		break;  	//Console.WriteLine( "C# Copy pak " + pak + " to raw " + raw );  	raw_buffer [raw++] = pak_buffer [pak++];  } else {  	if (pak + 1 >= pak_end)  		break;  	pos = (uint)(pak_buffer [pak++] << 8);  	pos |= pak_buffer [pak++];  	len = (pos >> 12) + BLZ_THRESHOLD + 1;  	if (raw + len > raw_end) {  		Console.Write ("' WARNING: wrong decoded length!");  		len = raw_end - raw;  	}  	pos = (pos & 0xFFF) + 3;  	while (len-- != 0) {  		//Console.WriteLine( "C# Copy raw " + (raw - pos) + " to raw " + raw );  		raw_buffer [raw] = raw_buffer [raw - pos];  		raw++;  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: if ((flags & mask) == 0) {  	if (pak == pak_end)  		break;  	//Console.WriteLine( "C# Copy pak " + pak + " to raw " + raw );  	raw_buffer [raw++] = pak_buffer [pak++];  } else {  	if (pak + 1 >= pak_end)  		break;  	pos = (uint)(pak_buffer [pak++] << 8);  	pos |= pak_buffer [pak++];  	len = (pos >> 12) + BLZ_THRESHOLD + 1;  	if (raw + len > raw_end) {  		Console.Write ("' WARNING: wrong decoded length!");  		len = raw_end - raw;  	}  	pos = (pos & 0xFFF) + 3;  	while (len-- != 0) {  		//Console.WriteLine( "C# Copy raw " + (raw - pos) + " to raw " + raw );  		raw_buffer [raw] = raw_buffer [raw - pos];  		raw++;  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: pos = (uint)(pak_buffer [pak++] << 8);  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: len = (pos >> 12) + BLZ_THRESHOLD + 1;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Decode,The following statement contains a magic number: pos = (pos & 0xFFF) + 3;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,SEARCH,The following statement contains a magic number: for (pos = 3; pos <= max; pos++) {  	for (len = 0; len < BLZ_F; len++) {  		if (raw + len == raw_end)  			break;  		if (len >= pos)  			break;  		if (raw_buffer [raw + len] != raw_buffer [raw + len - pos])  			break;  	}  	if (len > l) {  		p = pos;  		if ((l = len) == BLZ_F)  			break;  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,SEARCH,The following statement contains a magic number: pos = 3
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_len = raw_len + ((raw_len + 7) / 8) + 11;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_len = raw_len + ((raw_len + 7) / 8) + 11;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_len = raw_len + ((raw_len + 7) / 8) + 11;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		flg = pak++;  		pak_buffer [flg] = 0;  		mask = BLZ_MASK;  	}  	SEARCH (ref len_best' ref pos_best' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  	// LZ-CUE optimization start  	if (best != 0) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SEARCH (ref len_next' ref pos_next' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw -= len_best - 1;  				SEARCH (ref len_post' ref pos_post' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw--;  				if (len_next <= BLZ_THRESHOLD)  					len_next = 1;  				if (len_post <= BLZ_THRESHOLD)  					len_post = 1;  				if (len_best + len_next <= 1 + len_post)  					len_best = 1;  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] <<= 1;  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  		pak++;  		pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  		pak++;  	} else {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	#if true  	if (pak + raw_len - (raw) < pak_tmp + raw_tmp) {  		#else  						if ( 					(((pak - pak_buffer + raw_len - (raw - raw_buffer)) + 3) & -4) 					< 					pak_tmp + raw_tmp 				) { 		#endif  		pak_tmp = pak;  		raw_tmp = raw_len - (raw);  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		flg = pak++;  		pak_buffer [flg] = 0;  		mask = BLZ_MASK;  	}  	SEARCH (ref len_best' ref pos_best' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  	// LZ-CUE optimization start  	if (best != 0) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SEARCH (ref len_next' ref pos_next' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw -= len_best - 1;  				SEARCH (ref len_post' ref pos_post' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw--;  				if (len_next <= BLZ_THRESHOLD)  					len_next = 1;  				if (len_post <= BLZ_THRESHOLD)  					len_post = 1;  				if (len_best + len_next <= 1 + len_post)  					len_best = 1;  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] <<= 1;  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  		pak++;  		pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  		pak++;  	} else {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	#if true  	if (pak + raw_len - (raw) < pak_tmp + raw_tmp) {  		#else  						if ( 					(((pak - pak_buffer + raw_len - (raw - raw_buffer)) + 3) & -4) 					< 					pak_tmp + raw_tmp 				) { 		#endif  		pak_tmp = pak;  		raw_tmp = raw_len - (raw);  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		flg = pak++;  		pak_buffer [flg] = 0;  		mask = BLZ_MASK;  	}  	SEARCH (ref len_best' ref pos_best' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  	// LZ-CUE optimization start  	if (best != 0) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SEARCH (ref len_next' ref pos_next' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw -= len_best - 1;  				SEARCH (ref len_post' ref pos_post' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw--;  				if (len_next <= BLZ_THRESHOLD)  					len_next = 1;  				if (len_post <= BLZ_THRESHOLD)  					len_post = 1;  				if (len_best + len_next <= 1 + len_post)  					len_best = 1;  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] <<= 1;  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  		pak++;  		pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  		pak++;  	} else {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	#if true  	if (pak + raw_len - (raw) < pak_tmp + raw_tmp) {  		#else  						if ( 					(((pak - pak_buffer + raw_len - (raw - raw_buffer)) + 3) & -4) 					< 					pak_tmp + raw_tmp 				) { 		#endif  		pak_tmp = pak;  		raw_tmp = raw_len - (raw);  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	mask = (byte)(((uint)mask) >> ((int)BLZ_SHIFT));  	if (mask == 0) {  		flg = pak++;  		pak_buffer [flg] = 0;  		mask = BLZ_MASK;  	}  	SEARCH (ref len_best' ref pos_best' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  	// LZ-CUE optimization start  	if (best != 0) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SEARCH (ref len_next' ref pos_next' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw -= len_best - 1;  				SEARCH (ref len_post' ref pos_post' ref raw_buffer' ref raw' ref raw_end' ref max' ref pos' ref len);  				raw--;  				if (len_next <= BLZ_THRESHOLD)  					len_next = 1;  				if (len_post <= BLZ_THRESHOLD)  					len_post = 1;  				if (len_best + len_next <= 1 + len_post)  					len_best = 1;  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] <<= 1;  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  		pak++;  		pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  		pak++;  	} else {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	#if true  	if (pak + raw_len - (raw) < pak_tmp + raw_tmp) {  		#else  						if ( 					(((pak - pak_buffer + raw_len - (raw - raw_buffer)) + 3) & -4) 					< 					pak_tmp + raw_tmp 				) { 		#endif  		pak_tmp = pak;  		raw_tmp = raw_len - (raw);  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  	pak++;  	pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  	pak++;  } else {  	pak_buffer [pak] = raw_buffer [raw];  	pak++;  	raw++;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  	pak++;  	pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  	pak++;  } else {  	pak_buffer [pak] = raw_buffer [raw];  	pak++;  	raw++;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  	pak++;  	pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  	pak++;  } else {  	pak_buffer [pak] = raw_buffer [raw];  	pak++;  	raw++;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  	pak++;  	pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  	pak++;  } else {  	pak_buffer [pak] = raw_buffer [raw];  	pak++;  	raw++;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak] = (byte)(((len_best - (BLZ_THRESHOLD + 1)) << 4) | ((pos_best - 3) >> 8));  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak] = (byte)((pos_best - 3) & 0xFF);  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: if ((pak_tmp == 0) || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & -4) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  		pak++;  		raw++;  	}  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0;  		pak++;  	}  	pak_buffer [pak] = 0;  	pak_buffer [pak + 1] = 0;  	pak_buffer [pak + 2] = 0;  	pak_buffer [pak + 3] = 0;  	pak += 4;  } else {  	tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  	for (len = 0; len < raw_tmp; len++)  		tmp [len] = raw_buffer [len];  	for (len = 0; len < pak_tmp; len++)  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	pak = 0;  	// !!! uuh this isn't exactly equivalent to the C code !!!  	pak_buffer = tmp;  	//free(pak);  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) != 0) {  		pak_buffer [pak] = 0xFF;  		pak++;  		hdr_len++;  	}  	//*(unsigned int *)pak = enc_len + hdr_len; pak += 3;  	//*pak++ = hdr_len;  	//*(unsigned int *)pak = inc_len - hdr_len; pak += 4;  	byte[] tmpbyte = BitConverter.GetBytes (enc_len + hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 3;  	pak_buffer [pak] = (byte)hdr_len;  	pak++;  	tmpbyte = BitConverter.GetBytes (inc_len - hdr_len);  	tmpbyte.CopyTo (pak_buffer' pak);  	pak += 4;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: while ((pak & 3) != 0) {  	pak_buffer [pak] = 0;  	pak++;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak + 2] = 0;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak + 3] = 0;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak += 4;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: tmp = Memory ((int)(raw_tmp + pak_tmp + 11)' 1);  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: hdr_len = 8;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: while ((pak & 3) != 0) {  	pak_buffer [pak] = 0xFF;  	pak++;  	hdr_len++;  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak += 3;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_Code,The following statement contains a magic number: pak += 4;  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_CRC16,The following statement contains a magic number: while ((length--) != 0) {  	crc ^= buffer [bloc++];  	nbits = 8;  	while ((nbits--) != 0) {  		if ((crc & 1) != 0) {  			crc = (ushort)((crc >> 1) ^ 0xA001);  		} else {  			crc = (ushort)(crc >> 1);  		}  	}  }  
Magic Number,WfcPatcher,blz,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\blz.cs,BLZ_CRC16,The following statement contains a magic number: nbits = 8;  
Magic Number,WfcPatcher,Crc16,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Crc16.cs,ComputeChecksum,The following statement contains a magic number: for (int i = 0; i < bytes.Length; ++i) {  	byte index = (byte)(crc ^ bytes [i]);  	crc = (ushort)((crc >> 8) ^ table [index]);  }  
Magic Number,WfcPatcher,Crc16,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Crc16.cs,ComputeChecksum,The following statement contains a magic number: crc = (ushort)((crc >> 8) ^ table [index]);  
Magic Number,WfcPatcher,Crc16,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Crc16.cs,ComputeChecksum,The following statement contains a magic number: for (int i = 0; i < length; ++i) {  	byte index = (byte)((crc ^ stream.ReadByte ()) & 0xFF);  	crc = (ushort)((crc >> 8) ^ table [index]);  }  
Magic Number,WfcPatcher,Crc16,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Crc16.cs,ComputeChecksum,The following statement contains a magic number: crc = (ushort)((crc >> 8) ^ table [index]);  
Magic Number,WfcPatcher,Crc16,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Crc16.cs,Crc16,The following statement contains a magic number: for (ushort i = 0; i < table.Length; ++i) {  	value = 0;  	temp = i;  	for (byte j = 0; j < 8; ++j) {  		if (((value ^ temp) & 0x0001) != 0) {  			value = (ushort)((value >> 1) ^ polynomial);  		} else {  			value >>= 1;  		}  		temp >>= 1;  	}  	table [i] = value;  }  
Magic Number,WfcPatcher,Crc16,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Crc16.cs,Crc16,The following statement contains a magic number: for (byte j = 0; j < 8; ++j) {  	if (((value ^ temp) & 0x0001) != 0) {  		value = (ushort)((value >> 1) ^ polynomial);  	} else {  		value >>= 1;  	}  	temp >>= 1;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: nds.Position = nds.Position - 8;  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (ReplaceInData (decData' 0x00' true)) {  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing ARM9...");  		data = blz.BLZ_Encode (decData' 0);  		uint newCompressedSize = (uint)data.Length;  		if (newCompressedSize > len) {  			// new ARM is actually bigger' redo without the additional nullterm replacement  			decData = decDataUnmodified;  			ReplaceInData (decData' 0x00' false);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			int arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				// still too big' remove debug strings  				if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  					RemoveDebugStrings (decData);  				}  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  				#endif  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				arm9diff = (int)len - (int)newCompressedSize;  				if (arm9diff < 0) {  					Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  					#if DEBUG  					System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  					#endif  				}  			}  		}  		if (newCompressedSize != len) {  			// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  			bool foundSize = false;  			for (int i = 0; i < 0x4000; i += 4) {  				uint maybeSize = BitConverter.ToUInt32 (data' i);  				if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  					foundSize = true;  					byte[] newCmpSizeBytes;  					if (maybeSize == len + 0x02004000u) {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  					} else {  						newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  					}  					data [i + 0] = newCmpSizeBytes [0];  					data [i + 1] = newCmpSizeBytes [1];  					data [i + 2] = newCmpSizeBytes [2];  					data [i + 3] = newCmpSizeBytes [3];  					break;  				}  			}  			if (!foundSize) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  				Console.WriteLine ("         Patched game will probably not boot!");  			}  		}  		#if DEBUG  		uint newDecompressedSize = (uint)decData.Length;  		uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  		Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  		Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  		#endif  	} else {  		Console.WriteLine ("Replacing ARM9...");  		data = decData;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("arm9-new.bin"' data);  	#endif  	nds.Position = pos;  	nds.Write (data' 0' data.Length);  	int newSize = data.Length;  	int diff = (int)len - newSize;  	// copy back footer  	if (diff > 0) {  		List<byte> footer = new List<byte> ();  		nds.Position = pos + len;  		if (nds.PeekUInt32 () == 0xDEC00621) {  			for (int j = 0; j < 12; ++j) {  				footer.Add ((byte)nds.ReadByte ());  			}  			nds.Position = pos + newSize;  			nds.Write (footer.ToArray ()' 0' footer.Count);  		}  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  	}  	// write new size  	byte[] newSizeBytes = BitConverter.GetBytes (newSize);  	nds.Position = 0x2C;  	nds.Write (newSizeBytes' 0' 4);  	// recalculate checksums  	nds.Position = pos;  	ushort secureChecksum = new Crc16 ().ComputeChecksum (nds' 0x4000' 0xFFFF);  	nds.Position = 0x6C;  	nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  	nds.Position = 0;  	ushort headerChecksum = new Crc16 ().ComputeChecksum (nds' 0x15E' 0xFFFF);  	nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  	return true;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (compressed) {  	Console.WriteLine ("Replacing and recompressing ARM9...");  	data = blz.BLZ_Encode (decData' 0);  	uint newCompressedSize = (uint)data.Length;  	if (newCompressedSize > len) {  		// new ARM is actually bigger' redo without the additional nullterm replacement  		decData = decDataUnmodified;  		ReplaceInData (decData' 0x00' false);  		data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  		newCompressedSize = (uint)data.Length;  		int arm9diff = (int)len - (int)newCompressedSize;  		if (arm9diff < 0) {  			// still too big' remove debug strings  			if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  				RemoveDebugStrings (decData);  			}  			#if DEBUG  			System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  			#endif  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  				#endif  			}  		}  	}  	if (newCompressedSize != len) {  		// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  		bool foundSize = false;  		for (int i = 0; i < 0x4000; i += 4) {  			uint maybeSize = BitConverter.ToUInt32 (data' i);  			if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  				foundSize = true;  				byte[] newCmpSizeBytes;  				if (maybeSize == len + 0x02004000u) {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  				} else {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  				}  				data [i + 0] = newCmpSizeBytes [0];  				data [i + 1] = newCmpSizeBytes [1];  				data [i + 2] = newCmpSizeBytes [2];  				data [i + 3] = newCmpSizeBytes [3];  				break;  			}  		}  		if (!foundSize) {  			Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  			Console.WriteLine ("         Patched game will probably not boot!");  		}  	}  	#if DEBUG  	uint newDecompressedSize = (uint)decData.Length;  	uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  	Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  	#endif  } else {  	Console.WriteLine ("Replacing ARM9...");  	data = decData;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (compressed) {  	Console.WriteLine ("Replacing and recompressing ARM9...");  	data = blz.BLZ_Encode (decData' 0);  	uint newCompressedSize = (uint)data.Length;  	if (newCompressedSize > len) {  		// new ARM is actually bigger' redo without the additional nullterm replacement  		decData = decDataUnmodified;  		ReplaceInData (decData' 0x00' false);  		data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  		newCompressedSize = (uint)data.Length;  		int arm9diff = (int)len - (int)newCompressedSize;  		if (arm9diff < 0) {  			// still too big' remove debug strings  			if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  				RemoveDebugStrings (decData);  			}  			#if DEBUG  			System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  			#endif  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  				#endif  			}  		}  	}  	if (newCompressedSize != len) {  		// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  		bool foundSize = false;  		for (int i = 0; i < 0x4000; i += 4) {  			uint maybeSize = BitConverter.ToUInt32 (data' i);  			if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  				foundSize = true;  				byte[] newCmpSizeBytes;  				if (maybeSize == len + 0x02004000u) {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  				} else {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  				}  				data [i + 0] = newCmpSizeBytes [0];  				data [i + 1] = newCmpSizeBytes [1];  				data [i + 2] = newCmpSizeBytes [2];  				data [i + 3] = newCmpSizeBytes [3];  				break;  			}  		}  		if (!foundSize) {  			Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  			Console.WriteLine ("         Patched game will probably not boot!");  		}  	}  	#if DEBUG  	uint newDecompressedSize = (uint)decData.Length;  	uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  	Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  	#endif  } else {  	Console.WriteLine ("Replacing ARM9...");  	data = decData;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (compressed) {  	Console.WriteLine ("Replacing and recompressing ARM9...");  	data = blz.BLZ_Encode (decData' 0);  	uint newCompressedSize = (uint)data.Length;  	if (newCompressedSize > len) {  		// new ARM is actually bigger' redo without the additional nullterm replacement  		decData = decDataUnmodified;  		ReplaceInData (decData' 0x00' false);  		data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  		newCompressedSize = (uint)data.Length;  		int arm9diff = (int)len - (int)newCompressedSize;  		if (arm9diff < 0) {  			// still too big' remove debug strings  			if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  				RemoveDebugStrings (decData);  			}  			#if DEBUG  			System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  			#endif  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  				#endif  			}  		}  	}  	if (newCompressedSize != len) {  		// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  		bool foundSize = false;  		for (int i = 0; i < 0x4000; i += 4) {  			uint maybeSize = BitConverter.ToUInt32 (data' i);  			if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  				foundSize = true;  				byte[] newCmpSizeBytes;  				if (maybeSize == len + 0x02004000u) {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  				} else {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  				}  				data [i + 0] = newCmpSizeBytes [0];  				data [i + 1] = newCmpSizeBytes [1];  				data [i + 2] = newCmpSizeBytes [2];  				data [i + 3] = newCmpSizeBytes [3];  				break;  			}  		}  		if (!foundSize) {  			Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  			Console.WriteLine ("         Patched game will probably not boot!");  		}  	}  	#if DEBUG  	uint newDecompressedSize = (uint)decData.Length;  	uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  	Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  	#endif  } else {  	Console.WriteLine ("Replacing ARM9...");  	data = decData;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (compressed) {  	Console.WriteLine ("Replacing and recompressing ARM9...");  	data = blz.BLZ_Encode (decData' 0);  	uint newCompressedSize = (uint)data.Length;  	if (newCompressedSize > len) {  		// new ARM is actually bigger' redo without the additional nullterm replacement  		decData = decDataUnmodified;  		ReplaceInData (decData' 0x00' false);  		data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  		newCompressedSize = (uint)data.Length;  		int arm9diff = (int)len - (int)newCompressedSize;  		if (arm9diff < 0) {  			// still too big' remove debug strings  			if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  				RemoveDebugStrings (decData);  			}  			#if DEBUG  			System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  			#endif  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  				#endif  			}  		}  	}  	if (newCompressedSize != len) {  		// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  		bool foundSize = false;  		for (int i = 0; i < 0x4000; i += 4) {  			uint maybeSize = BitConverter.ToUInt32 (data' i);  			if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  				foundSize = true;  				byte[] newCmpSizeBytes;  				if (maybeSize == len + 0x02004000u) {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  				} else {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  				}  				data [i + 0] = newCmpSizeBytes [0];  				data [i + 1] = newCmpSizeBytes [1];  				data [i + 2] = newCmpSizeBytes [2];  				data [i + 3] = newCmpSizeBytes [3];  				break;  			}  		}  		if (!foundSize) {  			Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  			Console.WriteLine ("         Patched game will probably not boot!");  		}  	}  	#if DEBUG  	uint newDecompressedSize = (uint)decData.Length;  	uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  	Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  	#endif  } else {  	Console.WriteLine ("Replacing ARM9...");  	data = decData;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (compressed) {  	Console.WriteLine ("Replacing and recompressing ARM9...");  	data = blz.BLZ_Encode (decData' 0);  	uint newCompressedSize = (uint)data.Length;  	if (newCompressedSize > len) {  		// new ARM is actually bigger' redo without the additional nullterm replacement  		decData = decDataUnmodified;  		ReplaceInData (decData' 0x00' false);  		data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  		newCompressedSize = (uint)data.Length;  		int arm9diff = (int)len - (int)newCompressedSize;  		if (arm9diff < 0) {  			// still too big' remove debug strings  			if (!RemoveStringsInKnownGames (GetGamecode (nds)' decData)) {  				RemoveDebugStrings (decData);  			}  			#if DEBUG  			System.IO.File.WriteAllBytes ("arm9-dec-without-debug.bin"' decData);  			#endif  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			arm9diff = (int)len - (int)newCompressedSize;  			if (arm9diff < 0) {  				Console.WriteLine ("WARNING: Recompressed ARM9 is " + -arm9diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  				#if DEBUG  				System.IO.File.WriteAllBytes ("arm9-too-big-recomp.bin"' data);  				#endif  			}  		}  	}  	if (newCompressedSize != len) {  		// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  		bool foundSize = false;  		for (int i = 0; i < 0x4000; i += 4) {  			uint maybeSize = BitConverter.ToUInt32 (data' i);  			if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  				foundSize = true;  				byte[] newCmpSizeBytes;  				if (maybeSize == len + 0x02004000u) {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  				} else {  					newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  				}  				data [i + 0] = newCmpSizeBytes [0];  				data [i + 1] = newCmpSizeBytes [1];  				data [i + 2] = newCmpSizeBytes [2];  				data [i + 3] = newCmpSizeBytes [3];  				break;  			}  		}  		if (!foundSize) {  			Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  			Console.WriteLine ("         Patched game will probably not boot!");  		}  	}  	#if DEBUG  	uint newDecompressedSize = (uint)decData.Length;  	uint newAdditionalCompressedSize = newDecompressedSize - newCompressedSize;  	Console.WriteLine ("ARM9 new dec size: 0x" + newDecompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new cmp size: 0x" + newCompressedSize.ToString ("X6"));  	Console.WriteLine ("ARM9 new diff:     0x" + newAdditionalCompressedSize.ToString ("X6"));  	#endif  } else {  	Console.WriteLine ("Replacing ARM9...");  	data = decData;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (newCompressedSize != len) {  	// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  	bool foundSize = false;  	for (int i = 0; i < 0x4000; i += 4) {  		uint maybeSize = BitConverter.ToUInt32 (data' i);  		if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  			foundSize = true;  			byte[] newCmpSizeBytes;  			if (maybeSize == len + 0x02004000u) {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  			} else {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  			}  			data [i + 0] = newCmpSizeBytes [0];  			data [i + 1] = newCmpSizeBytes [1];  			data [i + 2] = newCmpSizeBytes [2];  			data [i + 3] = newCmpSizeBytes [3];  			break;  		}  	}  	if (!foundSize) {  		Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  		Console.WriteLine ("         Patched game will probably not boot!");  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (newCompressedSize != len) {  	// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  	bool foundSize = false;  	for (int i = 0; i < 0x4000; i += 4) {  		uint maybeSize = BitConverter.ToUInt32 (data' i);  		if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  			foundSize = true;  			byte[] newCmpSizeBytes;  			if (maybeSize == len + 0x02004000u) {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  			} else {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  			}  			data [i + 0] = newCmpSizeBytes [0];  			data [i + 1] = newCmpSizeBytes [1];  			data [i + 2] = newCmpSizeBytes [2];  			data [i + 3] = newCmpSizeBytes [3];  			break;  		}  	}  	if (!foundSize) {  		Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  		Console.WriteLine ("         Patched game will probably not boot!");  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (newCompressedSize != len) {  	// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  	bool foundSize = false;  	for (int i = 0; i < 0x4000; i += 4) {  		uint maybeSize = BitConverter.ToUInt32 (data' i);  		if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  			foundSize = true;  			byte[] newCmpSizeBytes;  			if (maybeSize == len + 0x02004000u) {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  			} else {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  			}  			data [i + 0] = newCmpSizeBytes [0];  			data [i + 1] = newCmpSizeBytes [1];  			data [i + 2] = newCmpSizeBytes [2];  			data [i + 3] = newCmpSizeBytes [3];  			break;  		}  	}  	if (!foundSize) {  		Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  		Console.WriteLine ("         Patched game will probably not boot!");  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (newCompressedSize != len) {  	// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  	bool foundSize = false;  	for (int i = 0; i < 0x4000; i += 4) {  		uint maybeSize = BitConverter.ToUInt32 (data' i);  		if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  			foundSize = true;  			byte[] newCmpSizeBytes;  			if (maybeSize == len + 0x02004000u) {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  			} else {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  			}  			data [i + 0] = newCmpSizeBytes [0];  			data [i + 1] = newCmpSizeBytes [1];  			data [i + 2] = newCmpSizeBytes [2];  			data [i + 3] = newCmpSizeBytes [3];  			break;  		}  	}  	if (!foundSize) {  		Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  		Console.WriteLine ("         Patched game will probably not boot!");  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (newCompressedSize != len) {  	// new ARM is (still) different' attempt to find the metadata in the ARM9 secure area and replace that  	bool foundSize = false;  	for (int i = 0; i < 0x4000; i += 4) {  		uint maybeSize = BitConverter.ToUInt32 (data' i);  		if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  			foundSize = true;  			byte[] newCmpSizeBytes;  			if (maybeSize == len + 0x02004000u) {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  			} else {  				newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  			}  			data [i + 0] = newCmpSizeBytes [0];  			data [i + 1] = newCmpSizeBytes [1];  			data [i + 2] = newCmpSizeBytes [2];  			data [i + 3] = newCmpSizeBytes [3];  			break;  		}  	}  	if (!foundSize) {  		Console.WriteLine ("WARNING: Recompressed ARM9 is different size' and size could not be found in secure area!");  		Console.WriteLine ("         Patched game will probably not boot!");  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: for (int i = 0; i < 0x4000; i += 4) {  	uint maybeSize = BitConverter.ToUInt32 (data' i);  	if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  		foundSize = true;  		byte[] newCmpSizeBytes;  		if (maybeSize == len + 0x02004000u) {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  		} else {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  		}  		data [i + 0] = newCmpSizeBytes [0];  		data [i + 1] = newCmpSizeBytes [1];  		data [i + 2] = newCmpSizeBytes [2];  		data [i + 3] = newCmpSizeBytes [3];  		break;  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: for (int i = 0; i < 0x4000; i += 4) {  	uint maybeSize = BitConverter.ToUInt32 (data' i);  	if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  		foundSize = true;  		byte[] newCmpSizeBytes;  		if (maybeSize == len + 0x02004000u) {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  		} else {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  		}  		data [i + 0] = newCmpSizeBytes [0];  		data [i + 1] = newCmpSizeBytes [1];  		data [i + 2] = newCmpSizeBytes [2];  		data [i + 3] = newCmpSizeBytes [3];  		break;  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: for (int i = 0; i < 0x4000; i += 4) {  	uint maybeSize = BitConverter.ToUInt32 (data' i);  	if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  		foundSize = true;  		byte[] newCmpSizeBytes;  		if (maybeSize == len + 0x02004000u) {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  		} else {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  		}  		data [i + 0] = newCmpSizeBytes [0];  		data [i + 1] = newCmpSizeBytes [1];  		data [i + 2] = newCmpSizeBytes [2];  		data [i + 3] = newCmpSizeBytes [3];  		break;  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: for (int i = 0; i < 0x4000; i += 4) {  	uint maybeSize = BitConverter.ToUInt32 (data' i);  	if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  		foundSize = true;  		byte[] newCmpSizeBytes;  		if (maybeSize == len + 0x02004000u) {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  		} else {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  		}  		data [i + 0] = newCmpSizeBytes [0];  		data [i + 1] = newCmpSizeBytes [1];  		data [i + 2] = newCmpSizeBytes [2];  		data [i + 3] = newCmpSizeBytes [3];  		break;  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: for (int i = 0; i < 0x4000; i += 4) {  	uint maybeSize = BitConverter.ToUInt32 (data' i);  	if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  		foundSize = true;  		byte[] newCmpSizeBytes;  		if (maybeSize == len + 0x02004000u) {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  		} else {  			newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  		}  		data [i + 0] = newCmpSizeBytes [0];  		data [i + 1] = newCmpSizeBytes [1];  		data [i + 2] = newCmpSizeBytes [2];  		data [i + 3] = newCmpSizeBytes [3];  		break;  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: i += 4
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  	foundSize = true;  	byte[] newCmpSizeBytes;  	if (maybeSize == len + 0x02004000u) {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  	} else {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  	}  	data [i + 0] = newCmpSizeBytes [0];  	data [i + 1] = newCmpSizeBytes [1];  	data [i + 2] = newCmpSizeBytes [2];  	data [i + 3] = newCmpSizeBytes [3];  	break;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  	foundSize = true;  	byte[] newCmpSizeBytes;  	if (maybeSize == len + 0x02004000u) {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  	} else {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  	}  	data [i + 0] = newCmpSizeBytes [0];  	data [i + 1] = newCmpSizeBytes [1];  	data [i + 2] = newCmpSizeBytes [2];  	data [i + 3] = newCmpSizeBytes [3];  	break;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  	foundSize = true;  	byte[] newCmpSizeBytes;  	if (maybeSize == len + 0x02004000u) {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  	} else {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  	}  	data [i + 0] = newCmpSizeBytes [0];  	data [i + 1] = newCmpSizeBytes [1];  	data [i + 2] = newCmpSizeBytes [2];  	data [i + 3] = newCmpSizeBytes [3];  	break;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (maybeSize == len + 0x02000000u || maybeSize == len + 0x02004000u) {  	foundSize = true;  	byte[] newCmpSizeBytes;  	if (maybeSize == len + 0x02004000u) {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02004000u);  	} else {  		newCmpSizeBytes = BitConverter.GetBytes (newCompressedSize + 0x02000000u);  	}  	data [i + 0] = newCmpSizeBytes [0];  	data [i + 1] = newCmpSizeBytes [1];  	data [i + 2] = newCmpSizeBytes [2];  	data [i + 3] = newCmpSizeBytes [3];  	break;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: data [i + 2] = newCmpSizeBytes [2];  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: data [i + 2] = newCmpSizeBytes [2];  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: data [i + 3] = newCmpSizeBytes [3];  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: data [i + 3] = newCmpSizeBytes [3];  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (diff > 0) {  	List<byte> footer = new List<byte> ();  	nds.Position = pos + len;  	if (nds.PeekUInt32 () == 0xDEC00621) {  		for (int j = 0; j < 12; ++j) {  			footer.Add ((byte)nds.ReadByte ());  		}  		nds.Position = pos + newSize;  		nds.Write (footer.ToArray ()' 0' footer.Count);  	}  	// padding  	for (int j = 0; j < diff; ++j) {  		nds.WriteByte (0xFF);  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: if (nds.PeekUInt32 () == 0xDEC00621) {  	for (int j = 0; j < 12; ++j) {  		footer.Add ((byte)nds.ReadByte ());  	}  	nds.Position = pos + newSize;  	nds.Write (footer.ToArray ()' 0' footer.Count);  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: for (int j = 0; j < 12; ++j) {  	footer.Add ((byte)nds.ReadByte ());  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: nds.Write (newSizeBytes' 0' 4);  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: nds.Write (BitConverter.GetBytes (secureChecksum)' 0' 2);  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchArm9,The following statement contains a magic number: nds.Write (BitConverter.GetBytes (headerChecksum)' 0' 2);  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: for (uint i = 0; i < len; i += 0x20) {  	nds.Position = pos + i;  	uint id = nds.ReadUInt32 ();  	uint ramAddr = nds.ReadUInt32 ();  	uint ramSize = nds.ReadUInt32 ();  	uint bssSize = nds.ReadUInt32 ();  	uint sinitInit = nds.ReadUInt32 ();  	uint sinitInitEnd = nds.ReadUInt32 ();  	uint fileId = nds.ReadUInt32 ();  	uint compressedSize = nds.ReadUInt24 ();  	byte compressedBitmask = (byte)nds.ReadByte ();  	nds.Position = fatOffset + 8 * id;  	uint overlayPositionStart = nds.ReadUInt32 ();  	uint overlayPositionEnd = nds.ReadUInt32 ();  	uint overlaySize = overlayPositionEnd - overlayPositionStart;  	if (overlaySize == 0) {  		continue;  	}  	nds.Position = overlayPositionStart;  	byte[] data = new byte[overlaySize];  	nds.Read (data' 0' (int)overlaySize);  	blz blz = new blz ();  	byte[] decData;  	bool compressed = (compressedBitmask & 0x01) == 0x01;  	if (compressed) {  		try {  			decData = blz.BLZ_Decode (data);  		} catch (blzDecodingException) {  			Console.WriteLine ("WARNING: Decompression of Overlay " + (i / 0x20) + " failed!");  			decData = data;  			compressed = false;  		}  	} else {  		decData = data;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("overlay" + (i / 0x20) + "-dec.bin"' decData);  	#endif  	if (ReplaceInData (decData)) {  		modified = true;  		int newOverlaySize;  		int diff;  		// if something was replaced' put it back into the ROM  		if (compressed) {  			Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  			uint newCompressedSize = 0;  			data = blz.BLZ_Encode (decData' 0);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  				RemoveDebugStrings (decData);  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				newOverlaySize = data.Length;  				diff = (int)overlaySize - newOverlaySize;  				if (diff < 0) {  					Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  				}  			}  			// replace compressed size' if it was used before  			if (compressedSize == overlaySize) {  				byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  				nds.Position = pos + i + 0x1C;  				nds.Write (newCompressedSizeBytes' 0' 3);  			}  		} else {  			Console.WriteLine ("Replacing overlay " + id + "...");  			data = decData;  		}  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		nds.Position = overlayPositionStart;  		nds.Write (data' 0' data.Length);  		overlayPositionEnd = (uint)nds.Position;  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  		// new file end offset  		byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  		nds.Position = fatOffset + 8 * id + 4;  		nds.Write (newPosEndData' 0' 4);  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: for (uint i = 0; i < len; i += 0x20) {  	nds.Position = pos + i;  	uint id = nds.ReadUInt32 ();  	uint ramAddr = nds.ReadUInt32 ();  	uint ramSize = nds.ReadUInt32 ();  	uint bssSize = nds.ReadUInt32 ();  	uint sinitInit = nds.ReadUInt32 ();  	uint sinitInitEnd = nds.ReadUInt32 ();  	uint fileId = nds.ReadUInt32 ();  	uint compressedSize = nds.ReadUInt24 ();  	byte compressedBitmask = (byte)nds.ReadByte ();  	nds.Position = fatOffset + 8 * id;  	uint overlayPositionStart = nds.ReadUInt32 ();  	uint overlayPositionEnd = nds.ReadUInt32 ();  	uint overlaySize = overlayPositionEnd - overlayPositionStart;  	if (overlaySize == 0) {  		continue;  	}  	nds.Position = overlayPositionStart;  	byte[] data = new byte[overlaySize];  	nds.Read (data' 0' (int)overlaySize);  	blz blz = new blz ();  	byte[] decData;  	bool compressed = (compressedBitmask & 0x01) == 0x01;  	if (compressed) {  		try {  			decData = blz.BLZ_Decode (data);  		} catch (blzDecodingException) {  			Console.WriteLine ("WARNING: Decompression of Overlay " + (i / 0x20) + " failed!");  			decData = data;  			compressed = false;  		}  	} else {  		decData = data;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("overlay" + (i / 0x20) + "-dec.bin"' decData);  	#endif  	if (ReplaceInData (decData)) {  		modified = true;  		int newOverlaySize;  		int diff;  		// if something was replaced' put it back into the ROM  		if (compressed) {  			Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  			uint newCompressedSize = 0;  			data = blz.BLZ_Encode (decData' 0);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  				RemoveDebugStrings (decData);  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				newOverlaySize = data.Length;  				diff = (int)overlaySize - newOverlaySize;  				if (diff < 0) {  					Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  				}  			}  			// replace compressed size' if it was used before  			if (compressedSize == overlaySize) {  				byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  				nds.Position = pos + i + 0x1C;  				nds.Write (newCompressedSizeBytes' 0' 3);  			}  		} else {  			Console.WriteLine ("Replacing overlay " + id + "...");  			data = decData;  		}  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		nds.Position = overlayPositionStart;  		nds.Write (data' 0' data.Length);  		overlayPositionEnd = (uint)nds.Position;  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  		// new file end offset  		byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  		nds.Position = fatOffset + 8 * id + 4;  		nds.Write (newPosEndData' 0' 4);  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: for (uint i = 0; i < len; i += 0x20) {  	nds.Position = pos + i;  	uint id = nds.ReadUInt32 ();  	uint ramAddr = nds.ReadUInt32 ();  	uint ramSize = nds.ReadUInt32 ();  	uint bssSize = nds.ReadUInt32 ();  	uint sinitInit = nds.ReadUInt32 ();  	uint sinitInitEnd = nds.ReadUInt32 ();  	uint fileId = nds.ReadUInt32 ();  	uint compressedSize = nds.ReadUInt24 ();  	byte compressedBitmask = (byte)nds.ReadByte ();  	nds.Position = fatOffset + 8 * id;  	uint overlayPositionStart = nds.ReadUInt32 ();  	uint overlayPositionEnd = nds.ReadUInt32 ();  	uint overlaySize = overlayPositionEnd - overlayPositionStart;  	if (overlaySize == 0) {  		continue;  	}  	nds.Position = overlayPositionStart;  	byte[] data = new byte[overlaySize];  	nds.Read (data' 0' (int)overlaySize);  	blz blz = new blz ();  	byte[] decData;  	bool compressed = (compressedBitmask & 0x01) == 0x01;  	if (compressed) {  		try {  			decData = blz.BLZ_Decode (data);  		} catch (blzDecodingException) {  			Console.WriteLine ("WARNING: Decompression of Overlay " + (i / 0x20) + " failed!");  			decData = data;  			compressed = false;  		}  	} else {  		decData = data;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("overlay" + (i / 0x20) + "-dec.bin"' decData);  	#endif  	if (ReplaceInData (decData)) {  		modified = true;  		int newOverlaySize;  		int diff;  		// if something was replaced' put it back into the ROM  		if (compressed) {  			Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  			uint newCompressedSize = 0;  			data = blz.BLZ_Encode (decData' 0);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  				RemoveDebugStrings (decData);  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				newOverlaySize = data.Length;  				diff = (int)overlaySize - newOverlaySize;  				if (diff < 0) {  					Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  				}  			}  			// replace compressed size' if it was used before  			if (compressedSize == overlaySize) {  				byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  				nds.Position = pos + i + 0x1C;  				nds.Write (newCompressedSizeBytes' 0' 3);  			}  		} else {  			Console.WriteLine ("Replacing overlay " + id + "...");  			data = decData;  		}  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		nds.Position = overlayPositionStart;  		nds.Write (data' 0' data.Length);  		overlayPositionEnd = (uint)nds.Position;  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  		// new file end offset  		byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  		nds.Position = fatOffset + 8 * id + 4;  		nds.Write (newPosEndData' 0' 4);  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: for (uint i = 0; i < len; i += 0x20) {  	nds.Position = pos + i;  	uint id = nds.ReadUInt32 ();  	uint ramAddr = nds.ReadUInt32 ();  	uint ramSize = nds.ReadUInt32 ();  	uint bssSize = nds.ReadUInt32 ();  	uint sinitInit = nds.ReadUInt32 ();  	uint sinitInitEnd = nds.ReadUInt32 ();  	uint fileId = nds.ReadUInt32 ();  	uint compressedSize = nds.ReadUInt24 ();  	byte compressedBitmask = (byte)nds.ReadByte ();  	nds.Position = fatOffset + 8 * id;  	uint overlayPositionStart = nds.ReadUInt32 ();  	uint overlayPositionEnd = nds.ReadUInt32 ();  	uint overlaySize = overlayPositionEnd - overlayPositionStart;  	if (overlaySize == 0) {  		continue;  	}  	nds.Position = overlayPositionStart;  	byte[] data = new byte[overlaySize];  	nds.Read (data' 0' (int)overlaySize);  	blz blz = new blz ();  	byte[] decData;  	bool compressed = (compressedBitmask & 0x01) == 0x01;  	if (compressed) {  		try {  			decData = blz.BLZ_Decode (data);  		} catch (blzDecodingException) {  			Console.WriteLine ("WARNING: Decompression of Overlay " + (i / 0x20) + " failed!");  			decData = data;  			compressed = false;  		}  	} else {  		decData = data;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("overlay" + (i / 0x20) + "-dec.bin"' decData);  	#endif  	if (ReplaceInData (decData)) {  		modified = true;  		int newOverlaySize;  		int diff;  		// if something was replaced' put it back into the ROM  		if (compressed) {  			Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  			uint newCompressedSize = 0;  			data = blz.BLZ_Encode (decData' 0);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  				RemoveDebugStrings (decData);  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				newOverlaySize = data.Length;  				diff = (int)overlaySize - newOverlaySize;  				if (diff < 0) {  					Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  				}  			}  			// replace compressed size' if it was used before  			if (compressedSize == overlaySize) {  				byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  				nds.Position = pos + i + 0x1C;  				nds.Write (newCompressedSizeBytes' 0' 3);  			}  		} else {  			Console.WriteLine ("Replacing overlay " + id + "...");  			data = decData;  		}  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		nds.Position = overlayPositionStart;  		nds.Write (data' 0' data.Length);  		overlayPositionEnd = (uint)nds.Position;  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  		// new file end offset  		byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  		nds.Position = fatOffset + 8 * id + 4;  		nds.Write (newPosEndData' 0' 4);  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: for (uint i = 0; i < len; i += 0x20) {  	nds.Position = pos + i;  	uint id = nds.ReadUInt32 ();  	uint ramAddr = nds.ReadUInt32 ();  	uint ramSize = nds.ReadUInt32 ();  	uint bssSize = nds.ReadUInt32 ();  	uint sinitInit = nds.ReadUInt32 ();  	uint sinitInitEnd = nds.ReadUInt32 ();  	uint fileId = nds.ReadUInt32 ();  	uint compressedSize = nds.ReadUInt24 ();  	byte compressedBitmask = (byte)nds.ReadByte ();  	nds.Position = fatOffset + 8 * id;  	uint overlayPositionStart = nds.ReadUInt32 ();  	uint overlayPositionEnd = nds.ReadUInt32 ();  	uint overlaySize = overlayPositionEnd - overlayPositionStart;  	if (overlaySize == 0) {  		continue;  	}  	nds.Position = overlayPositionStart;  	byte[] data = new byte[overlaySize];  	nds.Read (data' 0' (int)overlaySize);  	blz blz = new blz ();  	byte[] decData;  	bool compressed = (compressedBitmask & 0x01) == 0x01;  	if (compressed) {  		try {  			decData = blz.BLZ_Decode (data);  		} catch (blzDecodingException) {  			Console.WriteLine ("WARNING: Decompression of Overlay " + (i / 0x20) + " failed!");  			decData = data;  			compressed = false;  		}  	} else {  		decData = data;  	}  	#if DEBUG  	System.IO.File.WriteAllBytes ("overlay" + (i / 0x20) + "-dec.bin"' decData);  	#endif  	if (ReplaceInData (decData)) {  		modified = true;  		int newOverlaySize;  		int diff;  		// if something was replaced' put it back into the ROM  		if (compressed) {  			Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  			uint newCompressedSize = 0;  			data = blz.BLZ_Encode (decData' 0);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  				RemoveDebugStrings (decData);  				data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  				newCompressedSize = (uint)data.Length;  				newOverlaySize = data.Length;  				diff = (int)overlaySize - newOverlaySize;  				if (diff < 0) {  					Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  					Console.WriteLine ("         Patched game may be corrupted!");  				}  			}  			// replace compressed size' if it was used before  			if (compressedSize == overlaySize) {  				byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  				nds.Position = pos + i + 0x1C;  				nds.Write (newCompressedSizeBytes' 0' 3);  			}  		} else {  			Console.WriteLine ("Replacing overlay " + id + "...");  			data = decData;  		}  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		nds.Position = overlayPositionStart;  		nds.Write (data' 0' data.Length);  		overlayPositionEnd = (uint)nds.Position;  		// padding  		for (int j = 0; j < diff; ++j) {  			nds.WriteByte (0xFF);  		}  		// new file end offset  		byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  		nds.Position = fatOffset + 8 * id + 4;  		nds.Write (newPosEndData' 0' 4);  	}  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: nds.Position = fatOffset + 8 * id;  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: if (ReplaceInData (decData)) {  	modified = true;  	int newOverlaySize;  	int diff;  	// if something was replaced' put it back into the ROM  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  		uint newCompressedSize = 0;  		data = blz.BLZ_Encode (decData' 0);  		newCompressedSize = (uint)data.Length;  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		if (diff < 0) {  			Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  			RemoveDebugStrings (decData);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  			}  		}  		// replace compressed size' if it was used before  		if (compressedSize == overlaySize) {  			byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  			nds.Position = pos + i + 0x1C;  			nds.Write (newCompressedSizeBytes' 0' 3);  		}  	} else {  		Console.WriteLine ("Replacing overlay " + id + "...");  		data = decData;  	}  	newOverlaySize = data.Length;  	diff = (int)overlaySize - newOverlaySize;  	nds.Position = overlayPositionStart;  	nds.Write (data' 0' data.Length);  	overlayPositionEnd = (uint)nds.Position;  	// padding  	for (int j = 0; j < diff; ++j) {  		nds.WriteByte (0xFF);  	}  	// new file end offset  	byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  	nds.Position = fatOffset + 8 * id + 4;  	nds.Write (newPosEndData' 0' 4);  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: if (ReplaceInData (decData)) {  	modified = true;  	int newOverlaySize;  	int diff;  	// if something was replaced' put it back into the ROM  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  		uint newCompressedSize = 0;  		data = blz.BLZ_Encode (decData' 0);  		newCompressedSize = (uint)data.Length;  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		if (diff < 0) {  			Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  			RemoveDebugStrings (decData);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  			}  		}  		// replace compressed size' if it was used before  		if (compressedSize == overlaySize) {  			byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  			nds.Position = pos + i + 0x1C;  			nds.Write (newCompressedSizeBytes' 0' 3);  		}  	} else {  		Console.WriteLine ("Replacing overlay " + id + "...");  		data = decData;  	}  	newOverlaySize = data.Length;  	diff = (int)overlaySize - newOverlaySize;  	nds.Position = overlayPositionStart;  	nds.Write (data' 0' data.Length);  	overlayPositionEnd = (uint)nds.Position;  	// padding  	for (int j = 0; j < diff; ++j) {  		nds.WriteByte (0xFF);  	}  	// new file end offset  	byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  	nds.Position = fatOffset + 8 * id + 4;  	nds.Write (newPosEndData' 0' 4);  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: if (ReplaceInData (decData)) {  	modified = true;  	int newOverlaySize;  	int diff;  	// if something was replaced' put it back into the ROM  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  		uint newCompressedSize = 0;  		data = blz.BLZ_Encode (decData' 0);  		newCompressedSize = (uint)data.Length;  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		if (diff < 0) {  			Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  			RemoveDebugStrings (decData);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  			}  		}  		// replace compressed size' if it was used before  		if (compressedSize == overlaySize) {  			byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  			nds.Position = pos + i + 0x1C;  			nds.Write (newCompressedSizeBytes' 0' 3);  		}  	} else {  		Console.WriteLine ("Replacing overlay " + id + "...");  		data = decData;  	}  	newOverlaySize = data.Length;  	diff = (int)overlaySize - newOverlaySize;  	nds.Position = overlayPositionStart;  	nds.Write (data' 0' data.Length);  	overlayPositionEnd = (uint)nds.Position;  	// padding  	for (int j = 0; j < diff; ++j) {  		nds.WriteByte (0xFF);  	}  	// new file end offset  	byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  	nds.Position = fatOffset + 8 * id + 4;  	nds.Write (newPosEndData' 0' 4);  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: if (ReplaceInData (decData)) {  	modified = true;  	int newOverlaySize;  	int diff;  	// if something was replaced' put it back into the ROM  	if (compressed) {  		Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  		uint newCompressedSize = 0;  		data = blz.BLZ_Encode (decData' 0);  		newCompressedSize = (uint)data.Length;  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		if (diff < 0) {  			Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  			RemoveDebugStrings (decData);  			data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  			newCompressedSize = (uint)data.Length;  			newOverlaySize = data.Length;  			diff = (int)overlaySize - newOverlaySize;  			if (diff < 0) {  				Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  				Console.WriteLine ("         Patched game may be corrupted!");  			}  		}  		// replace compressed size' if it was used before  		if (compressedSize == overlaySize) {  			byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  			nds.Position = pos + i + 0x1C;  			nds.Write (newCompressedSizeBytes' 0' 3);  		}  	} else {  		Console.WriteLine ("Replacing overlay " + id + "...");  		data = decData;  	}  	newOverlaySize = data.Length;  	diff = (int)overlaySize - newOverlaySize;  	nds.Position = overlayPositionStart;  	nds.Write (data' 0' data.Length);  	overlayPositionEnd = (uint)nds.Position;  	// padding  	for (int j = 0; j < diff; ++j) {  		nds.WriteByte (0xFF);  	}  	// new file end offset  	byte[] newPosEndData = BitConverter.GetBytes (overlayPositionEnd);  	nds.Position = fatOffset + 8 * id + 4;  	nds.Write (newPosEndData' 0' 4);  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: if (compressed) {  	Console.WriteLine ("Replacing and recompressing overlay " + id + "...");  	uint newCompressedSize = 0;  	data = blz.BLZ_Encode (decData' 0);  	newCompressedSize = (uint)data.Length;  	newOverlaySize = data.Length;  	diff = (int)overlaySize - newOverlaySize;  	if (diff < 0) {  		Console.WriteLine ("Removing known debug strings and recompressing overlay " + id + "...");  		RemoveDebugStrings (decData);  		data = blz.BLZ_Encode (decData' 0' supressWarnings: true);  		newCompressedSize = (uint)data.Length;  		newOverlaySize = data.Length;  		diff = (int)overlaySize - newOverlaySize;  		if (diff < 0) {  			Console.WriteLine ("WARNING: Recompressed overlay is " + -diff + " bytes bigger than original!");  			Console.WriteLine ("         Patched game may be corrupted!");  		}  	}  	// replace compressed size' if it was used before  	if (compressedSize == overlaySize) {  		byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  		nds.Position = pos + i + 0x1C;  		nds.Write (newCompressedSizeBytes' 0' 3);  	}  } else {  	Console.WriteLine ("Replacing overlay " + id + "...");  	data = decData;  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: if (compressedSize == overlaySize) {  	byte[] newCompressedSizeBytes = BitConverter.GetBytes (newCompressedSize);  	nds.Position = pos + i + 0x1C;  	nds.Write (newCompressedSizeBytes' 0' 3);  }  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: nds.Write (newCompressedSizeBytes' 0' 3);  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: nds.Position = fatOffset + 8 * id + 4;  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: nds.Position = fatOffset + 8 * id + 4;  
Magic Number,WfcPatcher,Program,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Program.cs,PatchOverlay,The following statement contains a magic number: nds.Write (newPosEndData' 0' 4);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (UInt16)((x << 8) | (x >> 8));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (UInt16)((x << 8) | (x >> 8));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 24) | ((x << 8) & 0x00FF0000) | ((x >> 8) & 0x0000FF00) | (x >> 24);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 24) | ((x << 8) & 0x00FF0000) | ((x >> 8) & 0x0000FF00) | (x >> 24);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 24) | ((x << 8) & 0x00FF0000) | ((x >> 8) & 0x0000FF00) | (x >> 24);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 24) | ((x << 8) & 0x00FF0000) | ((x >> 8) & 0x0000FF00) | (x >> 24);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,SwapEndian,The following statement contains a magic number: return x = (x << 56) | ((x << 40) & 0x00FF000000000000) | ((x << 24) & 0x0000FF0000000000) | ((x << 8) & 0x000000FF00000000) | ((x >> 8) & 0x00000000FF000000) | ((x >> 24) & 0x0000000000FF0000) | ((x >> 40) & 0x000000000000FF00) | (x >> 56);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ParseDecOrHexToByte,The following statement contains a magic number: if (s.StartsWith ("0x")) {  	s = s.Substring (2);  	return Byte.Parse (s' System.Globalization.NumberStyles.HexNumber);  } else {  	return Byte.Parse (s);  }  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ParseDecOrHexToByte,The following statement contains a magic number: s = s.Substring (2);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,HexStringToByteArray,The following statement contains a magic number: if (hex.Length % 2 == 1)  	throw new Exception ("The binary key cannot have an odd number of digits");  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,HexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < hex.Length >> 1; ++i) {  	arr [i] = (byte)((GetHexVal (hex [i << 1]) << 4) + (GetHexVal (hex [(i << 1) + 1])));  }  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,HexStringToByteArray,The following statement contains a magic number: arr [i] = (byte)((GetHexVal (hex [i << 1]) << 4) + (GetHexVal (hex [(i << 1) + 1])));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : (val < 97 ? 55 : 87));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : (val < 97 ? 55 : 87));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : (val < 97 ? 55 : 87));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : (val < 97 ? 55 : 87));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : (val < 97 ? 55 : 87));  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ToUInt24,The following statement contains a magic number: return (uint)(b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ToUInt24,The following statement contains a magic number: return (uint)(b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetBytesForUInt24,The following statement contains a magic number: b [1] = (byte)((Number >> 8) & 0xFF);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetBytesForUInt24,The following statement contains a magic number: b [2] = (byte)((Number >> 16) & 0xFF);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetBytesForUInt24,The following statement contains a magic number: b [2] = (byte)((Number >> 16) & 0xFF);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetTextUnicode,The following statement contains a magic number: for (int i = 0; i < MaxByteLength; i += 2) {  	ushort ch = BitConverter.ToUInt16 (File' Pointer + i);  	if (ch == 0 || ch == 0xFFFF) {  		break;  	}  	sb.Append ((char)ch);  }  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GetTextUnicode,The following statement contains a magic number: i += 2
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,UnixTimeToDateTime,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddSeconds (unixTime).ToLocalTime ();  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,DateTimeToUnixTime,The following statement contains a magic number: return (ulong)(time - new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToLocalTime ()).TotalSeconds;  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,PS3TimeToDateTime,The following statement contains a magic number: return new DateTime (1' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddMilliseconds (PS3Time / 1000).ToLocalTime ();  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUInt32,The following statement contains a magic number: return (uint)(b4 << 24 | b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUInt32,The following statement contains a magic number: return (uint)(b4 << 24 | b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUInt32,The following statement contains a magic number: return (uint)(b4 << 24 | b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUInt24,The following statement contains a magic number: return (uint)(b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUInt24,The following statement contains a magic number: return (uint)(b3 << 16 | b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(b2 << 8 | b1);  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUTF16Nullterm,The following statement contains a magic number: while (!(b0 == 0 && b1 == 0) && b1 != -1) {  	b [0] = (byte)b0;  	b [1] = (byte)b1;  	sb.Append (Encoding.Unicode.GetString (b' 0' 2));  	b0 = s.ReadByte ();  	b1 = s.ReadByte ();  }  
Magic Number,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,ReadUTF16Nullterm,The following statement contains a magic number: sb.Append (Encoding.Unicode.GetString (b' 0' 2));  
Missing Default,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GuessFileExtension,The following switch statement is missing a default case: switch (magic32) {  case 0x46464952:  	return ".wav";  case 0x474E5089:  	return ".png";  case 0x5367674F:  	return ".ogg";  }  
Missing Default,WfcPatcher,Util,F:\newReposMay17\AdmiralCurtiss_WfcPatcher\Util.cs,GuessFileExtension,The following switch statement is missing a default case: switch (magic16) {  case 0x4D42:  	return ".bmp";  }  
