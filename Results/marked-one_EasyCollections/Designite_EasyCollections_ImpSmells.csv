Implementation smell,Namespace,Class,File,Method,Description
Long Statement,EasyCollections,Array2,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array2\Array2.cs,IsOutOfBounds,The length of the statement  "	return index == null || index.Count <= 0 || index.Count != ArraySize.Count || index.Get (0) < 0 || index.Get (1) < 0 || index.Get (0) >= ArraySize.Get (0) || index.Get (1) >= ArraySize.Get (1); " is 193.
Long Statement,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,IsOutOfBounds,The length of the statement  "	return index == null || index.Count <= 0 || index.Count != ArraySize.Count || index.Get (0) < 0 || index.Get (1) < 0 || index.Get (2) < 0 || index.Get (0) >= Size.Get (0) || index.Get (1) >= Size.Get (1) || index.Get (2) >= Size.Get (2); " is 237.
Complex Conditional,EasyCollections,MultiArray,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\MultiArray.cs,IsOutOfBounds,The conditional expression  "indexes == null || indexes.Length == 0 || indexes.Length != ArraySize.Count || ArraySize.Get () == 0"  is complex.
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,ComputePosition,The following statement contains a magic number: return (index.Get (0) * ArraySize.Get (1) + index.Get (1)) * ArraySize.Get (2) + index.Get (2);  
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,ComputePosition,The following statement contains a magic number: return (index.Get (0) * ArraySize.Get (1) + index.Get (1)) * ArraySize.Get (2) + index.Get (2);  
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,IsOutOfBounds,The following statement contains a magic number: return index == null || index.Count <= 0 || index.Count != ArraySize.Count || index.Get (0) < 0 || index.Get (1) < 0 || index.Get (2) < 0 || index.Get (0) >= Size.Get (0) || index.Get (1) >= Size.Get (1) || index.Get (2) >= Size.Get (2);  
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,IsOutOfBounds,The following statement contains a magic number: return index == null || index.Count <= 0 || index.Count != ArraySize.Count || index.Get (0) < 0 || index.Get (1) < 0 || index.Get (2) < 0 || index.Get (0) >= Size.Get (0) || index.Get (1) >= Size.Get (1) || index.Get (2) >= Size.Get (2);  
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,IsOutOfBounds,The following statement contains a magic number: return index == null || index.Count <= 0 || index.Count != ArraySize.Count || index.Get (0) < 0 || index.Get (1) < 0 || index.Get (2) < 0 || index.Get (0) >= Size.Get (0) || index.Get (1) >= Size.Get (1) || index.Get (2) >= Size.Get (2);  
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,ComputePosition,The following statement contains a magic number: return (i * ArraySize.Get (1) + j) * ArraySize.Get (2) + k;  
Magic Number,EasyCollections,Array3,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\Array3\Array3.cs,IsOutOfBounds,The following statement contains a magic number: return i < 0 || j < 0 || k < 0 || i >= ArraySize.Get (0) || j >= ArraySize.Get (1) || k >= ArraySize.Get (2);  
Magic Number,EasyCollections,BinaryHeap,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\BinaryHeap\BinaryHeap.cs,BubbleUp,The following statement contains a magic number: while (index > 0) {  	var parentIndex = (index - 1) / 2;  	if (0 >= _comparer.Compare (_elements [parentIndex]' element))  		break;  	_elements [index] = _elements [parentIndex];  	index = parentIndex;  }  
Magic Number,EasyCollections,BinaryHeap,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\BinaryHeap\BinaryHeap.cs,BubbleDown,The following statement contains a magic number: while (index < halfCount) {  	var leftChildIndex = (2 * index) + 1;  	var rightChildIndex = leftChildIndex + 1;  	var chosenChildIndex = leftChildIndex;  	if (leftChildIndex < lastIndex) {  		if (0 < _comparer.Compare (elements [leftChildIndex]' elements [rightChildIndex]))  			chosenChildIndex = rightChildIndex;  	}  	if (0 <= _comparer.Compare (elements [chosenChildIndex]' lastElement))  		break;  	elements [index] = elements [chosenChildIndex];  	index = chosenChildIndex;  }  
Magic Number,EasyCollections,Index,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Index.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	foreach (var index in Indexes)  		hash = hash * 23 + index;  	return hash;  }  
Magic Number,EasyCollections,Index,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Index.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	foreach (var index in Indexes)  		hash = hash * 23 + index;  	return hash;  }  
Magic Number,EasyCollections,Index,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Index.cs,GetHashCode,The following statement contains a magic number: foreach (var index in Indexes)  	hash = hash * 23 + index;  
Magic Number,EasyCollections,Index,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Index.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + index;  
Magic Number,EasyCollections,Size,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Size.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	foreach (var size in _sizes)  		hash = hash * 23 + size;  	return hash;  }  
Magic Number,EasyCollections,Size,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Size.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	foreach (var size in _sizes)  		hash = hash * 23 + size;  	return hash;  }  
Magic Number,EasyCollections,Size,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Size.cs,GetHashCode,The following statement contains a magic number: foreach (var size in _sizes)  	hash = hash * 23 + size;  
Magic Number,EasyCollections,Size,C:\repos\marked-one_EasyCollections\Projects\EasyCollections\MultiArray\Size.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + size;  
