Implementation smell,Namespace,Class,File,Method,Description
Long Method,MSBuild.Community.Tasks,Xslt,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xslt\Xslt.cs,Execute,The method has 117 lines of code.
Long Method,MSBuild.Community.Tasks,FxCop,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FxCop.cs,GenerateCommandLineCommands,The method has 100 lines of code.
Long Method,MSBuild.Community.Tasks,MV,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\MV.cs,Execute,The method has 106 lines of code.
Long Method,MSBuild.Community.Tasks,Script,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Script.cs,Execute,The method has 114 lines of code.
Long Method,MSBuild.Community.Tasks.IIS,AppPoolCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolCreate.cs,CreateAppPool,The method has 104 lines of code.
Long Method,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,CreateVirtualDirectory,The method has 116 lines of code.
Complex Method,MSBuild.Community.Tasks.AspNet,InstallAspNet,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\AspNet\InstallAspNet.cs,IsValidPropertyCombinations,Cyclomatic complexity of the method is 8
Complex Method,MSBuild.Community.Tasks,Attrib,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Attrib.cs,UpdateAttributes,Cyclomatic complexity of the method is 15
Complex Method,MSBuild.Community.Tasks,DeleteTree,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\DeleteTree.cs,MatchDirectories,Cyclomatic complexity of the method is 10
Complex Method,MSBuild.Community.Tasks,PathUtil,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\PathUtil.cs,RelativePathTo,Cyclomatic complexity of the method is 11
Complex Method,MSBuild.Community.Tasks,RoboCopy,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\RoboCopy.cs,GenerateCommandLineCommands,Cyclomatic complexity of the method is 25
Complex Method,MSBuild.Community.Tasks,ILMerge,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ILMerge\ILMerge.cs,GenerateCommandLineCommands,Cyclomatic complexity of the method is 15
Complex Method,MSBuild.Community.Tasks,FileUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FileUpdate.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,MSBuild.Community.Tasks,FxCop,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FxCop.cs,GenerateCommandLineCommands,Cyclomatic complexity of the method is 26
Complex Method,MSBuild.Community.Tasks,Mail,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Mail.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,MSBuild.Community.Tasks,MV,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\MV.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,MSBuild.Community.Tasks,Script,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Script.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,MSBuild.Community.Tasks,XmlUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\XmlUpdate.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,MSBuild.Community.Tasks.JavaScript,CssCompress,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\CssCompress.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,MSBuild.Community.Tasks.NuGet,NuGetPack,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\NuGet\NuGetPack.cs,GenerateCommandLineCommands,Cyclomatic complexity of the method is 10
Complex Method,MSBuild.Community.Tasks.Sandcastle,Sandcastle,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Sandcastle\Sandcastle.cs,CreateWorkDirectories,Cyclomatic complexity of the method is 13
Complex Method,MSBuild.Community.Tasks.Sandcastle,Sandcastle,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Sandcastle\Sandcastle.cs,CreateChm,Cyclomatic complexity of the method is 9
Complex Method,MSBuild.Community.Tasks.SourceServer,SourceIndexBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\SourceIndexBase.cs,CreateSymbolFile,Cyclomatic complexity of the method is 8
Complex Method,MSBuild.Community.Tasks.Subversion,SvnClient,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Subversion\SvnClient.cs,GenerateSvnArguments,Cyclomatic complexity of the method is 12
Complex Method,MSBuild.Community.Tasks.SymbolServer,SymStore,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SymbolServer\SymStore.cs,GenerateCommandLineCommands,Cyclomatic complexity of the method is 10
Complex Method,MSBuild.Community.Tasks.Tfs,TfsClient,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\TfsClient.cs,GenerateArguments,Cyclomatic complexity of the method is 17
Complex Method,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,Execute,Cyclomatic complexity of the method is 11
Complex Method,MSBuild.Community.Tasks.IIS,WebDirectoryScriptMap,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryScriptMap.cs,Execute,Cyclomatic complexity of the method is 11
Complex Method,MSBuild.Community.Tasks.IIS,AppPoolCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolCreate.cs,CreateAppPool,Cyclomatic complexity of the method is 10
Long Parameter List,MSBuild.Community.Tasks,EmbedNativeResource,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\EmbedNativeResource.cs,UpdateResource,The method has 6 parameters. Parameters: hUpdate' lpType' lpName' wLanguage' lpData' cbData
Long Parameter List,MSBuild.Community.Tasks.Fusion,IAssemblyCacheItem,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\IAssemblyCacheItem.cs,CreateStream,The method has 6 parameters. Parameters: flags' streamName' format' formatFlags' stream' maxSize
Long Identifier,MSBuild.Community.Tasks,AssemblyInfo,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\AssemblyInfo.cs,,The length of the parameter AssemblyInformationalVersionName is 32.
Long Identifier,MSBuild.Community.Tasks,AssemblyInfo,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\AssemblyInfo.cs,,The length of the parameter AllowPartiallyTrustedCallersName is 32.
Long Identifier,MSBuild.Community.Tasks,GetSolutionProjects,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Solution\GetSolutionProjects.cs,,The length of the parameter ExtractProjectsFromSolutionRegex is 32.
Long Identifier,MSBuild.Community.Tasks.DependencyGraph,DependencyGraph,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\DependencyGraph\DependencyGraph.cs,,The length of the parameter _excludeProjectReferencesRegex is 30.
Long Identifier,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,,The length of the parameter ignoreMissingSubstitutionsRoot is 30.
Long Identifier,MSBuild.Community.Tasks.IIS,AppPoolCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolCreate.cs,,The length of the parameter mDisallowRotationOnConfigChange is 31.
Long Identifier,MSBuild.Community.Tasks.IIS,AppPoolCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolCreate.cs,,The length of the parameter mRapidFailProtectionMaxCrashes is 30.
Long Identifier,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,,The length of the parameter mAuthPersistSingleRequestIfProxy is 32.
Long Identifier,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,,The length of the parameter mAuthPersistSingleRequestAlwaysIfProxy is 38.
Long Statement,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,NamePath,The length of the statement  "			if (path.EndsWith(Path.DirectorySeparatorChar.ToString()) || path.EndsWith(Path.AltDirectorySeparatorChar.ToString())) { " is 120.
Long Statement,MSBuild.Community.Tasks,InnoSetup,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\InnoSetup.cs,GenerateFullPathToTool,The length of the statement  "            return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)' string.Concat(@"Inno Setup 5\"' this.ToolName)); " is 135.
Long Statement,MSBuild.Community.Tasks,Xslt,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xslt\Xslt.cs,Execute,The length of the statement  "				Log.LogErrorFromException(ex' false' true' new Uri(ex.SourceUri).LocalPath + '(' + ex.LineNumber + ''' + ex.LinePosition + ')'); " is 128.
Long Statement,MSBuild.Community.Tasks,Xslt,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xslt\Xslt.cs,Execute,The length of the statement  "				Log.LogErrorFromException(ex' false' true' new Uri(ex.SourceUri).LocalPath + '(' + ex.LineNumber + ''' + ex.LinePosition + ')'); " is 128.
Long Statement,MSBuild.Community.Tasks,ToolPathUtil,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ToolPathUtil.cs,FindInRegistry,The length of the statement  "                RegistryKey key = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\" + toolName' false); " is 126.
Long Statement,MSBuild.Community.Tasks,Version,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Version.cs,attemptedUseOfObsoleteBuildType,The length of the statement  "                Log.LogError("Date is no longer a valid BuildType. Use the Time task instead. See http://msbuildtasks.tigris.org/ReleaseNotes.html#v12_Version"); " is 145.
Long Statement,MSBuild.Community.Tasks.Git,GitBranch,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Git\GitBranch.cs,ParseStatusLineOutput,The length of the statement  "			return singleLine.Substring(indexOfBranch + branchLength + 1' singleLine.Length - indexOfBranch - branchLength - 1).Trim(); " is 123.
Long Statement,MSBuild.Community.Tasks.Git,GitClient,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Git\GitClient.cs,FindToolPath,The length of the statement  "                throw new Exception("Could not find git.exe. Looked in PATH locations and various common folders inside Program Files as well as LocalPath."); " is 142.
Long Statement,MSBuild.Community.Tasks.JavaScript,CssCompress,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\CssCompress.cs,Execute,The length of the statement  "                Log.LogError("No destination specified for compression. Please supply either '{0}' or '{1}'."' "DestinationFiles"' "DestinationDirectory"); " is 139.
Long Statement,MSBuild.Community.Tasks.Oracle,TnsParser,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Oracle\TnsParser.cs,FindEntry,The length of the statement  "            Match match = Regex.Match(content' findEntryPattern' RegexOptions.Multiline | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 142.
Long Statement,MSBuild.Community.Tasks.SourceServer,SourceIndexBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\SourceIndexBase.cs,CreateSymbolFile,The length of the statement  "                    Log.LogError("Error getting source files from '{0}'.{1}"' symbolFile.File.Name' srcTool.SourceFiles != null && srcTool.SourceFiles.Length > 0 ? srcTool.SourceFiles[0] : string.Empty);                 " is 183.
Long Statement,MSBuild.Community.Tasks.SourceServer,SourceIndexBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\SourceIndexBase.cs,CreateSymbolFile,The length of the statement  "                    Log.LogWarning("'{0}' has no source information inside the pdb. Check your pdb settings or perhaps your assembly doesn't have any real lines of code in it?"' symbolFile.File.Name' srcTool.SourceFiles != null && srcTool.SourceFiles.Length > 0 ? srcTool.SourceFiles[0] : string.Empty);                 " is 283.
Long Statement,MSBuild.Community.Tasks.SourceServer,SvnSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\SvnSourceIndex.cs,AddProperties,The length of the statement  "                Log.LogWarning("Source file '{0}' has pending changes. Index may point to incorrect revision."' sourceFile.File.FullName); " is 122.
Long Statement,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,AddSourceProperties,The length of the statement  "            var itemInformation = GetItemInformation(symbolFile.SourceFiles.Select(item => new TaskItem(item.File.FullName)).Cast<ITaskItem>()); " is 132.
Long Statement,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,AddSourceProperties,The length of the statement  "                    throw new KeyNotFoundException(string.Format("Could not find a local information entry for |{0}|.\n{1}."' key' allKeys)); " is 121.
Long Statement,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,CreateSourceIndexFile,The length of the statement  "                writer.WriteLine("DATETIME={0}"' DateTime.UtcNow.ToString("ddd MMM dd HH:mm:ss yyyy")); // strange format used by TFS' just copied in case its used " is 147.
Long Statement,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,CreateSourceIndexFile,The length of the statement  "                writer.WriteLine(@"TFS_EXTRACT_CMD=tf.exe view /version:%var4% /noprompt ""$%var3%"" /server:%fnvar%(%var2%) /console >%srcsrvtrg%"); " is 133.
Long Statement,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,GetItemInformation,The length of the statement  "            Log.LogMessage("Success {0}' exit code {1} after {2} attempts."' success.ToString().ToLower()' client.ExitCode' attempt); " is 121.
Long Statement,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,GetItemSpec,The length of the statement  "                        ReplaceString(value' this.TeamProjectRootDirectory' string.Empty' StringComparison.CurrentCultureIgnoreCase).Replace('\\'' '/')); " is 129.
Long Statement,MSBuild.Community.Tasks.Subversion,SvnCopy,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Subversion\SvnCopy.cs,GenerateSvnCommand,The length of the statement  "            return String.Format("{0} \"{2}\" \"{3}\"{1}"' base.GenerateSvnCommand()' BuildTree ? " --parents" : ""' sourcePath' destinationPath); " is 134.
Long Statement,MSBuild.Community.Tasks.Subversion,SvnClient,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Subversion\SvnClient.cs,FindToolPath,The length of the statement  "                throw new Exception("Could not find svn.exe.  Looked in PATH locations and various common folders inside Program Files."); " is 122.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,Execute,The length of the statement  "            if (contentPathUsedByTask.Equals(substitutionsPathUsedByTask' StringComparison.InvariantCultureIgnoreCase) && (contentRoot == substitutionsRoot)) " is 145.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,Execute,The length of the statement  "                Log.LogError("The SubstitutionsRoot must be different from the ContentRoot when the ContentFile and SubstitutionsFile are the same."); " is 134.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,Execute,The length of the statement  "                Log.LogError("Cannot create a new document root node because one already exists. Make sure to set the SubstitutionsRoot property."); " is 132.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,setAttributeValue,The length of the statement  "                Log.LogMessage(MessageImportance.Low' "Creating attribute '{0}' on '{1}'"' attributeName' getFullPathOfNode(modifiedNode)); " is 123.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,setAttributeValue,The length of the statement  "            Log.LogMessage("Setting attribute '{0}' to '{1}' on '{2}'"' targetAttribute.Name' targetAttribute.Value' getFullPathOfNode(modifiedNode)); " is 138.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,modifyNode,The length of the statement  "                targetNode = destinationParentNode.AppendChild(mergedDocument.CreateNode(XmlNodeType.Element' nodeToModify.Name' nodeToModify.NamespaceURI)); " is 141.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,modifyNode,The length of the statement  "                    XmlAttribute keyAttributeOnNewNode = targetNode.Attributes.Append(mergedDocument.CreateAttribute(keyAttribute.LocalName)); " is 122.
Long Statement,MSBuild.Community.Tasks.Xml,XmlMassUpdate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlMassUpdate.cs,locateTargetNode,The length of the statement  "                Log.LogMessage(MessageImportance.Low' "Using keyed attribute '{0}={1}' to locate node '{2}'"' keyAttribute.LocalName' keyAttribute.Value' getFullPathOfNode(parentNode) + "/" + qname); " is 183.
Long Statement,MSBuild.Community.Tasks.Xml,XmlQuery,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlQuery.cs,Execute,The length of the statement  "            //Expressions that return a node set can be used in the Select and Evaluate methods. Expressions that return a Boolean' number' or string can be used in the Evaluate method. " is 173.
Long Statement,MSBuild.Community.Tasks.Xml,XmlTaskHelper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlTaskHelper.cs,LoadNamespaceDefinitionItems,The length of the statement  "                string[] definitionParts = namespaceDefinition.ToString().Split(new char[] { '=' }' 2' StringSplitOptions.RemoveEmptyEntries); " is 126.
Long Statement,MSBuild.Community.Tasks.Xml,XmlTaskHelper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlTaskHelper.cs,LoadNamespaceDefinitionItems,The length of the statement  "                    throw new ArgumentException("Each namespace definition must include a prefix' followed by an equal sign' followed by a Uri. Example: custom=http://example.com"' "NamespaceDefinitions"); " is 185.
Long Statement,MSBuild.Community.Tasks.IIS,WebDirectoryScriptMap,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryScriptMap.cs,Execute,The length of the statement  "                executablePath = ToolLocationHelper.GetPathToDotNetFrameworkFile("aspnet_isapi.dll"' TargetDotNetFrameworkVersion.VersionLatest); " is 129.
Long Statement,MSBuild.Community.Tasks.IIS,WebDirectoryScriptMap,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryScriptMap.cs,Execute,The length of the statement  "                Log.LogMessage(MessageImportance.Normal' Properties.Resources.WebDirectoryScriptMapUpdate' Extension' VirtualDirectoryName' ServerName); " is 136.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolCreate.cs,CreateAppPool,The length of the statement  "			Log.LogMessage(MessageImportance.Normal' "Creating application pool named {0}/{1}:"' IISAppPoolPath' ApplicationPoolName); " is 122.
Long Statement,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,CreateVirtualDirectory,The length of the statement  "				Log.LogMessage(MessageImportance.Normal' "Creating virtual directory named {0} on {1}:"' VirtualDirectoryName' ServerName); " is 123.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolDelete,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolDelete.cs,DeleteAppPool,The length of the statement  "			Log.LogMessage(MessageImportance.Normal' "Deleting application pool named {0}/{1}:"' IISAppPoolPath' ApplicationPoolName); " is 122.
Long Statement,MSBuild.Community.Tasks.IIS,WebDirectoryDelete,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryDelete.cs,DeleteVirtualDirectory,The length of the statement  "				Log.LogMessage(MessageImportance.Normal' "Deleting virtual directory '{0}' on '{1}:{2}'."' VirtualDirectoryName' ServerName' ServerPort); " is 137.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolController.cs,ControlApplicationPool,The length of the statement  "				Log.LogError("Failed {0} application pool \"{1}\" on \"{2}\"."' GetActionInProgress()' ApplicationPoolName' ServerName); " is 120.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolController.cs,ExecuteAppPoolAction,The length of the statement  "					this.Log.LogMessage(MessageImportance.Normal' "Already stopped or stopping \"{0}\" on \"{1}\"."' this.ApplicationPoolName' this.ServerName); " is 140.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolController.cs,ExecuteAppPoolAction,The length of the statement  "					this.Log.LogMessage(MessageImportance.Normal' "Stopping \"{0}\" on \"{1}\"..."' this.ApplicationPoolName' this.ServerName); " is 123.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolController.cs,ExecuteAppPoolAction,The length of the statement  "					this.Log.LogMessage(MessageImportance.Normal' "Already started or starting \"{0}\" on \"{1}\"."' this.ApplicationPoolName' this.ServerName); " is 140.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolController.cs,ExecuteAppPoolAction,The length of the statement  "					this.Log.LogMessage(MessageImportance.Normal' "Starting \"{0}\" on \"{1}\"..."' this.ApplicationPoolName' this.ServerName); " is 123.
Long Statement,MSBuild.Community.Tasks.IIS,AppPoolController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\AppPoolController.cs,ExecuteAppPoolAction,The length of the statement  "				this.Log.LogMessage(MessageImportance.Normal' "Recycling \"{0}\" on \"{1}\"..."' this.ApplicationPoolName' this.ServerName); " is 124.
Complex Conditional,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Action,The conditional expression  "bb == '/' && (aa == '(' || aa == ''' || aa == '=')"  is complex.
Complex Conditional,MSBuild.Community.Tasks.Xml,XmlQuery,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlQuery.cs,validParameters,The conditional expression  "(lines == null && xmlFileName == null) || (lines != null && xmlFileName != null)"  is complex.
Empty Catch Block,MSBuild.Community.Tasks,Beep,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Beep\Beep.cs,Execute,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,Beep,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Beep\Beep.cs,Execute,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,Sound,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Sound\Sound.cs,Execute,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,Sound,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Sound\Sound.cs,Execute,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,Sound,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Sound\Sound.cs,Execute,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,Script,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Script.cs,Execute,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,ToolPathUtil,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ToolPathUtil.cs,SafeFileExists,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks,ToolPathUtil,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ToolPathUtil.cs,FindInRegistry,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,CreateVirtualDirectory,The method has an empty catch block.
Empty Catch Block,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,CreateVirtualDirectory,The method has an empty catch block.
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 60))                  return System.Math.Round((double)bytes / (1 << 60)' rounding) + " EB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 60))                  return System.Math.Round((double)bytes / (1 << 60)' rounding) + " EB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 50))                  return System.Math.Round((double)bytes / (1 << 50)' rounding) + " PB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 50))                  return System.Math.Round((double)bytes / (1 << 50)' rounding) + " PB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 40))                  return System.Math.Round((double)bytes / (1 << 40)' rounding) + " TB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 40))                  return System.Math.Round((double)bytes / (1 << 40)' rounding) + " TB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 30))                  return System.Math.Round((double)bytes / (1 << 30)' rounding) + " GB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 30))                  return System.Math.Round((double)bytes / (1 << 30)' rounding) + " GB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 20))                  return System.Math.Round((double)bytes / (1 << 20)' rounding) + " MB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 20))                  return System.Math.Round((double)bytes / (1 << 20)' rounding) + " MB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 10))                  return System.Math.Round((double)bytes / (1 << 10)' rounding) + " KB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatByte,The following statement contains a magic number: if (bytes >= (1 << 10))                  return System.Math.Round((double)bytes / (1 << 10)' rounding) + " KB";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 60))                  return System.Math.Round(bytesPerSecounds / (1 << 60)' rounding) + " EB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 60))                  return System.Math.Round(bytesPerSecounds / (1 << 60)' rounding) + " EB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 50))                  return System.Math.Round(bytesPerSecounds / (1 << 50)' rounding) + " PB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 50))                  return System.Math.Round(bytesPerSecounds / (1 << 50)' rounding) + " PB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 40))                  return System.Math.Round(bytesPerSecounds / (1 << 40)' rounding) + " TB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 40))                  return System.Math.Round(bytesPerSecounds / (1 << 40)' rounding) + " TB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 30))                  return System.Math.Round(bytesPerSecounds / (1 << 30)' rounding) + " GB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 30))                  return System.Math.Round(bytesPerSecounds / (1 << 30)' rounding) + " GB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 20))                  return System.Math.Round(bytesPerSecounds / (1 << 20)' rounding) + " MB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: if (bytesPerSecounds >= (1 << 20))                  return System.Math.Round(bytesPerSecounds / (1 << 20)' rounding) + " MB/s";
Magic Number,MSBuild.Community.Tasks,ByteDescriptions,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ByteDescriptions.cs,FormatBytesPerSecond,The following statement contains a magic number: return System.Math.Round(bytesPerSecounds / (1 << 10)' rounding) + " KB/s";
Magic Number,MSBuild.Community.Tasks,Computer,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Computer\Computer.cs,Execute,The following statement contains a magic number: try              {                  _name = Dns.GetHostName();                  IPAddress[] ipAddresses = Dns.GetHostAddresses(_name);                  IPAddress ipAddress = ipAddresses.FirstOrDefault();                  _ipAddress = ipAddress != null ? ipAddress.ToString() : "";                  IPAddress ipAddressV4 = ipAddresses.FirstOrDefault(a => a.AddressFamily == AddressFamily.InterNetwork);                  _ipAddressV4 = ipAddressV4 != null ? ipAddressV4.ToString() : "";                  _osPlatform = Environment.OSVersion.Platform.ToString();                  _osVersion = Environment.OSVersion.Version.ToString(2);                    return true;              }              catch (Exception ex)              {                  Log.LogErrorFromException(ex);                  return false;              }
Magic Number,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,FtpUpload,The following statement contains a magic number: _timeout = 7000;
Magic Number,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,Execute,The following statement contains a magic number: int MAX_RETRIES = 3;
Magic Number,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,Execute,The following statement contains a magic number: for (int i = 0; i < _localFiles.Length; i++) {  				for (int retry = 0; retry <= MAX_RETRIES; retry++) {  					bool success = UploadFile(_localFiles[i].ItemSpec' _remoteFiles[i].ItemSpec' i < MAX_RETRIES);  					if (success) {  						break;  					}  					if (retry < MAX_RETRIES) {  						Log.LogMessage("File failed to upload: {0}"' _localFiles[i].ItemSpec);  						if (retry > 1) {  							Log.LogMessage("Taking a break for a second.");  							Thread.Sleep(TimeSpan.FromSeconds(1.5));  						}  						Log.LogMessage("Starting retry {0} of {1}"' retry + 1' MAX_RETRIES);  					} else {  						Log.LogError("Failed all retries try on {0}."' _localFiles[i].ItemSpec);  						allSuccess = false;  					}  				}  			}
Magic Number,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,UploadFile,The following statement contains a magic number: const int bufferLength = 2048;
Magic Number,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,UploadFile,The following statement contains a magic number: try {  				Stopwatch watch = Stopwatch.StartNew();  				using (Stream fileStream = localFile.OpenRead()'  							requestStream = request.GetRequestStream()) {  					do {  						readBytes = fileStream.Read(buffer' 0' bufferLength);  						requestStream.Write(buffer' 0' readBytes);  						wroteBytes += readBytes;    						// log progress every 5 seconds  						if (watch.ElapsedMilliseconds - progressUpdated > 5000) {  							progressUpdated = watch.ElapsedMilliseconds;  							Log.LogMessage(MessageImportance.Normal'  								Properties.Resources.FtpPercentComplete'  								wroteBytes * 100 / totalBytes'  								ByteDescriptions.FormatBytesPerSecond(wroteBytes' watch.Elapsed.TotalSeconds' 1));  						}  					}  					while (readBytes != 0);  				}  				watch.Stop();    				string statusDescription = request.GetStatusDescriptionAndCloseResponse();  				Log.LogMessage(MessageImportance.Low' Properties.Resources.FtpUploadComplete' statusDescription);  				Log.LogMessage(Properties.Resources.FtpTransfered'  					ByteDescriptions.FormatByte(totalBytes' 1)'  					ByteDescriptions.FormatBytesPerSecond(totalBytes' watch.Elapsed.TotalSeconds' 1)'  					watch.Elapsed.ToString());  			} catch (Exception ex) {  				if (errorOnFailure) {  					Log.LogErrorFromException(ex);  				} else {  					Log.LogMessage("Exception occurred trying to upload: " + ex.Message);  				}  				return false;  			}
Magic Number,MSBuild.Community.Tasks,FtpUpload,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\FtpUpload\FtpUpload.cs,UploadFile,The following statement contains a magic number: try {  				Stopwatch watch = Stopwatch.StartNew();  				using (Stream fileStream = localFile.OpenRead()'  							requestStream = request.GetRequestStream()) {  					do {  						readBytes = fileStream.Read(buffer' 0' bufferLength);  						requestStream.Write(buffer' 0' readBytes);  						wroteBytes += readBytes;    						// log progress every 5 seconds  						if (watch.ElapsedMilliseconds - progressUpdated > 5000) {  							progressUpdated = watch.ElapsedMilliseconds;  							Log.LogMessage(MessageImportance.Normal'  								Properties.Resources.FtpPercentComplete'  								wroteBytes * 100 / totalBytes'  								ByteDescriptions.FormatBytesPerSecond(wroteBytes' watch.Elapsed.TotalSeconds' 1));  						}  					}  					while (readBytes != 0);  				}  				watch.Stop();    				string statusDescription = request.GetStatusDescriptionAndCloseResponse();  				Log.LogMessage(MessageImportance.Low' Properties.Resources.FtpUploadComplete' statusDescription);  				Log.LogMessage(Properties.Resources.FtpTransfered'  					ByteDescriptions.FormatByte(totalBytes' 1)'  					ByteDescriptions.FormatBytesPerSecond(totalBytes' watch.Elapsed.TotalSeconds' 1)'  					watch.Elapsed.ToString());  			} catch (Exception ex) {  				if (errorOnFailure) {  					Log.LogErrorFromException(ex);  				} else {  					Log.LogMessage("Exception occurred trying to upload: " + ex.Message);  				}  				return false;  			}
Magic Number,MSBuild.Community.Tasks,RoboCopy,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\RoboCopy.cs,HandleTaskExecutionErrors,The following statement contains a magic number: return !(((ExitCode & 16) == 16) || ((ExitCode & 8) == 8));
Magic Number,MSBuild.Community.Tasks,RoboCopy,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\RoboCopy.cs,HandleTaskExecutionErrors,The following statement contains a magic number: return !(((ExitCode & 16) == 16) || ((ExitCode & 8) == 8));
Magic Number,MSBuild.Community.Tasks,RoboCopy,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\RoboCopy.cs,HandleTaskExecutionErrors,The following statement contains a magic number: return !(((ExitCode & 16) == 16) || ((ExitCode & 8) == 8));
Magic Number,MSBuild.Community.Tasks,RoboCopy,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\RoboCopy.cs,HandleTaskExecutionErrors,The following statement contains a magic number: return !(((ExitCode & 16) == 16) || ((ExitCode & 8) == 8));
Magic Number,MSBuild.Community.Tasks,TemplateFile,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\TemplateFile\TemplateFile.cs,MatchEval,The following statement contains a magic number: if (_tokenPairs.ContainsKey(match.Groups[2].Value))  			{  				result = _tokenPairs[match.Groups[2].Value];  			}
Magic Number,MSBuild.Community.Tasks,TemplateFile,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\TemplateFile\TemplateFile.cs,MatchEval,The following statement contains a magic number: if (_tokenPairs.ContainsKey(match.Groups[2].Value))  			{  				result = _tokenPairs[match.Groups[2].Value];  			}
Magic Number,MSBuild.Community.Tasks,Version,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Version.cs,CalculateFractionalPartOfDay,The following statement contains a magic number: float factor = (float)(UInt16.MaxValue - 1) / (24 * 60 * 60);
Magic Number,MSBuild.Community.Tasks,Version,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Version.cs,CalculateFractionalPartOfDay,The following statement contains a magic number: float factor = (float)(UInt16.MaxValue - 1) / (24 * 60 * 60);
Magic Number,MSBuild.Community.Tasks,Version,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Version.cs,CalculateFractionalPartOfDay,The following statement contains a magic number: float factor = (float)(UInt16.MaxValue - 1) / (24 * 60 * 60);
Magic Number,MSBuild.Community.Tasks,Zip,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Zip.cs,Zip,The following statement contains a magic number: ZipLevel = 6;
Magic Number,MSBuild.Community.Tasks,Zip,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Zip.cs,ZipFiles,The following statement contains a magic number: try              {                  Log.LogMessage(Resources.ZipCreating' ZipFileName);                    string directoryName = Path.GetDirectoryName(Path.GetFullPath(ZipFileName));                  if (!Directory.Exists(directoryName))                      Directory.CreateDirectory(directoryName);                    using (var zip = new ZipFile())                  {                      if (!ParallelCompression)                      {                          zip.ParallelDeflateThreshold = -1;                      }                        zip.AlternateEncoding = System.Text.Encoding.Unicode;                      zip.AlternateEncodingUsage = ZipOption.AsNecessary;                        // make sure level in range                      ZipLevel = System.Math.Max(0' ZipLevel);                      ZipLevel = System.Math.Min(9' ZipLevel);                      zip.CompressionLevel = (CompressionLevel)ZipLevel;                        zip.UseZip64WhenSaving = Zip64 ? Zip64Option.AsNecessary: Zip64Option.Never;                        if (!string.IsNullOrEmpty(Password))                          zip.Password = Password;                        if (string.Equals(Encryption' "PkzipWeak"' StringComparison.OrdinalIgnoreCase))                          zip.Encryption = EncryptionAlgorithm.PkzipWeak;                      else if (string.Equals(Encryption' "WinZipAes128"' StringComparison.OrdinalIgnoreCase))                          zip.Encryption = EncryptionAlgorithm.WinZipAes128;                      else if (string.Equals(Encryption' "WinZipAes256"' StringComparison.OrdinalIgnoreCase))                          zip.Encryption = EncryptionAlgorithm.WinZipAes256;                      else                          zip.Encryption = EncryptionAlgorithm.None;                        if (!string.IsNullOrEmpty(Comment))                          zip.Comment = Comment;                        if (CodecBufferSize>0)                          zip.CodecBufferSize = CodecBufferSize;                        if (BufferSize>0)                          zip.BufferSize = BufferSize;                        foreach (ITaskItem fileItem in Files)                      {                          string name = Path.GetFullPath(fileItem.ItemSpec);                          string directoryPathInArchive;                            // clean up name                          if (Flatten)                              directoryPathInArchive = string.Empty;                          else if (!string.IsNullOrEmpty(WorkingDirectory))                              directoryPathInArchive = GetPath(name' Path.GetFullPath(WorkingDirectory));                          else                              directoryPathInArchive = null;                            if (!File.Exists(name))                          {                              // maybe a directory                              if (Directory.Exists(name))                              {                                  var directoryEntry = zip.AddDirectory(name' directoryPathInArchive);                                  if (!Quiet)                                      Log.LogMessage(Resources.ZipAdded' directoryEntry.FileName);                                    continue;                              }                                Log.LogWarning(Resources.FileNotFound' name);                              continue;                          }                            //remove file name                          if (!string.IsNullOrEmpty(directoryPathInArchive)                              && Path.GetFileName(directoryPathInArchive) == Path.GetFileName(name))                              directoryPathInArchive = Path.GetDirectoryName(directoryPathInArchive);                            var entry = zip.AddFile(name' directoryPathInArchive);                          if (!Quiet)                              Log.LogMessage(Resources.ZipAdded' entry.FileName);                      }                        zip.Save(ZipFileName);                      Log.LogMessage(Resources.ZipSuccessfully' ZipFileName);                  }              }              catch (Exception exc)              {                  Log.LogErrorFromException(exc);                  return false;              }
Magic Number,MSBuild.Community.Tasks.DependencyGraph,DependencyGraph,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\DependencyGraph\DependencyGraph.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[32768];
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,FtpClientTaskBase,The following statement contains a magic number: Port = 21;
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,FtpClientTaskBase,The following statement contains a magic number: BufferSize = 8196;
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,Connect,The following statement contains a magic number: if(reply.ResultCode != 220)              {                  // No OK message received' throw exception because this indicates an error.                  CloseAndTrowException( new FtpException( reply.Message ) );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,Login,The following statement contains a magic number: if(reply.ResultCode == 331)              {                  // Send password and read reply.                  reply = SendCommandAndReadResponse( "PASS"' Password );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,Login,The following statement contains a magic number: if(reply.ResultCode != 230 && reply.ResultCode != 202)              {                  CloseAndTrowException( new FtpException( reply.Message ) );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,Login,The following statement contains a magic number: if(reply.ResultCode != 230 && reply.ResultCode != 202)              {                  CloseAndTrowException( new FtpException( reply.Message ) );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,SetFileTransferType,The following statement contains a magic number: if (reply.ResultCode != 200)              {                  CloseAndTrowException(new FtpException(reply.Message));              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ChangeWorkingDirectory,The following statement contains a magic number: if(reply.ResultCode != 250)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,GetWorkingDirectory,The following statement contains a magic number: if(reply.ResultCode != 257)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,CdUp,The following statement contains a magic number: if(reply.ResultCode != 250 && reply.ResultCode != 200)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,CdUp,The following statement contains a magic number: if(reply.ResultCode != 250 && reply.ResultCode != 200)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,FileExists,The following statement contains a magic number: if(reply.ResultCode == 213)              {                  return true;              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,FileExists,The following statement contains a magic number: if(reply.ResultCode == 550)              {                  return false;              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,DirectoryExists,The following statement contains a magic number: if(reply.ResultCode == 250)              {                  exists = true;                  ChangeWorkingDirectory( workingDirectory );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,RemoveDirectory,The following statement contains a magic number: if(reply.ResultCode != 257)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,MakeDirectory,The following statement contains a magic number: if(reply.ResultCode != 257)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,Store,The following statement contains a magic number: if(reply.ResultCode != 226)              {                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,CreateDataStreamAndSendCommand,The following statement contains a magic number: if(reply.ResultCode != 227)              {                  // Throw exception.                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,CreateDataStreamAndSendCommand,The following statement contains a magic number: if (reply.ResultCode < 100 || reply.ResultCode > 199)              {                  // throw exception.                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,CreateDataStreamAndSendCommand,The following statement contains a magic number: if (reply.ResultCode < 100 || reply.ResultCode > 199)              {                  // throw exception.                  throw new FtpException( reply.Message );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ParseDataEndPointFromMessage,The following statement contains a magic number: for(int i = 0; i < 3; i++)              {                  ipAddressAsString += ipAddressChunks[i];                  ipAddressAsString += ".";              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ParseDataEndPointFromMessage,The following statement contains a magic number: ipAddressAsString += ipAddressChunks[3];
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ParseDataEndPointFromMessage,The following statement contains a magic number: int port = Int32.Parse( ipAddressChunks[4] ) * 256 + Int32.Parse( ipAddressChunks[5] );
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ParseDataEndPointFromMessage,The following statement contains a magic number: int port = Int32.Parse( ipAddressChunks[4] ) * 256 + Int32.Parse( ipAddressChunks[5] );
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ParseDataEndPointFromMessage,The following statement contains a magic number: int port = Int32.Parse( ipAddressChunks[4] ) * 256 + Int32.Parse( ipAddressChunks[5] );
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,GetDirectoryDetails,The following statement contains a magic number: using(Stream stream = CreateDataStreamAndSendCommand( listCommand ))              {                  byte[] buffer = new byte[8192];                  int bytesReceived = stream.Read( buffer' 0' buffer.Length );                  String dirEntryList = String.Empty;                    while(bytesReceived > 0)                  {                      dirEntryList += ConversationEncoding.GetString( buffer' 0' bytesReceived );                      bytesReceived = stream.Read( buffer' 0' buffer.Length );                  }                    String[] dirEntries = dirEntryList.Split( '\n' );                  return FtpEntry.ParseDirList( dirEntries );              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ReadResponse,The following statement contains a magic number: String resultCodePiece = responseString.Substring( 0' 3 );
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ReadResponse,The following statement contains a magic number: String message = responseString.Substring( 4 );
Magic Number,MSBuild.Community.Tasks.Ftp,FtpClientTaskBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpClientTaskBase.cs,ReadResponseString,The following statement contains a magic number: Byte[] buffer = new Byte[8192];
Magic Number,MSBuild.Community.Tasks.Ftp,FtpEntry,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpFile.cs,ParseDosDirLine,The following statement contains a magic number: try              {                  string[] parsed = new string[3];                  int index = 0;                  int position = 0;                    // Parse out the elements                  position = entryLine.IndexOf( ' ' );                  while(index < parsed.Length)                  {                      parsed[index] = entryLine.Substring( 0' position );                      entryLine = entryLine.Substring( position );                      entryLine = entryLine.Trim();                      index++;                      position = entryLine.IndexOf( ' ' );                  }                  entry.Name = entryLine;                  entry.IsDirectory = parsed[2] == "<DIR>";              }              catch              {                  entry = null;              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpEntry,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpFile.cs,ParseDosDirLine,The following statement contains a magic number: try              {                  string[] parsed = new string[3];                  int index = 0;                  int position = 0;                    // Parse out the elements                  position = entryLine.IndexOf( ' ' );                  while(index < parsed.Length)                  {                      parsed[index] = entryLine.Substring( 0' position );                      entryLine = entryLine.Substring( position );                      entryLine = entryLine.Trim();                      index++;                      position = entryLine.IndexOf( ' ' );                  }                  entry.Name = entryLine;                  entry.IsDirectory = parsed[2] == "<DIR>";              }              catch              {                  entry = null;              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpEntry,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpFile.cs,ParseUnixDirLine,The following statement contains a magic number: try              {                  string[] parsed = new string[8];                  int index = 0;                  int position;                    // Parse out the elements                  position = entryLine.IndexOf( ' ' );                  while(index < parsed.Length)                  {                      parsed[index] = entryLine.Substring( 0' position );                      entryLine = entryLine.Substring( position );                      entryLine = entryLine.Trim();                      index++;                      position = entryLine.IndexOf( ' ' );                  }                  entry.Name = entryLine;                  entry.IsDirectory = parsed[0][0] == 'd';              }              catch              {                  entry = null;              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpEntry,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpFile.cs,ParseDirList,The following statement contains a magic number: foreach(string entryLine in entryLines)              {                  FtpEntry entry = null;                  if(autodetect == 0)                  {                      entry = ParseDosDirLine( entryLine );                      if(entry == null)                      {                          entry = ParseUnixDirLine( entryLine );                          autodetect = 2;                      }                      else                          autodetect = 1;                  }                  else                      if(autodetect == 1)                          entry = ParseDosDirLine( entryLine );                      else                          if(autodetect == 2)                              entry = ParseUnixDirLine( entryLine );                    if(entry != null)                  {                      files.Add( entry );                  }              }
Magic Number,MSBuild.Community.Tasks.Ftp,FtpEntry,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Ftp\FtpFile.cs,ParseDirList,The following statement contains a magic number: foreach(string entryLine in entryLines)              {                  FtpEntry entry = null;                  if(autodetect == 0)                  {                      entry = ParseDosDirLine( entryLine );                      if(entry == null)                      {                          entry = ParseUnixDirLine( entryLine );                          autodetect = 2;                      }                      else                          autodetect = 1;                  }                  else                      if(autodetect == 1)                          entry = ParseDosDirLine( entryLine );                      else                          if(autodetect == 2)                              entry = ParseUnixDirLine( entryLine );                    if(entry != null)                  {                      files.Add( entry );                  }              }
Magic Number,MSBuild.Community.Tasks.Fusion,FusionWrapper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\FusionWrapper.cs,GetAssemblyPath,The following statement contains a magic number: if (HasProcessorArchitecture(fullName))                  //getting size of string' cchBuf will be the size                  cache.QueryAssemblyInfo(3' fullName' ref info);              else                  //try using possible proccessors                  foreach (string p in proccessors)                  {                      fullName = AppendProccessor(assemblyName' p);                      cache.QueryAssemblyInfo(3' fullName' ref info);                        //if no size' not found' try another proccessor                      if (info.cchBuf > 0)                          break;                  }
Magic Number,MSBuild.Community.Tasks.Fusion,FusionWrapper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\FusionWrapper.cs,GetAssemblyPath,The following statement contains a magic number: if (HasProcessorArchitecture(fullName))                  //getting size of string' cchBuf will be the size                  cache.QueryAssemblyInfo(3' fullName' ref info);              else                  //try using possible proccessors                  foreach (string p in proccessors)                  {                      fullName = AppendProccessor(assemblyName' p);                      cache.QueryAssemblyInfo(3' fullName' ref info);                        //if no size' not found' try another proccessor                      if (info.cchBuf > 0)                          break;                  }
Magic Number,MSBuild.Community.Tasks.Fusion,FusionWrapper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\FusionWrapper.cs,GetAssemblyPath,The following statement contains a magic number: ThrowOnError(cache.QueryAssemblyInfo(3' fullName' ref info));
Magic Number,MSBuild.Community.Tasks.Fusion,FusionWrapper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\FusionWrapper.cs,GetProcessorArchitecture,The following statement contains a magic number: switch (lpSystemInfo.wProcessorArchitecture)              {                  case 0:                      return "x86";                  case 6:                      return "IA64";                  case 9:                      return "AMD64";                  default:                      return "MSIL";              }
Magic Number,MSBuild.Community.Tasks.Fusion,FusionWrapper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\FusionWrapper.cs,GetProcessorArchitecture,The following statement contains a magic number: switch (lpSystemInfo.wProcessorArchitecture)              {                  case 0:                      return "x86";                  case 6:                      return "IA64";                  case 9:                      return "AMD64";                  default:                      return "MSIL";              }
Magic Number,MSBuild.Community.Tasks.Git,GitDescribe,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Git\GitDescribe.cs,LogEventsFromTextOutput,The following statement contains a magic number: if (isError)                  base.LogEventsFromTextOutput(singleLine' messageImportance);              else              {                  var line = singleLine.Trim();                  // hashPosition includes the git-describe 'g' delimiter                  var hashPosition = singleLine.Length - 40 - 1;                    // TODO: get rid of these "soft" errors once unit tests are in place                  try                  {                      if (hashPosition == -1) {                             // In case there are no tags' git describe output will contain only hash                          // (without 'g' delimiter)                          CommitHash = line.Substring(0);                      }                      else                      {                          // We do +1 to skip the git-describe 'g' delimiter                          CommitHash = line.Substring(hashPosition + 1);                      }                  }                  catch                  {                      if (!SoftErrorMode) throw;                        CommitCount = -1;                      Tag = "Failure Parsing Git Describe: " + line;                      return;                  }                    if (hashPosition == -1)                  {                      // hashPosition is -1' meaning there is no dash in git describe output                      // Set Tag to blank and CommitCount to 0 and then return                      Tag = "";                      CommitCount = 0;                        return;                  }                    int i;                  // move backwards through git describe' now we've got our hash we move backwards                   // skipping one dash                  // until we encounter another dash                  for (i = hashPosition - 2; i > 0; i--)                  {                      var c = line[i];                        if (c == '-')                          break;                  }                    // sanity check' just incase parsing goes badly wrong (maybe git will change.. ?)                  if (i == 0)                  {                      Tag = "Failure Parsing Git Describe: " + line;                        if (!SoftErrorMode) throw new FormatException(Tag);                        CommitCount = -1;                      return;                  }                  else                  {                      var commitCount = line.Substring(i + 1' (hashPosition - 2) - i);                      try                      {                          CommitCount = int.Parse(commitCount);                          Tag = line.Substring(0' i);                      }                      catch                       {                          if (!SoftErrorMode) throw;                            Tag = "Failure Parsing Git Describe: commitCount = '" + commitCount + "' / line = " + line;                          CommitCount = -1;                      }                  }              }
Magic Number,MSBuild.Community.Tasks.Git,GitDescribe,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Git\GitDescribe.cs,LogEventsFromTextOutput,The following statement contains a magic number: if (isError)                  base.LogEventsFromTextOutput(singleLine' messageImportance);              else              {                  var line = singleLine.Trim();                  // hashPosition includes the git-describe 'g' delimiter                  var hashPosition = singleLine.Length - 40 - 1;                    // TODO: get rid of these "soft" errors once unit tests are in place                  try                  {                      if (hashPosition == -1) {                             // In case there are no tags' git describe output will contain only hash                          // (without 'g' delimiter)                          CommitHash = line.Substring(0);                      }                      else                      {                          // We do +1 to skip the git-describe 'g' delimiter                          CommitHash = line.Substring(hashPosition + 1);                      }                  }                  catch                  {                      if (!SoftErrorMode) throw;                        CommitCount = -1;                      Tag = "Failure Parsing Git Describe: " + line;                      return;                  }                    if (hashPosition == -1)                  {                      // hashPosition is -1' meaning there is no dash in git describe output                      // Set Tag to blank and CommitCount to 0 and then return                      Tag = "";                      CommitCount = 0;                        return;                  }                    int i;                  // move backwards through git describe' now we've got our hash we move backwards                   // skipping one dash                  // until we encounter another dash                  for (i = hashPosition - 2; i > 0; i--)                  {                      var c = line[i];                        if (c == '-')                          break;                  }                    // sanity check' just incase parsing goes badly wrong (maybe git will change.. ?)                  if (i == 0)                  {                      Tag = "Failure Parsing Git Describe: " + line;                        if (!SoftErrorMode) throw new FormatException(Tag);                        CommitCount = -1;                      return;                  }                  else                  {                      var commitCount = line.Substring(i + 1' (hashPosition - 2) - i);                      try                      {                          CommitCount = int.Parse(commitCount);                          Tag = line.Substring(0' i);                      }                      catch                       {                          if (!SoftErrorMode) throw;                            Tag = "Failure Parsing Git Describe: commitCount = '" + commitCount + "' / line = " + line;                          CommitCount = -1;                      }                  }              }
Magic Number,MSBuild.Community.Tasks.Git,GitDescribe,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Git\GitDescribe.cs,LogEventsFromTextOutput,The following statement contains a magic number: if (isError)                  base.LogEventsFromTextOutput(singleLine' messageImportance);              else              {                  var line = singleLine.Trim();                  // hashPosition includes the git-describe 'g' delimiter                  var hashPosition = singleLine.Length - 40 - 1;                    // TODO: get rid of these "soft" errors once unit tests are in place                  try                  {                      if (hashPosition == -1) {                             // In case there are no tags' git describe output will contain only hash                          // (without 'g' delimiter)                          CommitHash = line.Substring(0);                      }                      else                      {                          // We do +1 to skip the git-describe 'g' delimiter                          CommitHash = line.Substring(hashPosition + 1);                      }                  }                  catch                  {                      if (!SoftErrorMode) throw;                        CommitCount = -1;                      Tag = "Failure Parsing Git Describe: " + line;                      return;                  }                    if (hashPosition == -1)                  {                      // hashPosition is -1' meaning there is no dash in git describe output                      // Set Tag to blank and CommitCount to 0 and then return                      Tag = "";                      CommitCount = 0;                        return;                  }                    int i;                  // move backwards through git describe' now we've got our hash we move backwards                   // skipping one dash                  // until we encounter another dash                  for (i = hashPosition - 2; i > 0; i--)                  {                      var c = line[i];                        if (c == '-')                          break;                  }                    // sanity check' just incase parsing goes badly wrong (maybe git will change.. ?)                  if (i == 0)                  {                      Tag = "Failure Parsing Git Describe: " + line;                        if (!SoftErrorMode) throw new FormatException(Tag);                        CommitCount = -1;                      return;                  }                  else                  {                      var commitCount = line.Substring(i + 1' (hashPosition - 2) - i);                      try                      {                          CommitCount = int.Parse(commitCount);                          Tag = line.Substring(0' i);                      }                      catch                       {                          if (!SoftErrorMode) throw;                            Tag = "Failure Parsing Git Describe: commitCount = '" + commitCount + "' / line = " + line;                          CommitCount = -1;                      }                  }              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Compress,The following statement contains a magic number: Action(3);
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Compress,The following statement contains a magic number: while (aa != eof)              {                  switch (aa)                  {                      case ' ':                          if (IsAlphanum(bb))                          {                              Action(1);                          }                          else                          {                              Action(2);                          }                          break;                      case '\n':                          switch (bb)                          {                              case '{':                              case '[':                              case '(':                              case '+':                              case '-':                                  Action(1);                                  break;                              case ' ':                                  Action(3);                                  break;                              default:                                  if (IsAlphanum(bb))                                  {                                      Action(1);                                  }                                  else                                  {                                      Action(2);                                  }                                  break;                          }                          break;                      default:                          switch (bb)                          {                              case ' ':                                  if (IsAlphanum(aa))                                  {                                      Action(1);                                      break;                                  }                                  Action(3);                                  break;                              case '\n':                                  switch (aa)                                  {                                      case '}':                                      case ']':                                      case ')':                                      case '+':                                      case '-':                                      case '"':                                      case '\'':                                          Action(1);                                          break;                                      default:                                          if (IsAlphanum(aa))                                          {                                              Action(1);                                          }                                          else                                          {                                              Action(3);                                          }                                          break;                                  }                                  break;                              default:                                  Action(1);                                  break;                          }                          break;                  }              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Compress,The following statement contains a magic number: while (aa != eof)              {                  switch (aa)                  {                      case ' ':                          if (IsAlphanum(bb))                          {                              Action(1);                          }                          else                          {                              Action(2);                          }                          break;                      case '\n':                          switch (bb)                          {                              case '{':                              case '[':                              case '(':                              case '+':                              case '-':                                  Action(1);                                  break;                              case ' ':                                  Action(3);                                  break;                              default:                                  if (IsAlphanum(bb))                                  {                                      Action(1);                                  }                                  else                                  {                                      Action(2);                                  }                                  break;                          }                          break;                      default:                          switch (bb)                          {                              case ' ':                                  if (IsAlphanum(aa))                                  {                                      Action(1);                                      break;                                  }                                  Action(3);                                  break;                              case '\n':                                  switch (aa)                                  {                                      case '}':                                      case ']':                                      case ')':                                      case '+':                                      case '-':                                      case '"':                                      case '\'':                                          Action(1);                                          break;                                      default:                                          if (IsAlphanum(aa))                                          {                                              Action(1);                                          }                                          else                                          {                                              Action(3);                                          }                                          break;                                  }                                  break;                              default:                                  Action(1);                                  break;                          }                          break;                  }              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Compress,The following statement contains a magic number: while (aa != eof)              {                  switch (aa)                  {                      case ' ':                          if (IsAlphanum(bb))                          {                              Action(1);                          }                          else                          {                              Action(2);                          }                          break;                      case '\n':                          switch (bb)                          {                              case '{':                              case '[':                              case '(':                              case '+':                              case '-':                                  Action(1);                                  break;                              case ' ':                                  Action(3);                                  break;                              default:                                  if (IsAlphanum(bb))                                  {                                      Action(1);                                  }                                  else                                  {                                      Action(2);                                  }                                  break;                          }                          break;                      default:                          switch (bb)                          {                              case ' ':                                  if (IsAlphanum(aa))                                  {                                      Action(1);                                      break;                                  }                                  Action(3);                                  break;                              case '\n':                                  switch (aa)                                  {                                      case '}':                                      case ']':                                      case ')':                                      case '+':                                      case '-':                                      case '"':                                      case '\'':                                          Action(1);                                          break;                                      default:                                          if (IsAlphanum(aa))                                          {                                              Action(1);                                          }                                          else                                          {                                              Action(3);                                          }                                          break;                                  }                                  break;                              default:                                  Action(1);                                  break;                          }                          break;                  }              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Compress,The following statement contains a magic number: while (aa != eof)              {                  switch (aa)                  {                      case ' ':                          if (IsAlphanum(bb))                          {                              Action(1);                          }                          else                          {                              Action(2);                          }                          break;                      case '\n':                          switch (bb)                          {                              case '{':                              case '[':                              case '(':                              case '+':                              case '-':                                  Action(1);                                  break;                              case ' ':                                  Action(3);                                  break;                              default:                                  if (IsAlphanum(bb))                                  {                                      Action(1);                                  }                                  else                                  {                                      Action(2);                                  }                                  break;                          }                          break;                      default:                          switch (bb)                          {                              case ' ':                                  if (IsAlphanum(aa))                                  {                                      Action(1);                                      break;                                  }                                  Action(3);                                  break;                              case '\n':                                  switch (aa)                                  {                                      case '}':                                      case ']':                                      case ')':                                      case '+':                                      case '-':                                      case '"':                                      case '\'':                                          Action(1);                                          break;                                      default:                                          if (IsAlphanum(aa))                                          {                                              Action(1);                                          }                                          else                                          {                                              Action(3);                                          }                                          break;                                  }                                  break;                              default:                                  Action(1);                                  break;                          }                          break;                  }              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Compress,The following statement contains a magic number: while (aa != eof)              {                  switch (aa)                  {                      case ' ':                          if (IsAlphanum(bb))                          {                              Action(1);                          }                          else                          {                              Action(2);                          }                          break;                      case '\n':                          switch (bb)                          {                              case '{':                              case '[':                              case '(':                              case '+':                              case '-':                                  Action(1);                                  break;                              case ' ':                                  Action(3);                                  break;                              default:                                  if (IsAlphanum(bb))                                  {                                      Action(1);                                  }                                  else                                  {                                      Action(2);                                  }                                  break;                          }                          break;                      default:                          switch (bb)                          {                              case ' ':                                  if (IsAlphanum(aa))                                  {                                      Action(1);                                      break;                                  }                                  Action(3);                                  break;                              case '\n':                                  switch (aa)                                  {                                      case '}':                                      case ']':                                      case ')':                                      case '+':                                      case '-':                                      case '"':                                      case '\'':                                          Action(1);                                          break;                                      default:                                          if (IsAlphanum(aa))                                          {                                              Action(1);                                          }                                          else                                          {                                              Action(3);                                          }                                          break;                                  }                                  break;                              default:                                  Action(1);                                  break;                          }                          break;                  }              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Action,The following statement contains a magic number: switch (d)              {                  case 1:                      Write(aa);                      goto case 2;                  case 2:                      aa = bb;                      if (aa == '\'' || aa == '"')                      {                          for (;; )                          {                              Write(aa);                              aa = Get();                              if (aa == bb)                              {                                  break;                              }                              if (aa <= '\n')                              {                                  string message = string.Format("Unterminated string literal: '{0}'."' aa);                                  throw new Exception(message);                              }                              if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                          }                      }                      goto case 3;                  case 3:                      bb = Next();                      if (bb == '/' && (aa == '(' || aa == ''' || aa == '='))                      {                          Write(aa);                          Write(bb);                          for (;; )                          {                              aa = Get();                              if (aa == '/')                              {                                  break;                              }                              else if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                              else if (aa <= '\n')                              {                                  throw new Exception("Unterminated Regular Expression literal.");                              }                              Write(aa);                          }                          bb = Next();                      }                      break;              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Action,The following statement contains a magic number: switch (d)              {                  case 1:                      Write(aa);                      goto case 2;                  case 2:                      aa = bb;                      if (aa == '\'' || aa == '"')                      {                          for (;; )                          {                              Write(aa);                              aa = Get();                              if (aa == bb)                              {                                  break;                              }                              if (aa <= '\n')                              {                                  string message = string.Format("Unterminated string literal: '{0}'."' aa);                                  throw new Exception(message);                              }                              if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                          }                      }                      goto case 3;                  case 3:                      bb = Next();                      if (bb == '/' && (aa == '(' || aa == ''' || aa == '='))                      {                          Write(aa);                          Write(bb);                          for (;; )                          {                              aa = Get();                              if (aa == '/')                              {                                  break;                              }                              else if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                              else if (aa <= '\n')                              {                                  throw new Exception("Unterminated Regular Expression literal.");                              }                              Write(aa);                          }                          bb = Next();                      }                      break;              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Action,The following statement contains a magic number: switch (d)              {                  case 1:                      Write(aa);                      goto case 2;                  case 2:                      aa = bb;                      if (aa == '\'' || aa == '"')                      {                          for (;; )                          {                              Write(aa);                              aa = Get();                              if (aa == bb)                              {                                  break;                              }                              if (aa <= '\n')                              {                                  string message = string.Format("Unterminated string literal: '{0}'."' aa);                                  throw new Exception(message);                              }                              if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                          }                      }                      goto case 3;                  case 3:                      bb = Next();                      if (bb == '/' && (aa == '(' || aa == ''' || aa == '='))                      {                          Write(aa);                          Write(bb);                          for (;; )                          {                              aa = Get();                              if (aa == '/')                              {                                  break;                              }                              else if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                              else if (aa <= '\n')                              {                                  throw new Exception("Unterminated Regular Expression literal.");                              }                              Write(aa);                          }                          bb = Next();                      }                      break;              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Action,The following statement contains a magic number: switch (d)              {                  case 1:                      Write(aa);                      goto case 2;                  case 2:                      aa = bb;                      if (aa == '\'' || aa == '"')                      {                          for (;; )                          {                              Write(aa);                              aa = Get();                              if (aa == bb)                              {                                  break;                              }                              if (aa <= '\n')                              {                                  string message = string.Format("Unterminated string literal: '{0}'."' aa);                                  throw new Exception(message);                              }                              if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                          }                      }                      goto case 3;                  case 3:                      bb = Next();                      if (bb == '/' && (aa == '(' || aa == ''' || aa == '='))                      {                          Write(aa);                          Write(bb);                          for (;; )                          {                              aa = Get();                              if (aa == '/')                              {                                  break;                              }                              else if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                              else if (aa <= '\n')                              {                                  throw new Exception("Unterminated Regular Expression literal.");                              }                              Write(aa);                          }                          bb = Next();                      }                      break;              }
Magic Number,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,IsAlphanum,The following statement contains a magic number: return ((ch >= 'a' && ch <= 'z') ||                       (ch >= '0' && ch <= '9') ||                      (ch >= 'A' && ch <= 'Z') ||                       ch == '_' || ch == '$' || ch == '\\' || ch > 126);
Magic Number,MSBuild.Community.Tasks.Net,HttpRequest,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Net\HttpRequest.cs,Execute,The following statement contains a magic number: if (ReadRequestFromFile) {  		request.SendChunked = true;  		using (FileStream source = File.Open(ReadRequestFrom' FileMode.Open))  		{  			using (Stream requestStream = request.GetRequestStream())  			{  				byte[] buffer = new byte[16 * 1024];  				int bytesRead;  				while ((bytesRead = source.Read(buffer' 0' buffer.Length)) > 0)  				{  					requestStream.Write(buffer' 0' bytesRead);  				}  			}  		}  	    }
Magic Number,MSBuild.Community.Tasks.Net,HttpRequest,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Net\HttpRequest.cs,Execute,The following statement contains a magic number: if (ReadRequestFromFile) {  		request.SendChunked = true;  		using (FileStream source = File.Open(ReadRequestFrom' FileMode.Open))  		{  			using (Stream requestStream = request.GetRequestStream())  			{  				byte[] buffer = new byte[16 * 1024];  				int bytesRead;  				while ((bytesRead = source.Read(buffer' 0' buffer.Length)) > 0)  				{  					requestStream.Write(buffer' 0' bytesRead);  				}  			}  		}  	    }
Magic Number,MSBuild.Community.Tasks.Net,HttpRequest,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Net\HttpRequest.cs,Execute,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())              {                  int code = (int)response.StatusCode;                  Log.LogMessage("HTTP RESPONSE: {0}' {1}"' code' response.StatusDescription);                  if (FailOnNon2xxResponse)                  {                      if (code < 200 || code > 299)                      {                          Log.LogError("Status code not in Successful 2xx range.");                          return false;                      }                  }                  if (CheckResponseContents || WriteResponseToFile)                  {                      StreamReader responseReader = new StreamReader(response.GetResponseStream());                      string responseString = responseReader.ReadToEnd();                      if (WriteResponseToFile)                      {                          using (TextWriter tw = new StreamWriter(WriteResponseTo))                          {                              tw.Write(responseString);                              tw.Close();                          }                      }                      if (CheckResponseContents)                      {                          if (!responseString.Contains(EnsureResponseContains))                          {                              int length = System.Math.Min(100' responseString.Length);                              Log.LogError("Response did not contain the specified text.  Started with: " + responseString.Substring(0' length));                              return false;                          }                      }                  }                  response.Close();              }
Magic Number,MSBuild.Community.Tasks.Net,HttpRequest,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Net\HttpRequest.cs,Execute,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())              {                  int code = (int)response.StatusCode;                  Log.LogMessage("HTTP RESPONSE: {0}' {1}"' code' response.StatusDescription);                  if (FailOnNon2xxResponse)                  {                      if (code < 200 || code > 299)                      {                          Log.LogError("Status code not in Successful 2xx range.");                          return false;                      }                  }                  if (CheckResponseContents || WriteResponseToFile)                  {                      StreamReader responseReader = new StreamReader(response.GetResponseStream());                      string responseString = responseReader.ReadToEnd();                      if (WriteResponseToFile)                      {                          using (TextWriter tw = new StreamWriter(WriteResponseTo))                          {                              tw.Write(responseString);                              tw.Close();                          }                      }                      if (CheckResponseContents)                      {                          if (!responseString.Contains(EnsureResponseContains))                          {                              int length = System.Math.Min(100' responseString.Length);                              Log.LogError("Response did not contain the specified text.  Started with: " + responseString.Substring(0' length));                              return false;                          }                      }                  }                  response.Close();              }
Magic Number,MSBuild.Community.Tasks.Net,HttpRequest,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Net\HttpRequest.cs,Execute,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())              {                  int code = (int)response.StatusCode;                  Log.LogMessage("HTTP RESPONSE: {0}' {1}"' code' response.StatusDescription);                  if (FailOnNon2xxResponse)                  {                      if (code < 200 || code > 299)                      {                          Log.LogError("Status code not in Successful 2xx range.");                          return false;                      }                  }                  if (CheckResponseContents || WriteResponseToFile)                  {                      StreamReader responseReader = new StreamReader(response.GetResponseStream());                      string responseString = responseReader.ReadToEnd();                      if (WriteResponseToFile)                      {                          using (TextWriter tw = new StreamWriter(WriteResponseTo))                          {                              tw.Write(responseString);                              tw.Close();                          }                      }                      if (CheckResponseContents)                      {                          if (!responseString.Contains(EnsureResponseContains))                          {                              int length = System.Math.Min(100' responseString.Length);                              Log.LogError("Response did not contain the specified text.  Started with: " + responseString.Substring(0' length));                              return false;                          }                      }                  }                  response.Close();              }
Magic Number,MSBuild.Community.Tasks.SourceServer,PdbStr,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\PdbStr.cs,GenerateFullPathToTool,The following statement contains a magic number: if (pf.EndsWith("(x86)"))              {                  string pf64 = pf.Substring(0' pf.Length - 5).Trim();                  string path64 = Path.Combine(pf64' "Debugging Tools for Windows (x64)\\srcsrv");                  if (Directory.Exists(path64))                      return Path.Combine(path64' ToolName);              }
Magic Number,MSBuild.Community.Tasks.SourceServer,SrcTool,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\SrcTool.cs,GenerateFullPathToTool,The following statement contains a magic number: if (pf.EndsWith("(x86)"))              {                  string pf64 = pf.Substring(0' pf.Length - 5).Trim();                  string path64 = Path.Combine(pf64' "Debugging Tools for Windows (x64)\\srcsrv");                  if (Directory.Exists(path64))                      return Path.Combine(path64' ToolName);              }
Magic Number,MSBuild.Community.Tasks.SourceServer,TfsSourceIndex,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SourceServer\TfsSourceIndex.cs,GetItemInformation,The following statement contains a magic number: const int retryCount = 3;
Magic Number,MSBuild.Community.Tasks.SymbolServer,SymStore,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\SymbolServer\SymStore.cs,GenerateFullPathToTool,The following statement contains a magic number: if (pf.EndsWith("(x86)"))              {                  string pf64 = pf.Substring(0' pf.Length - 5).Trim();                  string path64 = Path.Combine(pf64' "Debugging Tools for Windows (x64)");                  if (Directory.Exists(path64))                      return Path.Combine(path64' ToolName);              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,InfoCommandResponse,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\InfoCommandResponse.cs,Parse,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  var line = lines[i];                  if (line.Contains("Local information:"))                  {                      var localInformation = new LocalInformation                      {                          LocalPath = GetValue(lines[i + 1])'                          ServerPath = GetValue(lines[i + 2])'                          Changeset = GetValue(lines[i + 3])'                          Change = GetValue(lines[i + 4])'                          Type = GetValue(lines[i + 5])'                      };                        this.LocalInformation[localInformation.ServerPath.ToLower()] = localInformation;                      i = i + 5;                  }                  else if (line.Contains("Server information:"))                  {                      var serverInformation = new ServerInformation                      {                          ServerPath = GetValue(lines[i + 1])'                          Changeset = GetValue(lines[i + 2])'                          DeletionID  = GetValue(lines[i + 3])'                          Lock = GetValue(lines[i + 4])'                          LockOwner = GetValue(lines[i + 5])'                          LastModified = GetValue(lines[i + 6])'                          Type = GetValue(lines[i + 7])'                          FileType  = GetValue(lines[i + 8])'                          Size  = GetValue(lines[i + 9])'                      };                        this.ServerInformation[serverInformation.ServerPath.ToLower()] = serverInformation;                      i = i + 9;                  }              }
Magic Number,MSBuild.Community.Tasks.Tfs,TfsClient,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\TfsClient.cs,GetNextBatch,The following statement contains a magic number: const int offSet = 1000;
Magic Number,MSBuild.Community.Tasks.Xml,XmlTaskHelper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlTaskHelper.cs,LoadNamespaceDefinitionItems,The following statement contains a magic number: foreach (ITaskItem namespaceDefinition in definitions)              {                  string[] definitionParts = namespaceDefinition.ToString().Split(new char[] { '=' }' 2' StringSplitOptions.RemoveEmptyEntries);                  if (definitionParts.Length < 2)                  {                      throw new ArgumentException("Each namespace definition must include a prefix' followed by an equal sign' followed by a Uri. Example: custom=http://example.com"' "NamespaceDefinitions");                  }                  namespaceManager.AddNamespace(definitionParts[0]' definitionParts[1]);              }
Magic Number,MSBuild.Community.Tasks.Xml,XmlTaskHelper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Xml\XmlTaskHelper.cs,LoadNamespaceDefinitionItems,The following statement contains a magic number: foreach (ITaskItem namespaceDefinition in definitions)              {                  string[] definitionParts = namespaceDefinition.ToString().Split(new char[] { '=' }' 2' StringSplitOptions.RemoveEmptyEntries);                  if (definitionParts.Length < 2)                  {                      throw new ArgumentException("Each namespace definition must include a prefix' followed by an equal sign' followed by a Uri. Example: custom=http://example.com"' "NamespaceDefinitions");                  }                  namespaceManager.AddNamespace(definitionParts[0]' definitionParts[1]);              }
Magic Number,MSBuild.Community.Tasks.IIS,WebDirectoryScriptMap,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryScriptMap.cs,Execute,The following statement contains a magic number: if (verifyFileExists) flags += 4;
Magic Number,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following statement contains a magic number: if (osVersion.Major < 5)  			{  				// Windows NT: IIS 4  				iisVersion = IISVersion.Four;  			}  			else if( osVersion.Major == 5)  			{  				switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}  			}  			else if (osVersion.Major == 6)  			{  				switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}  			}
Magic Number,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following statement contains a magic number: if (osVersion.Major < 5)  			{  				// Windows NT: IIS 4  				iisVersion = IISVersion.Four;  			}  			else if( osVersion.Major == 5)  			{  				switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}  			}  			else if (osVersion.Major == 6)  			{  				switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}  			}
Magic Number,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following statement contains a magic number: if (osVersion.Major < 5)  			{  				// Windows NT: IIS 4  				iisVersion = IISVersion.Four;  			}  			else if( osVersion.Major == 5)  			{  				switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}  			}  			else if (osVersion.Major == 6)  			{  				switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}  			}
Magic Number,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following statement contains a magic number: if (osVersion.Major < 5)  			{  				// Windows NT: IIS 4  				iisVersion = IISVersion.Four;  			}  			else if( osVersion.Major == 5)  			{  				switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}  			}  			else if (osVersion.Major == 6)  			{  				switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}  			}
Magic Number,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following statement contains a magic number: if (osVersion.Major < 5)  			{  				// Windows NT: IIS 4  				iisVersion = IISVersion.Four;  			}  			else if( osVersion.Major == 5)  			{  				switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}  			}  			else if (osVersion.Major == 6)  			{  				switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}  			}
Magic Number,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following statement contains a magic number: if (osVersion.Major < 5)  			{  				// Windows NT: IIS 4  				iisVersion = IISVersion.Four;  			}  			else if( osVersion.Major == 5)  			{  				switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}  			}  			else if (osVersion.Major == 6)  			{  				switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}  			}
Magic Number,MSBuild.Community.Tasks.IIS,WebDirectoryCreate,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebDirectoryCreate.cs,CreateVirtualDirectory,The following statement contains a magic number: try  			{  				Log.LogMessage(MessageImportance.Normal' "Creating virtual directory named {0} on {1}:"' VirtualDirectoryName' ServerName);  				VerifyIISRoot();  				  				DirectoryEntry siteRoot = new DirectoryEntry(IISServerPath);  				siteRoot.RefreshCache();  				DirectoryEntry newVirDir = null;                    try                  {                      // If a Web Directory with this name already exists' delete it.                      DirectoryEntry existingWebDir = siteRoot.Children.Find(VirtualDirectoryName' WebDirectoryClassName);                      if (existingWebDir != null)                      {                          existingWebDir.DeleteTree();                      }                  }                  catch (System.IO.DirectoryNotFoundException) { /* Web Directory does not exist - that's good */}                  try                  {                      // If a Virtual Directory with this name already exists' use it. Otherwise' add it.                      DirectoryEntry existingVirDir = siteRoot.Children.Find(VirtualDirectoryName' VirtualDirectoryClassName);                      newVirDir = existingVirDir;                  }                  catch (System.IO.DirectoryNotFoundException) { }                  if (newVirDir == null)                  {                      // Create the virtual directory                      newVirDir = siteRoot.Children.Add(VirtualDirectoryName' VirtualDirectoryClassName);                      newVirDir.CommitChanges();                  }    				// Set Required Properties  				newVirDir.Properties["Path"].Value = VirtualDirectoryPhysicalPath;  				newVirDir.Properties["AppFriendlyName"].Value = VirtualDirectoryName;  				newVirDir.Properties["AppRoot"].Value = string.Format("{0}/{1}"' IISApplicationPath' VirtualDirectoryName);  				newVirDir.Properties["AppIsolated"][0] = 2;    				// Set Optional Properties  				if (mIISVersion == IISVersion.Four)  				{  					newVirDir.Properties["CpuAppEnabled"][0] = CpuAppEnabled;  					newVirDir.Properties["CpuCgiEnabled"][0] = CpuCgiEnabled;  				}    				if (mIISVersion == IISVersion.Five)  				{  					newVirDir.Properties["AspTrackThreadingModel"][0] = AspTrackThreadingModel;  					newVirDir.Properties["AuthPersistSingleRequestIfProxy"][0] = AuthPersistSingleRequestIfProxy;  					newVirDir.Properties["AuthPersistSingleRequestAlwaysIfProxy"][0] = AuthPersistSingleRequestAlwaysIfProxy;  					newVirDir.Properties["UNCAuthenticationPassthrough"][0] = UncAuthenticationPassthrough;  				}    				newVirDir.Properties["AccessExecute"][0] = AccessExecute;  				newVirDir.Properties["AccessNoRemoteExecute"][0] = AccessNoRemoteExecute;  				newVirDir.Properties["AccessNoRemoteRead"][0] = AccessNoRemoteRead;  				newVirDir.Properties["AccessNoRemoteScript"][0] = AccessNoRemoteScript;  				newVirDir.Properties["AccessNoRemoteWrite"][0] = AccessNoRemoteWrite;  				newVirDir.Properties["AccessRead"][0] = AccessRead;  				newVirDir.Properties["AccessSource"][0] = AccessSource;  				newVirDir.Properties["AccessScript"][0] = AccessScript;  				newVirDir.Properties["AccessSSL"][0] = AccessSsl;  				newVirDir.Properties["AccessSSL128"][0] = AccessSsl128;  				newVirDir.Properties["AccessSSLMapCert"][0] = AccessSslMapCert;  				newVirDir.Properties["AccessSSLNegotiateCert"][0] = AccessSslNegotiateCert;  				newVirDir.Properties["AccessSSLRequireCert"][0] = AccessSslRequireCert;  				newVirDir.Properties["AccessWrite"][0] = AccessWrite;  				newVirDir.Properties["AnonymousPasswordSync"][0] = AnonymousPasswordSync;  				newVirDir.Properties["AppAllowClientDebug"][0] = AppAllowClientDebug;  				newVirDir.Properties["AppAllowDebugging"][0] = AppAllowDebugging;  				newVirDir.Properties["AspBufferingOn"][0] = AspBufferingOn;  				newVirDir.Properties["AspEnableApplicationRestart"][0] = AspEnableApplicationRestart;  				newVirDir.Properties["AspEnableAspHtmlFallback"][0] = AspEnableAspHtmlFallback;  				newVirDir.Properties["AspEnableChunkedEncoding"][0] = AspEnableChunkedEncoding;  				newVirDir.Properties["AspErrorsToNTLog"][0] = AspErrorsToNTLog;  				newVirDir.Properties["AspEnableParentPaths"][0] = AspEnableParentPaths;  				newVirDir.Properties["AspEnableTypelibCache"][0] = AspEnableTypelibCache;  				newVirDir.Properties["AspExceptionCatchEnable"][0] = AspExceptionCatchEnable;  				newVirDir.Properties["AspLogErrorRequests"][0] = AspLogErrorRequests;  				newVirDir.Properties["AspScriptErrorSentToBrowser"][0] = AspScriptErrorSentToBrowser;  				newVirDir.Properties["AuthAnonymous"][0] = AuthAnonymous;  				newVirDir.Properties["AuthBasic"][0] = AuthBasic;  				newVirDir.Properties["AuthNTLM"][0] = AuthNtlm;  				newVirDir.Properties["AuthPersistSingleRequest"][0] = AuthPersistSingleRequest;  				newVirDir.Properties["CacheControlNoCache"][0] = CacheControlNoCache;  				newVirDir.Properties["CacheISAPI"][0] = CacheIsapi;  				newVirDir.Properties["ContentIndexed"][0] = ContentIndexed;  				newVirDir.Properties["CreateCGIWithNewConsole"][0] = CreateCgiWithNewConsole;  				newVirDir.Properties["CreateProcessAsUser"][0] = CreateProcessAsUser;  				newVirDir.Properties["DirBrowseShowDate"][0] = DirBrowseShowDate;  				newVirDir.Properties["DirBrowseShowExtension"][0] = DirBrowseShowExtension;  				newVirDir.Properties["DirBrowseShowLongDate"][0] = DirBrowseShowLongDate;  				newVirDir.Properties["DirBrowseShowSize"][0] = DirBrowseShowSize;  				newVirDir.Properties["DirBrowseShowTime"][0] = DirBrowseShowTime;  				newVirDir.Properties["DontLog"][0] = DontLog;  				newVirDir.Properties["EnableDefaultDoc"][0] = EnableDefaultDoc;  				newVirDir.Properties["EnableDirBrowsing"][0] = EnableDirBrowsing;  				newVirDir.Properties["EnableDocFooter"][0] = EnableDocFooter;  				newVirDir.Properties["EnableReverseDns"][0] = EnableReverseDns;  				newVirDir.Properties["SSIExecDisable"][0] = SsiExecDisable;  				newVirDir.Properties["AspScriptErrorMessage"][0] = AspScriptErrorMessage;  				newVirDir.Properties["DefaultDoc"][0] = DefaultDoc;    				// Commit the changes  				newVirDir.CommitChanges();  				siteRoot.CommitChanges();  				newVirDir.Close();  				siteRoot.Close();    				bSuccess = true;  				Log.LogMessage(MessageImportance.Normal' "Done.");  			}  			catch (Exception ex)  			{  				Log.LogErrorFromException(ex);  			}
Magic Number,MSBuild.Community.Tasks.Math,Add,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Math\Add.cs,Execute,The following statement contains a magic number: logger.Replace('+'' '='' logger.Length - 2' 1);
Magic Number,MSBuild.Community.Tasks.Schema,DocumentationLoader,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Schema\DocumentationLoader.cs,GetDocumentation,The following statement contains a magic number: string documentationLocation =                  assembly.Location.Substring(0' assembly.Location.Length - 3) + "xml";
Magic Number,MSBuild.Community.Tasks.Schema,DocumentationLoader,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Schema\DocumentationLoader.cs,GetEnumType,The following statement contains a magic number: if (el == null)                  return null;              else              {                  XmlElement enumElement = el.SelectSingleNode("enum") as XmlElement;                  if (enumElement == null)                      return null;                  else                  {                      // get cref attribute                      string enumTypeName = enumElement.GetAttribute("cref");                      if (String.IsNullOrEmpty(enumTypeName))                          return null;                      if (!enumTypeName.StartsWith("T"))                          return null;                        enumTypeName = enumTypeName.Substring(2).Trim();                      // do we have an assembly name ?                      string assemblyName = enumElement.GetAttribute("assembly-name");                      if (!string.IsNullOrEmpty(assemblyName))                      {                          enumTypeName = Assembly.CreateQualifiedName(assemblyName' enumTypeName);                      }                        return Type.GetType(enumTypeName' false' false);                  }              }
Missing Default,MSBuild.Community.Tasks,AssemblyInfo,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\AssemblyInfo.cs,SetDefaultsForLanguage,The following switch statement is missing a default case: switch (codeLanguage)              {                  case CSharp:                      break;                  case VisualBasic:                      break;                  case CPP:                      if (!_attributes.ContainsKey(UnmanagedCodeName))                      {                          UnmanagedCode = true;                      }                      break;              }
Missing Default,MSBuild.Community.Tasks,RegexCompiler,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Regex\RegexCompiler.cs,GetRegexCompilationFile,The following switch statement is missing a default case: switch (reader.Name)                      {                          case "Regex":                              string name = reader.GetAttribute("Name");                              current = new RegexCompilationInfo(""' defaultRegexOptions' name' defaultNamespace' IsPublic);                              regexList.Add(current);                              break;                          case "Pattern":                              if (current == null)                                  break;                                string pattern = reader.ReadElementContentAsString();                              if (string.IsNullOrEmpty(pattern))                                  throw new InvalidOperationException(string.Format(                                      "The regular expression '{0}' is missing the Pattern metadata."' current.Name));                                current.Pattern = pattern;                                break;                          case "Namespace":                              if (current == null)                                  break;                                string nspace = reader.ReadElementContentAsString();                              if (string.IsNullOrEmpty(nspace))                                  break;                                current.Namespace = nspace;                              break;                          case "Options":                              if (current == null)                                  break;                                string options = reader.ReadElementContentAsString();                              if (string.IsNullOrEmpty(options))                                  break;                                RegexOptions regexOptions = GetRegexOptions(options);                              current.Options = regexOptions;                                break;                          case "IsPublic":                              if (current == null)                                  break;                                bool isPublic;                              string pub = reader.ReadElementContentAsString();                              if (!bool.TryParse(pub' out isPublic))                                  break;                                current.IsPublic = isPublic;                              break;                      }
Missing Default,MSBuild.Community.Tasks,ServiceController,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\ServiceController.cs,Execute,The following switch statement is missing a default case: switch (_action)  				{  					case ServiceActions.Start:  						result = StartService(controller);  						break;  					case ServiceActions.Pause:  						result = PauseService(controller);  						break;  					case ServiceActions.Continue:  						result = ContinueService(controller);  						break;  					case ServiceActions.Stop:  						result = StopService(controller);  						break;  					case ServiceActions.Restart:  						result = RestartService(controller);  						break;  				}
Missing Default,MSBuild.Community.Tasks,XmlRead,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\XmlRead.cs,Execute,The following switch statement is missing a default case: switch (expression.ReturnType)                  {                      case XPathResultType.Number:                      case XPathResultType.Boolean:                      case XPathResultType.String:                          _value = navigator.Evaluate(expression).ToString();                          break;                      case XPathResultType.NodeSet:                          XPathNodeIterator nodes = navigator.Select(expression);                                                    Log.LogMessage(Properties.Resources.XmlReadNodes' nodes.Count);                            StringBuilder builder = new StringBuilder();                          while (nodes.MoveNext())                              builder.AppendFormat("{0};"' nodes.Current.Value);                            if (builder.Length > 0)                              builder.Remove(builder.Length - 1' 1);                            _value = builder.ToString();                            break;                  }
Missing Default,MSBuild.Community.Tasks.Fusion,FusionWrapper,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Fusion\FusionWrapper.cs,UninstallAssembly,The following switch statement is missing a default case: switch (result)              {                  case UninstallStatus.Uninstalled:                  case UninstallStatus.AlreadyUninstalled:                  case UninstallStatus.DeletePending:                      successful = true;                      break;              }
Missing Default,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Next,The following switch statement is missing a default case: switch (Get())                              {                                  case '*':                                      if (Peek() == '/')                                      {                                          Get();                                          return ' ';                                      }                                      break;                                  case eof:                                      throw new Exception("Unterminated comment.");                              }
Missing Default,MSBuild.Community.Tasks.JavaScript,JavaScriptCompressor,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\JavaScript\JavaScriptCompressor.cs,Action,The following switch statement is missing a default case: switch (d)              {                  case 1:                      Write(aa);                      goto case 2;                  case 2:                      aa = bb;                      if (aa == '\'' || aa == '"')                      {                          for (;; )                          {                              Write(aa);                              aa = Get();                              if (aa == bb)                              {                                  break;                              }                              if (aa <= '\n')                              {                                  string message = string.Format("Unterminated string literal: '{0}'."' aa);                                  throw new Exception(message);                              }                              if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                          }                      }                      goto case 3;                  case 3:                      bb = Next();                      if (bb == '/' && (aa == '(' || aa == ''' || aa == '='))                      {                          Write(aa);                          Write(bb);                          for (;; )                          {                              aa = Get();                              if (aa == '/')                              {                                  break;                              }                              else if (aa == '\\')                              {                                  Write(aa);                                  aa = Get();                              }                              else if (aa <= '\n')                              {                                  throw new Exception("Unterminated Regular Expression literal.");                              }                              Write(aa);                          }                          bb = Next();                      }                      break;              }
Missing Default,MSBuild.Community.Tasks.Subversion,SvnStatus,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Subversion\SvnStatus.cs,Parse,The following switch statement is missing a default case: switch (name)                      {                          case "entry":                              string file = reader.GetAttribute("path");                              currentItem = new TaskItem(file);                              _modified.Add(currentItem);                              break;                            case "wc-status":                              string props = reader.GetAttribute("props");                              string item = reader.GetAttribute("item");                              string revision = reader.GetAttribute("revision");                                if (currentItem != null)                              {                                  if (props != null) currentItem.SetMetadata("Props"' props);                                  if (item != null) currentItem.SetMetadata("Item"' item);                                  if (revision != null) currentItem.SetMetadata("Revision"' revision);                              }                              break;                            case "commit":                              break;                            case "author":                              var author = reader.Value;                                if (currentItem != null)                              {                                  if (author != null) currentItem.SetMetadata("Author"' author);                              }                              break;                            case "date":                              var date = reader.Value;                                if (currentItem != null)                              {                                  if (date != null) currentItem.SetMetadata("Date"' date);                              }                              break;                      }
Missing Default,MSBuild.Community.Tasks.Subversion,SvnInfo,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Subversion\SvnInfo.cs,Parse,The following switch statement is missing a default case: switch (name)                      {                          case "entry":                              int rev;                              if (int.TryParse(reader.GetAttribute("revision")' out rev))                                  Revision = rev;                                NodeKind = reader.GetAttribute("kind");                              break;                          case "url":                              RepositoryPath = reader.ReadString();                              break;                          case "root":                              RepositoryRoot = reader.ReadString();                              break;                          case "uuid":                              RepositoryUuid = reader.ReadString();                              break;                          case "schedule":                              Schedule = reader.ReadString();                              break;                          case "commit":                              int lastRev;                              if (int.TryParse(reader.GetAttribute("revision")' out lastRev))                                  LastChangedRevision = lastRev;                                break;                          case "author":                              LastChangedAuthor = reader.ReadString();                              break;                          case "date":                              DateTime lastDate;                              if (DateTime.TryParse(reader.ReadString()' out lastDate))                                  LastChangedDate = lastDate;                                break;                      }
Missing Default,MSBuild.Community.Tasks.Tfs,TfsClient,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\Tfs\TfsClient.cs,ParseOutput,The following switch statement is missing a default case: switch (name)              {                  case "Changeset":                      Changeset = value;                      break;                  case "Server path":                      ServerPath = value;                      break;              }
Missing Default,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following switch statement is missing a default case: switch (osVersion.Minor)  				{  					case 0:  					case 1:  						// Windows 2000 or Windows XP: IIS 5  						iisVersion = IISVersion.Five;  						break;  					case 2:  						// Windows Server 2003: IIS 6  						iisVersion = IISVersion.Six;  						break;  				}
Missing Default,MSBuild.Community.Tasks.IIS,WebBase,C:\repos\loresoft_msbuildtasks\Source\MSBuild.Community.Tasks\IIS\WebBase.cs,GetIISVersion,The following switch statement is missing a default case: switch (osVersion.Minor)  				{  					case 0:  						// Windows Vista and Windows Server 2008  						iisVersion = IISVersion.Seven;  						break;  					case 1:  						// Windows 7 and Windows 2008 R2  						iisVersion = IISVersion.SevenFive;  						break;  					case 2:  						// Windows 8 and Windows Server 2012  						iisVersion = IISVersion.Eight;  						break;  					case 3:  						// Windows 8.1 and Windows Server 2012 R2  						iisVersion = IISVersion.EightFive;  						break;  				}
