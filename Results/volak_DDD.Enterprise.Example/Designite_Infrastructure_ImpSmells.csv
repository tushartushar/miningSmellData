Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Demo.Application.Elastic.Infrastructure.Extensions,QueryExtensions,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Extensions\QueryExtensions.cs,Grid,The length of the statement  "            if (filter.Logic == "and" && filter.Filters != null && filter.Filters.Count() == 2 && filter.Filters.All(f => new[] { "lt"' "lte"' "gt"' "gte" }.Contains(f.Operator)) && !filter.Filters.GroupBy(f => f.Field).Skip(1).Any()) " is 222.
Complex Conditional,Demo.Application.Elastic.Infrastructure.Extensions,QueryExtensions,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Extensions\QueryExtensions.cs,Grid,The conditional expression  "filter.Logic == "and" && filter.Filters != null && filter.Filters.Count() == 2 && filter.Filters.All(f => new[] { "lt"' "lte"' "gt"' "gte" }.Contains(f.Operator)) && !filter.Filters.GroupBy(f => f.Field).Skip(1).Any()"  is complex.
Empty Catch Block,Demo.Application.Elastic.Infrastructure.Exceptions,StorageException,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Exceptions\StorageException.cs,BuildMessage,The method has an empty catch block.
Magic Number,Demo.Application.Elastic.Infrastructure.Extensions,QueryExtensions,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Extensions\QueryExtensions.cs,Grid,The following statement contains a magic number: if (filter.Logic == "and" && filter.Filters != null && filter.Filters.Count() == 2 && filter.Filters.All(f => new[] { "lt"' "lte"' "gt"' "gte" }.Contains(f.Operator)) && !filter.Filters.GroupBy(f => f.Field).Skip(1).Any())              {                  var field = filter.Filters.First().Field;                  // Range query                  trues.Add(descriptor.Range(f => f.Field(field).Filter(filter.Filters.First()' filter.Filters.Last())));              }              else if (filter.Filters != null && filter.Filters.Any())              {                  foreach (var child in filter.Filters)                      trues.Add(descriptor.Grid(child));              }
Missing Default,Demo.Application.Elastic.Infrastructure.Extensions,QueryExtensions,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Extensions\QueryExtensions.cs,Grid,The following switch statement is missing a default case: switch (filter.Operator)              {                  case "eq":                      trues.Add(descriptor.Term(filter.Field' filter.Value));                      break;                    case "neq":                      falses.Add(descriptor.Term(filter.Field' filter.Value));                      break;                    case "lt":                      {                          Double value;                          if (Double.TryParse(filter.Value' out value))                              trues.Add(descriptor.Range(f => f.Field(filter.Field).LessThan(value)));                          break;                      }                  case "lte":                      {                          Double value;                          if (Double.TryParse(filter.Value' out value))                              trues.Add(descriptor.Range(f => f.Field(filter.Field).LessThanOrEquals(value)));                          break;                      }                  case "gt":                      {                          Double value;                          if (Double.TryParse(filter.Value' out value))                              trues.Add(descriptor.Range(f => f.Field(filter.Field).GreaterThan(value)));                          break;                      }                  case "gte":                      {                          Double value;                          if (Double.TryParse(filter.Value' out value))                              trues.Add(descriptor.Range(f => f.Field(filter.Field).GreaterThanOrEquals(value)));                          break;                      }                  case "startswith":                      trues.Add(descriptor.Prefix(filter.Field' filter.Value));                      break;                    case "endswith":                      trues.Add(descriptor.MatchPhrasePrefix(mpp => mpp.Analyzer("suffix").Field(filter.Field).Query(filter.Value)));                      break;                    case "contains":                      trues.Add(descriptor.Term(filter.Field' filter.Value));                      break;                    case "doesnotcontain":                      falses.Add(descriptor.Term(filter.Field' filter.Value));                      break;              }
Missing Default,Demo.Application.Elastic.Infrastructure.Extensions,QueryExtensions,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Extensions\QueryExtensions.cs,Filter,The following switch statement is missing a default case: switch (one.Operator)              {                  case "lt":                      descriptor = descriptor.LessThan(fOne);                      break;                    case "lte":                      descriptor = descriptor.LessThanOrEquals(fOne);                      break;                    case "gt":                      descriptor = descriptor.GreaterThan(fOne);                      break;                    case "gte":                      descriptor = descriptor.GreaterThanOrEquals(fOne);                      break;              }
Missing Default,Demo.Application.Elastic.Infrastructure.Extensions,QueryExtensions,C:\repos\volak_DDD.Enterprise.Example\Application\Elastic\Infrastructure\Extensions\QueryExtensions.cs,Filter,The following switch statement is missing a default case: switch (two.Operator)              {                  case "lt":                      descriptor = descriptor.LessThan(fTwo);                      break;                    case "lte":                      descriptor = descriptor.LessThanOrEquals(fTwo);                      break;                    case "gt":                      descriptor = descriptor.GreaterThan(fTwo);                      break;                    case "gte":                      descriptor = descriptor.GreaterThanOrEquals(fTwo);                      break;              }
