Implementation smell,Namespace,Class,File,Method,Description
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Main,The following statement contains a magic number: var N = 4;
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Sync,The following statement contains a magic number: var slow = slowRange.Where(x => x % 2 == 0).Select(x => x + 1);
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Sync,The following statement contains a magic number: var fast = fastRange.Where(x => x % 2 == 0).Select(x => x + 1);
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Sync,The following statement contains a magic number: var brdg = brdgRange.Where(x => x % 2 == 0).Select(x => x + 1).ToEnumerable();
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Async1,The following statement contains a magic number: var slow = slowRange.Where(x => x % 2 == 0).Select(x => x + 1);
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Async1,The following statement contains a magic number: var fast = fastRange.Where(x => x % 2 == 0).Select(x => x + 1);
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Async1,The following statement contains a magic number: var brdg = brdgRange.Where(x => x % 2 == 0).Select(x => x + 1).ToAsyncEnumerable();
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Async2,The following statement contains a magic number: var slow = slowRange.Where(x => Task.FromResult(x % 2 == 0)).Select(x => Task.FromResult(x + 1));
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Async2,The following statement contains a magic number: var fast = fastRange.Where(x => Task.FromResult(x % 2 == 0)).Select(x => Task.FromResult(x + 1));
Magic Number,FasterLinq,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,Async2,The following statement contains a magic number: var brdg = brdgRange.Where(x => Task.FromResult(x % 2 == 0)).Select(x => Task.FromResult(x + 1)).ToAsyncEnumerable();
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              success = true;                              return _next++;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              success = true;                              return _next++;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              success = true;                              return _next++;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return True;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return True;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return True;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: _state == 2 && _next < _end
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              return True;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              return True;                          }                          break;                  }
Magic Number,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              return True;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (_enumerator.MoveNext())                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (_enumerator.MoveNext())                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (_enumerator.MoveNext())                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,EnumerableToFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          success = _enumerator.MoveNext();                          if (success)                          {                              return _enumerator.Current;                          }                          break;                  }
Magic Number,System.Labs.Linq,EnumerableToFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          success = _enumerator.MoveNext();                          if (success)                          {                              return _enumerator.Current;                          }                          break;                  }
Magic Number,System.Labs.Linq,EnumerableToFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          success = _enumerator.MoveNext();                          if (success)                          {                              return _enumerator.Current;                          }                          break;                  }
Magic Number,System.Labs.Linq,FastEnumerableToEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _current = _enumerator.TryGetNext(out var success);                          return success;                  }
Magic Number,System.Labs.Linq,FastEnumerableToEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _current = _enumerator.TryGetNext(out var success);                          return success;                  }
Magic Number,System.Labs.Linq,FastEnumerableToEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _current = _enumerator.TryGetNext(out var success);                          return success;                  }
Magic Number,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          var item = _enumerator.TryGetNext(out success);                          if (success)                          {                              return _selector(item);                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          var item = _enumerator.TryGetNext(out success);                          if (success)                          {                              return _selector(item);                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          var item = _enumerator.TryGetNext(out success);                          if (success)                          {                              return _selector(item);                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Magic Number,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Magic Number,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Magic Number,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (true)                          {                              var item = _enumerator.TryGetNext(out success);                              if (!success)                              {                                  break;                              }                                if (_predicate(item))                              {                                  return item;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (true)                          {                              var item = _enumerator.TryGetNext(out success);                              if (!success)                              {                                  break;                              }                                if (_predicate(item))                              {                                  return item;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (true)                          {                              var item = _enumerator.TryGetNext(out success);                              if (!success)                              {                                  break;                              }                                if (_predicate(item))                              {                                  return item;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Magic Number,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Magic Number,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Magic Number,System.Labs.Linq,SelectIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = await _selector(_enumerator.Current).ConfigureAwait(false);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = await _selector(_enumerator.Current).ConfigureAwait(false);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,SelectIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = await _selector(_enumerator.Current).ConfigureAwait(false);                              return true;                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (await _predicate(item).ConfigureAwait(false))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (await _predicate(item).ConfigureAwait(false))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,WhereIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (await _predicate(item).ConfigureAwait(false))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Magic Number,System.Labs.Linq,AsyncEnumerableToAsyncFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _hasNext = await _enumerator.MoveNextAsync().ConfigureAwait(false);                          return _hasNext;                  }
Magic Number,System.Labs.Linq,AsyncEnumerableToAsyncFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _hasNext = await _enumerator.MoveNextAsync().ConfigureAwait(false);                          return _hasNext;                  }
Magic Number,System.Labs.Linq,AsyncEnumerableToAsyncFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _hasNext = await _enumerator.MoveNextAsync().ConfigureAwait(false);                          return _hasNext;                  }
Magic Number,System.Labs.Linq,AsyncFastEnumerableToAsyncEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _current = item;                                      return true;                                  }                              }                          } while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,AsyncFastEnumerableToAsyncEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _current = item;                                      return true;                                  }                              }                          } while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,AsyncFastEnumerableToAsyncEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _current = item;                                      return true;                                  }                              }                          } while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,SelectFastIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _hasNext = true;                                      _next = await _selector(item).ConfigureAwait(false);                                      return true;                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,SelectFastIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _hasNext = true;                                      _next = await _selector(item).ConfigureAwait(false);                                      return true;                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,SelectFastIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _hasNext = true;                                      _next = await _selector(item).ConfigureAwait(false);                                      return true;                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,WhereFastIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      if (await _predicate(item).ConfigureAwait(false))                                      {                                          _hasNext = true;                                          _next = item;                                          return true;                                      }                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,WhereFastIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      if (await _predicate(item).ConfigureAwait(false))                                      {                                          _hasNext = true;                                          _next = item;                                          return true;                                      }                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Magic Number,System.Labs.Linq,WhereFastIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following statement contains a magic number: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      if (await _predicate(item).ConfigureAwait(false))                                      {                                          _hasNext = true;                                          _next = item;                                          return true;                                      }                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Missing Default,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return true;                          }                          break;                  }
Missing Default,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              success = true;                              return _next++;                          }                          break;                  }
Missing Default,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              _current = _next++;                              return True;                          }                          break;                  }
Missing Default,System.Labs.Linq,RangeIterator,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _next = _start;                          _state = 2;                          goto case 2;                        case 2:                          if (_next < _end)                          {                              return True;                          }                          break;                  }
Missing Default,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (_enumerator.MoveNext())                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Missing Default,System.Labs.Linq,SelectIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = _selector(_enumerator.Current);                              return true;                          }                          break;                  }
Missing Default,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (_enumerator.MoveNext())                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Missing Default,System.Labs.Linq,WhereIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (_predicate(item))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Missing Default,System.Labs.Linq,EnumerableToFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          success = _enumerator.MoveNext();                          if (success)                          {                              return _enumerator.Current;                          }                          break;                  }
Missing Default,System.Labs.Linq,FastEnumerableToEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _current = _enumerator.TryGetNext(out var success);                          return success;                  }
Missing Default,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          var item = _enumerator.TryGetNext(out success);                          if (success)                          {                              return _selector(item);                          }                          break;                  }
Missing Default,System.Labs.Linq,SelectFastIterator<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Missing Default,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,TryGetNext,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (true)                          {                              var item = _enumerator.TryGetNext(out success);                              if (!success)                              {                                  break;                              }                                if (_predicate(item))                              {                                  return item;                              }                          }                          break;                  }
Missing Default,System.Labs.Linq,WhereFastIterator<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          return _enumerator.WaitForNextAsync();                  }
Missing Default,System.Labs.Linq,SelectIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          if (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              _current = await _selector(_enumerator.Current).ConfigureAwait(false);                              return true;                          }                          break;                  }
Missing Default,System.Labs.Linq,WhereIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          while (await _enumerator.MoveNextAsync().ConfigureAwait(false))                          {                              var item = _enumerator.Current;                                if (await _predicate(item).ConfigureAwait(false))                              {                                  _current = item;                                  return true;                              }                          }                          break;                  }
Missing Default,System.Labs.Linq,AsyncEnumerableToAsyncFastEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          _hasNext = await _enumerator.MoveNextAsync().ConfigureAwait(false);                          return _hasNext;                  }
Missing Default,System.Labs.Linq,AsyncFastEnumerableToAsyncEnumerable<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,MoveNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _current = item;                                      return true;                                  }                              }                          } while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Missing Default,System.Labs.Linq,SelectFastIteratorWithTask<T;R>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      _hasNext = true;                                      _next = await _selector(item).ConfigureAwait(false);                                      return true;                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
Missing Default,System.Labs.Linq,WhereFastIteratorWithTask<T>,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Ix.NET\Source\FasterLinq\Program.cs,WaitForNextAsync,The following switch statement is missing a default case: switch (_state)                  {                      case 1:                          _enumerator = _source.GetAsyncEnumerator();                          _state = 2;                          goto case 2;                        case 2:                          do                          {                              while (true)                              {                                  var item = _enumerator.TryGetNext(out var success);                                    if (!success)                                  {                                      break;                                  }                                  else                                  {                                      if (await _predicate(item).ConfigureAwait(false))                                      {                                          _hasNext = true;                                          _next = item;                                          return true;                                      }                                  }                              }                          }                          while (await _enumerator.WaitForNextAsync().ConfigureAwait(false));                            break;                  }
