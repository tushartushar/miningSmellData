Implementation smell,Namespace,Class,File,Method,Description
Long Statement,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The length of the statement  "                var res3 = Observable.Interval(TimeSpan.FromDays(1)' s).TakeUntil(new DateTimeOffset(2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select(_ => s.Clock); " is 147.
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process((xs' s) =>              {                  var res0 = xs.Timestamp(s);                  res0.Subscribe(t => Console.WriteLine("0> " + t));                    var res1 = xs.Where(x => x % 2 != 0).Timestamp(s);                  res1.Subscribe(t => Console.WriteLine("1> " + t));                    var res2 = xs.Buffer(TimeSpan.FromDays(63)' s).Select(b => b.Count).Timestamp(s);                  res2.Subscribe(t => Console.WriteLine("2> " + t));                    var res3 = Observable.Interval(TimeSpan.FromDays(1)' s).TakeUntil(new DateTimeOffset(2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select(_ => s.Clock);                  res3.Subscribe(t =>                  {                      Console.ForegroundColor = ConsoleColor.Green;                      Console.WriteLine("It's now " + t);                      Console.ResetColor();                  });                    //                  // If the end of the log should cause the scheduler to stop' add the following line:                  //                  // xs.Subscribe(_ => { }' s.Stop);              });
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process((xs' s) =>              {                  var res0 = xs.Timestamp(s);                  res0.Subscribe(t => Console.WriteLine("0> " + t));                    var res1 = xs.Where(x => x % 2 != 0).Timestamp(s);                  res1.Subscribe(t => Console.WriteLine("1> " + t));                    var res2 = xs.Buffer(TimeSpan.FromDays(63)' s).Select(b => b.Count).Timestamp(s);                  res2.Subscribe(t => Console.WriteLine("2> " + t));                    var res3 = Observable.Interval(TimeSpan.FromDays(1)' s).TakeUntil(new DateTimeOffset(2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select(_ => s.Clock);                  res3.Subscribe(t =>                  {                      Console.ForegroundColor = ConsoleColor.Green;                      Console.WriteLine("It's now " + t);                      Console.ResetColor();                  });                    //                  // If the end of the log should cause the scheduler to stop' add the following line:                  //                  // xs.Subscribe(_ => { }' s.Stop);              });
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process((xs' s) =>              {                  var res0 = xs.Timestamp(s);                  res0.Subscribe(t => Console.WriteLine("0> " + t));                    var res1 = xs.Where(x => x % 2 != 0).Timestamp(s);                  res1.Subscribe(t => Console.WriteLine("1> " + t));                    var res2 = xs.Buffer(TimeSpan.FromDays(63)' s).Select(b => b.Count).Timestamp(s);                  res2.Subscribe(t => Console.WriteLine("2> " + t));                    var res3 = Observable.Interval(TimeSpan.FromDays(1)' s).TakeUntil(new DateTimeOffset(2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select(_ => s.Clock);                  res3.Subscribe(t =>                  {                      Console.ForegroundColor = ConsoleColor.Green;                      Console.WriteLine("It's now " + t);                      Console.ResetColor();                  });                    //                  // If the end of the log should cause the scheduler to stop' add the following line:                  //                  // xs.Subscribe(_ => { }' s.Stop);              });
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process((xs' s) =>              {                  var res0 = xs.Timestamp(s);                  res0.Subscribe(t => Console.WriteLine("0> " + t));                    var res1 = xs.Where(x => x % 2 != 0).Timestamp(s);                  res1.Subscribe(t => Console.WriteLine("1> " + t));                    var res2 = xs.Buffer(TimeSpan.FromDays(63)' s).Select(b => b.Count).Timestamp(s);                  res2.Subscribe(t => Console.WriteLine("2> " + t));                    var res3 = Observable.Interval(TimeSpan.FromDays(1)' s).TakeUntil(new DateTimeOffset(2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select(_ => s.Clock);                  res3.Subscribe(t =>                  {                      Console.ForegroundColor = ConsoleColor.Green;                      Console.WriteLine("It's now " + t);                      Console.ResetColor();                  });                    //                  // If the end of the log should cause the scheduler to stop' add the following line:                  //                  // xs.Subscribe(_ => { }' s.Stop);              });
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,GetLog,The following statement contains a magic number: var date = new DateTimeOffset(2012' i' 1' 12' 0' 0' TimeSpan.Zero);
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,GetLog,The following statement contains a magic number: var date = new DateTimeOffset(2012' i' 1' 12' 0' 0' TimeSpan.Zero);
Magic Number,HistoricalScheduling,Program,C:\research\architectureSmells\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,GetLog,The following statement contains a magic number: i <= 12
