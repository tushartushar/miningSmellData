Implementation smell,Namespace,Class,File,Method,Description
Long Method,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The method has 326 lines of code.
Long Method,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The method has 232 lines of code.
Complex Method,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,Cyclomatic complexity of the method is 45
Complex Method,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,Cyclomatic complexity of the method is 29
Long Parameter List,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Process,The method has 8 parameters. Parameters: root' sourceAssembly' targetAssembly' targetFile' sourceTypeName' targetTypeName' includeAsync' createAliases
Long Parameter List,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The method has 7 parameters. Parameters: input' xml' output' sourceTypeName' targetTypeName' includeAsync' createAliases
Long Parameter List,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The method has 5 parameters. Parameters: t' docs' typeName' includeAsync' createAliases
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "            var docs = XDocument.Load(xml).Root.Element("members").Elements("member").ToDictionary(m => m.Attribute("name").Value' m => m); " is 127.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "            var except = new[] { "ToAsync"' "FromAsyncPattern"' "And"' "Then"' "GetEnumerator"' "get_Provider"' "Wait"' "ForEach"' "ForEachAsync"' "GetAwaiter"' "First"' "FirstOrDefault"' "Last"' "LastOrDefault"' "Single"' "SingleOrDefault"' "Subscribe"' "AsQbservable"' "AsObservable"' "ToEvent"' "ToEventPattern" }; " is 305.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "            foreach (var m in t.GetMethods(BindingFlags.Public | BindingFlags.Static).OrderBy(m => m.Name).ThenBy(m => !m.IsGenericMethod ? "" : string.Join("'"' m.GetGenericArguments().Select(p => p.Name))).ThenBy(m => string.Join("'"' m.GetParameters().Select(p => p.Name + ":" + p.ParameterType.FullName))).Where(m => !except.Contains(m.Name))) " is 335.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "                            WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>"); " is 121.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "                            WriteLine("/// <remarks>This operator requires the source's <see cref=\"IQbservableProvider\"/> object (see <see cref=\"IQbservable.Provider\"/>) to implement <see cref=\"IQueryProvider\"/>.</remarks>"); " is 203.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "                    WriteLine("InfoOf(() => " + typeName + "." + name + g + "(" + string.Join("' "' ptps.Select(pt => "default(" + pt + ")")) + "))" + cma); " is 136.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The length of the statement  "                        WriteLine("((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' m.GetGenericArguments().Select(ga => "typeof(" + ga.Name + ")").ToArray()) + ")" + cma); " is 183.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                            WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>"); " is 121.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                        WriteLine("public static " + retType + " ToAsync" + genArgss + "(this IQbservableProvider provider' " + actType + " " + fParam + (withScheduler ? "' IScheduler scheduler" : "") + ")"); " is 184.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                        WriteLine("var m = InfoOf(() => " + typeName + ".ToAsync" + genArgss + "(" + string.Join("' "' aprs.Select(pt => "default(" + pt + ")")) + "));"); " is 146.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                            WriteLine("var m = ((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' genArgs.Select(a => "typeof(" + a + ")").ToArray()) + ");"); " is 163.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                    var begType = "Expression<Func<" + string.Join("' "' genArgs.Concat(new[] { "AsyncCallback"' "object"' "IAsyncResult" }).ToArray()) + ">>"; " is 139.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                        var docArgB = "System.Func{" + string.Join("'"' Enumerable.Range(0' genArgs.Length).Select(j => "``" + j)) + (genArgs.Length > 0 ? "'" : "") + "System.AsyncCallback'System.Object'System.IAsyncResult}"; " is 201.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                        var docArgB = "System.Func{" + string.Join("'"' Enumerable.Range(0' genArgs.Length - 1).Select(j => "``" + j)) + (genArgs.Length > 1 ? "'" : "") + "System.AsyncCallback'System.Object'System.IAsyncResult}"; " is 205.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                        WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>"); " is 121.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                    WriteLine("public static " + retType + " FromAsyncPattern" + genArgss + "(this IQbservableProvider provider' " + begType + " begin' " + endType + "end)"); " is 154.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                    WriteLine("var m = InfoOf(() => " + typeName + ".FromAsyncPattern" + genArgss + "(" + string.Join("' "' aprs.Select(pt => "default(" + pt + ")")) + "));"); " is 155.
Long Statement,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The length of the statement  "                        WriteLine("var m = ((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' genArgs.Select(a => "typeof(" + a + ")").ToArray()) + ");"); " is 163.
Complex Conditional,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The conditional expression  "isObs(pt) || pt.IsArray && isObs(pt.GetElementType()) || isEnm(pt) || pt.IsArray && isEnm(pt.GetElementType())"  is complex.
Empty Catch Block,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The method has an empty catch block.
Magic Number,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The following statement contains a magic number: foreach (var m in t.GetMethods(BindingFlags.Public | BindingFlags.Static).OrderBy(m => m.Name).ThenBy(m => !m.IsGenericMethod ? "" : string.Join("'"' m.GetGenericArguments().Select(p => p.Name))).ThenBy(m => string.Join("'"' m.GetParameters().Select(p => p.Name + ":" + p.ParameterType.FullName))).Where(m => !except.Contains(m.Name)))              {                  var docName = ToDocName(m);                  var xmlDoc = default(XElement);                  if (!docs.TryGetValue(docName' out xmlDoc))                  {                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.WriteLine("Missing XML documentation for {0}"' docName);                      Console.ResetColor();                  }                    var p = m.GetParameters();                  if (m.Name == "When" && p.Length == 1 && p.Single().ParameterType.ToString().Contains("Plan"))                      continue;                    var funky = from pi in p                              let pt = pi.ParameterType                              where pt.IsGenericType                              let ptgtd = pt.GetGenericTypeDefinition()                              where ptgtd.Name.StartsWith("Func")                              where ptgtd.GetGenericArguments().Count() > 5                              select pi;                    //var isLargeArity = funky.Any();                    var hasTask = p.Any(pa => ContainsTask(pa.ParameterType));                    var ret = m.ReturnType;                  if (ret.IsGenericType)                  {                      var d = ret.GetGenericTypeDefinition();                      if (d.Name.StartsWith("IConnectableObservable") || d.Name.StartsWith("ListObservable"))                          continue;                      if (d != typeof(IObservable<>) && d != typeof(IEnumerable<>))                          throw new InvalidOperationException("Invalid return type for " + m.Name);                  }                  else                      throw new InvalidOperationException("Invalid return type for " + m.Name);                    ret = ret.Iconize();                    var hasProvider = true;                  if (p.Length > 0)                  {                      var f = p.First();                      if (f.ParameterType.IsGenericType)                      {                          var d = f.ParameterType.GetGenericTypeDefinition();                          if (d == typeof(IObservable<>)) // Check - e.g. Amb    || d == typeof(IEnumerable<>))                              hasProvider = false;                      }                  }                    var nulls = new List<string>();                  var pars = new List<string>();                  var parNames = new List<string>();                  var ptps = new List<string>();                  var args = new List<string>();                    var firstArg = hasProvider ? "IQbservableProvider" : p.First().ParameterType.Iconize().ToString2();                  var firstName = hasProvider ? "provider" : p.First().Name;                  pars.Add("this " + firstArg + " " + firstName);                  ptps.Add(firstArg);                  if (!hasProvider)                      args.Add(firstName + ".Expression");                  else                      args.Add("Expression.Constant(provider' typeof(IQbservableProvider))");                  nulls.Add(firstName);                  parNames.Add(firstName);                    var rem = hasProvider ? p : p.Skip(1);                  var isCreateAsync = false;                  foreach (var q in rem)                  {                      var pt = q.ParameterType;                      if (pt.Name.StartsWith("Func") || pt.Name.StartsWith("Action"))                      {                          if (pt.Name.StartsWith("Func") && pt.GetGenericArguments().Last().Name.StartsWith("Task"))                          {                              isCreateAsync = true;                          }                          pt = typeof(Expression<>).MakeGenericType(pt);                          args.Add(q.Name);                      }                      else                      {                          var isObs = new Func<Type' bool>(tt => tt.IsGenericType && tt.GetGenericTypeDefinition() == typeof(IObservable<>));                          var isEnm = new Func<Type' bool>(tt => tt.IsGenericType && tt.GetGenericTypeDefinition() == typeof(IEnumerable<>));                          if (isObs(pt) || pt.IsArray && isObs(pt.GetElementType()) || isEnm(pt) || pt.IsArray && isEnm(pt.GetElementType()))                              args.Add("GetSourceExpression(" + q.Name + ")");                          else                              args.Add("Expression.Constant(" + q.Name + "' typeof(" + pt.ToString2() + "))");                      }                        var pts = pt.ToString2();                      var par = pts + " " + q.Name;                      if (q.IsDefined(typeof(ParamArrayAttribute)' false))                          par = "params " + par;                      pars.Add(par);                      ptps.Add(pts);                      parNames.Add(q.Name);                        if (!q.ParameterType.IsValueType && !q.ParameterType.IsGenericParameter)                          nulls.Add(q.Name);                  }                    var factory = hasProvider ? "provider" : p.First().Name + ".Provider";                  var requiresQueryProvider = ret.GetGenericTypeDefinition() == typeof(IQueryable<>);                  if (requiresQueryProvider)                      factory = "((IQueryProvider)" + factory + ")";                                    var genArgs = m.GetGenericArguments().Select(a => a.ToString2()).ToList();                  var g = genArgs.Count > 0 ? "<" + string.Join("' "' genArgs) + ">" : "";                  var name = m.Name;                  if (name == "ToEnumerable")                      name = "ToQueryable";                    var isExp = m.GetCustomAttributes(true).Where(a => a.GetType().Name.Equals("ExperimentalAttribute")).Any();                  if (isExp)                      WriteLine("#if !STABLE"' true);                    var obsolete = m.GetCustomAttributes(typeof(ObsoleteAttribute)' false).Cast<ObsoleteAttribute>().SingleOrDefault();                    var poundIf = false;                  if (name == "ObserveOn" || name == "SubscribeOn")                  {                      if (p.Last().ParameterType.Name == "DispatcherScheduler")                      {                          WriteLine("#if !MONO"' true);                          poundIf = true;                      }                      if (p.Last().ParameterType.Name == "ControlScheduler")                      {                          WriteLine("#if DESKTOPCLR"' true);                          poundIf = true;                      }                  }                  if (name == "ObserveOnDispatcher" || name == "SubscribeOnDispatcher")                  {                      WriteLine("#if !MONO"' true);                      poundIf = true;                  }                  if (isCreateAsync || hasTask)                  {                      WriteLine("#if !NO_TPL"' true);                      poundIf = true;                  }                  //if (name == "Remotable")                  //{                  //    WriteLine("#if DESKTOPCLR"' true);                  //    poundIf = true;                  //    if (nulls.Contains("lease"))                  //        nulls.Remove("lease");                  //}                  //if (isLargeArity)                  //{                  //    WriteLine("#if !NO_LARGEARITY"' true);                  //}                    var isFep = m.Name == "FromEventPattern";                  var isGenFep = isFep && m.GetGenericArguments().Any(a => a.Name == "TEventArgs");                  var isNonGenFep = isFep && !isGenFep;                    for (var r = 0; r < (isNonGenFep ? 2 : 1); r++)                  {                      var retStr = ret.ToString2();                        if (isNonGenFep)                      {                          if (r == 0)                          {                              WriteLine("#if !NO_EVENTARGS_CONSTRAINT"' true);                          }                          else if (r == 1)                          {                              WriteLine("#else"' true);                              retStr = retStr.Replace("EventPattern<EventArgs>"' "EventPattern<object>");                          }                      }                        if (xmlDoc != null)                      {                          foreach (var docLine in xmlDoc.Element("summary").ToString().Split('\n'))                              WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                            if (hasProvider)                              WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>");                            foreach (var docLine in xmlDoc.Elements().Where(e => e.Name != "summary").SelectMany(e => e.ToString().Split('\n')))                              WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                            if (requiresQueryProvider)                              WriteLine("/// <remarks>This operator requires the source's <see cref=\"IQbservableProvider\"/> object (see <see cref=\"IQbservable.Provider\"/>) to implement <see cref=\"IQueryProvider\"/>.</remarks>");                      }                        if (isExp)                          WriteLine("[Experimental]");                        if (obsolete != null)                          WriteLine("[Obsolete(\"" + obsolete.Message + "\")]");                        WriteLine("public static " + retStr + " " + name + g + "(" + string.Join("' "' pars) + ")");                      if (isGenFep)                      {                          WriteLine("#if !NO_EVENTARGS_CONSTRAINT"' true);                          Indent();                          WriteLine("where TEventArgs : EventArgs");                          Outdent();                          WriteLine("#endif"' true);                      }                      else                      {                          var genCons = (from a in m.GetGenericArguments()                                         from c in a.GetGenericParameterConstraints()                                         select new { a' c })                                        .ToList();                            if (genCons.Count > 0)                          {                              Indent();                              foreach (var gc in genCons)                                  WriteLine("where " + gc.a.Name + " : " + gc.c.Name);                              Outdent();                          }                      }                        if (createAliases)                      {                          string underlying = "";                            switch (name)                          {                              case "Map":                                   underlying = "Select";                                  break;                              case "FlatMap":                                  underlying = "SelectMany";                                  break;                              case "Filter":                                   underlying = "Where";                                  break;                          }                            WriteLine("{");                          Indent();                          WriteLine("return Qbservable." + underlying + g + "(" + string.Join("' "' parNames) + ");");                          Outdent();                          WriteLine("}");                          continue;                      }                        WriteLine("{");                      Indent();                      foreach (var n in nulls)                      {                          WriteLine("if (" + n + " == null)");                          Indent();                          WriteLine("throw new ArgumentNullException(\"" + n + "\");");                          Outdent();                      }                      WriteLine("");                        var gArg = ret.GetGenericArguments().Single().ToString2();                      if (isNonGenFep && r == 1)                      {                          gArg = gArg.Replace("EventPattern<EventArgs>"' "EventPattern<object>");                      }                        WriteLine("return " + factory + ".CreateQuery<" + gArg + ">(");                      Indent();                      WriteLine("Expression.Call(");                      Indent();                      WriteLine("null'");                      var cma = args.Count > 0 ? "'" : "";                      WriteLine("#if CRIPPLED_REFLECTION"' true);                      WriteLine("InfoOf(() => " + typeName + "." + name + g + "(" + string.Join("' "' ptps.Select(pt => "default(" + pt + ")")) + "))" + cma);                      WriteLine("#else"' true);                      if (!m.IsGenericMethod)                          WriteLine("(MethodInfo)MethodInfo.GetCurrentMethod()" + cma);                      else                          WriteLine("((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' m.GetGenericArguments().Select(ga => "typeof(" + ga.Name + ")").ToArray()) + ")" + cma);                      WriteLine("#endif"' true);                      for (int j = 0; j < args.Count; j++)                          WriteLine(args[j] + (j < args.Count - 1 ? "'" : ""));                      Outdent();                      WriteLine(")");                      Outdent();                      WriteLine(");");                      Outdent();                      WriteLine("}");                        if (isNonGenFep && r == 1)                          WriteLine("#endif"' true);                  }                    if (poundIf)                      WriteLine("#endif"' true);                  if (isExp)                      WriteLine("#endif"' true);                  //if (isLargeArity)                  //    WriteLine("#endif"' true);                  WriteLine("");              }
Magic Number,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The following statement contains a magic number: foreach (var m in t.GetMethods(BindingFlags.Public | BindingFlags.Static).OrderBy(m => m.Name).ThenBy(m => !m.IsGenericMethod ? "" : string.Join("'"' m.GetGenericArguments().Select(p => p.Name))).ThenBy(m => string.Join("'"' m.GetParameters().Select(p => p.Name + ":" + p.ParameterType.FullName))).Where(m => !except.Contains(m.Name)))              {                  var docName = ToDocName(m);                  var xmlDoc = default(XElement);                  if (!docs.TryGetValue(docName' out xmlDoc))                  {                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.WriteLine("Missing XML documentation for {0}"' docName);                      Console.ResetColor();                  }                    var p = m.GetParameters();                  if (m.Name == "When" && p.Length == 1 && p.Single().ParameterType.ToString().Contains("Plan"))                      continue;                    var funky = from pi in p                              let pt = pi.ParameterType                              where pt.IsGenericType                              let ptgtd = pt.GetGenericTypeDefinition()                              where ptgtd.Name.StartsWith("Func")                              where ptgtd.GetGenericArguments().Count() > 5                              select pi;                    //var isLargeArity = funky.Any();                    var hasTask = p.Any(pa => ContainsTask(pa.ParameterType));                    var ret = m.ReturnType;                  if (ret.IsGenericType)                  {                      var d = ret.GetGenericTypeDefinition();                      if (d.Name.StartsWith("IConnectableObservable") || d.Name.StartsWith("ListObservable"))                          continue;                      if (d != typeof(IObservable<>) && d != typeof(IEnumerable<>))                          throw new InvalidOperationException("Invalid return type for " + m.Name);                  }                  else                      throw new InvalidOperationException("Invalid return type for " + m.Name);                    ret = ret.Iconize();                    var hasProvider = true;                  if (p.Length > 0)                  {                      var f = p.First();                      if (f.ParameterType.IsGenericType)                      {                          var d = f.ParameterType.GetGenericTypeDefinition();                          if (d == typeof(IObservable<>)) // Check - e.g. Amb    || d == typeof(IEnumerable<>))                              hasProvider = false;                      }                  }                    var nulls = new List<string>();                  var pars = new List<string>();                  var parNames = new List<string>();                  var ptps = new List<string>();                  var args = new List<string>();                    var firstArg = hasProvider ? "IQbservableProvider" : p.First().ParameterType.Iconize().ToString2();                  var firstName = hasProvider ? "provider" : p.First().Name;                  pars.Add("this " + firstArg + " " + firstName);                  ptps.Add(firstArg);                  if (!hasProvider)                      args.Add(firstName + ".Expression");                  else                      args.Add("Expression.Constant(provider' typeof(IQbservableProvider))");                  nulls.Add(firstName);                  parNames.Add(firstName);                    var rem = hasProvider ? p : p.Skip(1);                  var isCreateAsync = false;                  foreach (var q in rem)                  {                      var pt = q.ParameterType;                      if (pt.Name.StartsWith("Func") || pt.Name.StartsWith("Action"))                      {                          if (pt.Name.StartsWith("Func") && pt.GetGenericArguments().Last().Name.StartsWith("Task"))                          {                              isCreateAsync = true;                          }                          pt = typeof(Expression<>).MakeGenericType(pt);                          args.Add(q.Name);                      }                      else                      {                          var isObs = new Func<Type' bool>(tt => tt.IsGenericType && tt.GetGenericTypeDefinition() == typeof(IObservable<>));                          var isEnm = new Func<Type' bool>(tt => tt.IsGenericType && tt.GetGenericTypeDefinition() == typeof(IEnumerable<>));                          if (isObs(pt) || pt.IsArray && isObs(pt.GetElementType()) || isEnm(pt) || pt.IsArray && isEnm(pt.GetElementType()))                              args.Add("GetSourceExpression(" + q.Name + ")");                          else                              args.Add("Expression.Constant(" + q.Name + "' typeof(" + pt.ToString2() + "))");                      }                        var pts = pt.ToString2();                      var par = pts + " " + q.Name;                      if (q.IsDefined(typeof(ParamArrayAttribute)' false))                          par = "params " + par;                      pars.Add(par);                      ptps.Add(pts);                      parNames.Add(q.Name);                        if (!q.ParameterType.IsValueType && !q.ParameterType.IsGenericParameter)                          nulls.Add(q.Name);                  }                    var factory = hasProvider ? "provider" : p.First().Name + ".Provider";                  var requiresQueryProvider = ret.GetGenericTypeDefinition() == typeof(IQueryable<>);                  if (requiresQueryProvider)                      factory = "((IQueryProvider)" + factory + ")";                                    var genArgs = m.GetGenericArguments().Select(a => a.ToString2()).ToList();                  var g = genArgs.Count > 0 ? "<" + string.Join("' "' genArgs) + ">" : "";                  var name = m.Name;                  if (name == "ToEnumerable")                      name = "ToQueryable";                    var isExp = m.GetCustomAttributes(true).Where(a => a.GetType().Name.Equals("ExperimentalAttribute")).Any();                  if (isExp)                      WriteLine("#if !STABLE"' true);                    var obsolete = m.GetCustomAttributes(typeof(ObsoleteAttribute)' false).Cast<ObsoleteAttribute>().SingleOrDefault();                    var poundIf = false;                  if (name == "ObserveOn" || name == "SubscribeOn")                  {                      if (p.Last().ParameterType.Name == "DispatcherScheduler")                      {                          WriteLine("#if !MONO"' true);                          poundIf = true;                      }                      if (p.Last().ParameterType.Name == "ControlScheduler")                      {                          WriteLine("#if DESKTOPCLR"' true);                          poundIf = true;                      }                  }                  if (name == "ObserveOnDispatcher" || name == "SubscribeOnDispatcher")                  {                      WriteLine("#if !MONO"' true);                      poundIf = true;                  }                  if (isCreateAsync || hasTask)                  {                      WriteLine("#if !NO_TPL"' true);                      poundIf = true;                  }                  //if (name == "Remotable")                  //{                  //    WriteLine("#if DESKTOPCLR"' true);                  //    poundIf = true;                  //    if (nulls.Contains("lease"))                  //        nulls.Remove("lease");                  //}                  //if (isLargeArity)                  //{                  //    WriteLine("#if !NO_LARGEARITY"' true);                  //}                    var isFep = m.Name == "FromEventPattern";                  var isGenFep = isFep && m.GetGenericArguments().Any(a => a.Name == "TEventArgs");                  var isNonGenFep = isFep && !isGenFep;                    for (var r = 0; r < (isNonGenFep ? 2 : 1); r++)                  {                      var retStr = ret.ToString2();                        if (isNonGenFep)                      {                          if (r == 0)                          {                              WriteLine("#if !NO_EVENTARGS_CONSTRAINT"' true);                          }                          else if (r == 1)                          {                              WriteLine("#else"' true);                              retStr = retStr.Replace("EventPattern<EventArgs>"' "EventPattern<object>");                          }                      }                        if (xmlDoc != null)                      {                          foreach (var docLine in xmlDoc.Element("summary").ToString().Split('\n'))                              WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                            if (hasProvider)                              WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>");                            foreach (var docLine in xmlDoc.Elements().Where(e => e.Name != "summary").SelectMany(e => e.ToString().Split('\n')))                              WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                            if (requiresQueryProvider)                              WriteLine("/// <remarks>This operator requires the source's <see cref=\"IQbservableProvider\"/> object (see <see cref=\"IQbservable.Provider\"/>) to implement <see cref=\"IQueryProvider\"/>.</remarks>");                      }                        if (isExp)                          WriteLine("[Experimental]");                        if (obsolete != null)                          WriteLine("[Obsolete(\"" + obsolete.Message + "\")]");                        WriteLine("public static " + retStr + " " + name + g + "(" + string.Join("' "' pars) + ")");                      if (isGenFep)                      {                          WriteLine("#if !NO_EVENTARGS_CONSTRAINT"' true);                          Indent();                          WriteLine("where TEventArgs : EventArgs");                          Outdent();                          WriteLine("#endif"' true);                      }                      else                      {                          var genCons = (from a in m.GetGenericArguments()                                         from c in a.GetGenericParameterConstraints()                                         select new { a' c })                                        .ToList();                            if (genCons.Count > 0)                          {                              Indent();                              foreach (var gc in genCons)                                  WriteLine("where " + gc.a.Name + " : " + gc.c.Name);                              Outdent();                          }                      }                        if (createAliases)                      {                          string underlying = "";                            switch (name)                          {                              case "Map":                                   underlying = "Select";                                  break;                              case "FlatMap":                                  underlying = "SelectMany";                                  break;                              case "Filter":                                   underlying = "Where";                                  break;                          }                            WriteLine("{");                          Indent();                          WriteLine("return Qbservable." + underlying + g + "(" + string.Join("' "' parNames) + ");");                          Outdent();                          WriteLine("}");                          continue;                      }                        WriteLine("{");                      Indent();                      foreach (var n in nulls)                      {                          WriteLine("if (" + n + " == null)");                          Indent();                          WriteLine("throw new ArgumentNullException(\"" + n + "\");");                          Outdent();                      }                      WriteLine("");                        var gArg = ret.GetGenericArguments().Single().ToString2();                      if (isNonGenFep && r == 1)                      {                          gArg = gArg.Replace("EventPattern<EventArgs>"' "EventPattern<object>");                      }                        WriteLine("return " + factory + ".CreateQuery<" + gArg + ">(");                      Indent();                      WriteLine("Expression.Call(");                      Indent();                      WriteLine("null'");                      var cma = args.Count > 0 ? "'" : "";                      WriteLine("#if CRIPPLED_REFLECTION"' true);                      WriteLine("InfoOf(() => " + typeName + "." + name + g + "(" + string.Join("' "' ptps.Select(pt => "default(" + pt + ")")) + "))" + cma);                      WriteLine("#else"' true);                      if (!m.IsGenericMethod)                          WriteLine("(MethodInfo)MethodInfo.GetCurrentMethod()" + cma);                      else                          WriteLine("((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' m.GetGenericArguments().Select(ga => "typeof(" + ga.Name + ")").ToArray()) + ")" + cma);                      WriteLine("#endif"' true);                      for (int j = 0; j < args.Count; j++)                          WriteLine(args[j] + (j < args.Count - 1 ? "'" : ""));                      Outdent();                      WriteLine(")");                      Outdent();                      WriteLine(");");                      Outdent();                      WriteLine("}");                        if (isNonGenFep && r == 1)                          WriteLine("#endif"' true);                  }                    if (poundIf)                      WriteLine("#endif"' true);                  if (isExp)                      WriteLine("#endif"' true);                  //if (isLargeArity)                  //    WriteLine("#endif"' true);                  WriteLine("");              }
Magic Number,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The following statement contains a magic number: foreach (var ret in new[] { "Unit"' "TResult" })              {                  for (int i = 0; i <= 16; i++)                  {                      //if (i == 5)                      //    WriteLine("#if !NO_LARGEARITY"' true);                        foreach (var withScheduler in new[] { false' true })                      {                          var genArgs = default(string[]);                          var lamPars = default(string[]);                          if (i == 0)                          {                              genArgs = new string[0];                              lamPars = new string[0];                          }                          //else if (i == 1)                          //{                          //    genArgs = new[] { "TSource" };                          //    lamPars = new[] { "t" };                          //}                          else                          {                              genArgs = Enumerable.Range(1' i).Select(j => "TArg" + j).ToArray();                              lamPars = Enumerable.Range(1' i).Select(j => "t" + j).ToArray();                          }                            var fParam = ret == "Unit" ? "action" : "function";                          var gConst = ret == "Unit" ? "Action" : "Func";                            var retType = "Func<" + string.Join("' "' genArgs.Concat(new[] { "IQbservable<" + ret + ">" }).ToArray()) + ">";                            if (ret != "Unit")                              genArgs = genArgs.Concat(new[] { "TResult" }).ToArray();                            var docName = "M:System.Reactive.Linq.Observable.ToAsync";                          if (genArgs.Length > 0)                              docName += "``" + genArgs.Length;                            var docArg = ret == "Unit" ? "System.Action" : "System.Func";                          if (genArgs.Length > 0)                              docArg += "{" + string.Join("'"' Enumerable.Range(0' genArgs.Length).Select(j => "``" + j)) + "}";                            docName += "(" + docArg + (withScheduler ? "'System.Reactive.Concurrency.IScheduler" : "") + ")";                            var xmlDoc = default(XElement);                          if (!docs.TryGetValue(docName' out xmlDoc))                          {                              Console.ForegroundColor = ConsoleColor.Yellow;                              Console.WriteLine("Missing XML documentation for {0}"' docName);                              Console.ResetColor();                          }                            var actType = "Expression<" + gConst + (genArgs.Length > 0 ? "<" + string.Join("' "' genArgs) + ">" : "") + ">";                            var genArgss = genArgs.Length > 0 ? "<" + string.Join("' "' genArgs) + ">" : "";                            if (xmlDoc != null)                          {                              foreach (var docLine in xmlDoc.Element("summary").ToString().Split('\n'))                                  WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                                WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>");                                foreach (var docLine in xmlDoc.Elements().Where(e => e.Name != "summary").SelectMany(e => e.ToString().Split('\n')))                                  WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                          }                            WriteLine("public static " + retType + " ToAsync" + genArgss + "(this IQbservableProvider provider' " + actType + " " + fParam + (withScheduler ? "' IScheduler scheduler" : "") + ")");                          WriteLine("{");                            Indent();                            WriteLine("if (provider == null)");                          Indent();                          WriteLine("throw new ArgumentNullException(\"provider\");");                          Outdent();                            WriteLine("if (" + fParam + " == null)");                          Indent();                          WriteLine("throw new ArgumentNullException(\"" + fParam + "\");");                          Outdent();                            if (withScheduler)                          {                              WriteLine("if (scheduler == null)");                              Indent();                              WriteLine("throw new ArgumentNullException(\"scheduler\");");                              Outdent();                          }                            WriteLine("");                          WriteLine("#if CRIPPLED_REFLECTION"' true);                          var aprs = new List<string> { "IQbservableProvider"' actType };                          if (withScheduler)                              aprs.Add("IScheduler");                          WriteLine("var m = InfoOf(() => " + typeName + ".ToAsync" + genArgss + "(" + string.Join("' "' aprs.Select(pt => "default(" + pt + ")")) + "));");                          WriteLine("#else"' true);                          if (genArgs.Length == 0)                              WriteLine("var m = (MethodInfo)MethodInfo.GetCurrentMethod();");                          else                              WriteLine("var m = ((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' genArgs.Select(a => "typeof(" + a + ")").ToArray()) + ");");                          WriteLine("#endif"' true);                            WriteLine("return (" + string.Join("' "' lamPars) + ") => provider.CreateQuery<" + ret + ">(");                          Indent();                          WriteLine("Expression.Invoke(");                          Indent();                          WriteLine("Expression.Call(");                          Indent();                          WriteLine("null'");                          WriteLine("m'");                          WriteLine("Expression.Constant(provider' typeof(IQbservableProvider))'");                          WriteLine(fParam + (withScheduler ? "'" : ""));                          if (withScheduler)                              WriteLine("Expression.Constant(scheduler' typeof(IScheduler))");                          Outdent();                          WriteLine(")" + (lamPars.Length > 0 ? "'" : ""));                          var k = 0;                          foreach (var e in genArgs.Zip(lamPars' (g' l) => new { g' l }))                          {                              WriteLine("Expression.Constant(" + e.l + "' typeof(" + e.g + "))" + (k < i - 1 ? "'" : ""));                              k++;                          }                          Outdent();                          WriteLine(")");                          Outdent();                          WriteLine(");");                            Outdent();                            WriteLine("}");                          WriteLine("");                      }                        //if (i == 16)                      //    WriteLine("#endif"' true);                  }              }
Magic Number,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,GenerateAsync,The following statement contains a magic number: foreach (var ret in new[] { "Unit"' "TResult" })              {                  for (int i = 0; i < 15; i++)                  {                      //if (i == 3)                      //    WriteLine("#if !NO_LARGEARITY"' true);                        var genArgs = default(string[]);                      var lamPars = default(string[]);                      if (i == 0)                      {                          genArgs = new string[0];                          lamPars = new string[0];                      }                      else                      {                          genArgs = Enumerable.Range(1' i).Select(j => "TArg" + j).ToArray();                          lamPars = Enumerable.Range(1' i).Select(j => "t" + j).ToArray();                      }                        var fParam = ret == "Unit" ? "action" : "function";                        var retType = "Func<" + string.Join("' "' genArgs.Concat(new[] { "IQbservable<" + ret + ">" }).ToArray()) + ">";                        var begType = "Expression<Func<" + string.Join("' "' genArgs.Concat(new[] { "AsyncCallback"' "object"' "IAsyncResult" }).ToArray()) + ">>";                      var endType = ret == "Unit" ? "Expression<Action<IAsyncResult>>" : "Expression<Func<IAsyncResult' TResult>>";                        if (ret != "Unit")                          genArgs = genArgs.Concat(new[] { "TResult" }).ToArray();                        var docName = "M:System.Reactive.Linq.Observable.FromAsyncPattern";                      if (genArgs.Length > 0)                          docName += "``" + genArgs.Length;                        if (ret == "Unit")                      {                          var docArgB = "System.Func{" + string.Join("'"' Enumerable.Range(0' genArgs.Length).Select(j => "``" + j)) + (genArgs.Length > 0 ? "'" : "") + "System.AsyncCallback'System.Object'System.IAsyncResult}";                          var docArgE = "System.Action{System.IAsyncResult}";                          docName += "(" + docArgB + "'" + docArgE + ")";                      }                      else                      {                          var docArgB = "System.Func{" + string.Join("'"' Enumerable.Range(0' genArgs.Length - 1).Select(j => "``" + j)) + (genArgs.Length > 1 ? "'" : "") + "System.AsyncCallback'System.Object'System.IAsyncResult}";                          var docArgE = "System.Func{System.IAsyncResult'``" + (genArgs.Length - 1) + "}";                          docName += "(" + docArgB + "'" + docArgE + ")";                      }                        var xmlDoc = default(XElement);                      if (!docs.TryGetValue(docName' out xmlDoc))                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine("Missing XML documentation for {0}"' docName);                          Console.ResetColor();                      }                        var genArgss = genArgs.Length > 0 ? "<" + string.Join("' "' genArgs) + ">" : "";                        if (xmlDoc != null)                      {                          foreach (var docLine in xmlDoc.Element("summary").ToString().Split('\n'))                              WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                            WriteLine("/// <param name=\"provider\">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>");                            foreach (var docLine in xmlDoc.Elements().Where(e => e.Name != "summary").SelectMany(e => e.ToString().Split('\n')))                              WriteLine("/// " + docLine.TrimStart().TrimEnd('\r'));                      }                        WriteLine("#if PREFERASYNC"' true);                      WriteLine("[Obsolete(Constants_Linq.USE_TASK_FROMASYNCPATTERN)]");                      WriteLine("#endif"' true);                        WriteLine("public static " + retType + " FromAsyncPattern" + genArgss + "(this IQbservableProvider provider' " + begType + " begin' " + endType + "end)");                      WriteLine("{");                        Indent();                        WriteLine("if (provider == null)");                      Indent();                      WriteLine("throw new ArgumentNullException(\"provider\");");                      Outdent();                        WriteLine("if (begin == null)");                      Indent();                      WriteLine("throw new ArgumentNullException(\"begin\");");                      Outdent();                        WriteLine("if (end == null)");                      Indent();                      WriteLine("throw new ArgumentNullException(\"end\");");                      Outdent();                        WriteLine("");                        WriteLine("#if CRIPPLED_REFLECTION"' true);                      var aprs = new List<string> { "IQbservableProvider"' begType' endType };                      WriteLine("var m = InfoOf(() => " + typeName + ".FromAsyncPattern" + genArgss + "(" + string.Join("' "' aprs.Select(pt => "default(" + pt + ")")) + "));");                      WriteLine("#else"' true);                      if (genArgs.Length == 0)                          WriteLine("var m = (MethodInfo)MethodInfo.GetCurrentMethod();");                      else                          WriteLine("var m = ((MethodInfo)MethodInfo.GetCurrentMethod()).MakeGenericMethod(" + string.Join("' "' genArgs.Select(a => "typeof(" + a + ")").ToArray()) + ");");                      WriteLine("#endif"' true);                        WriteLine("return (" + string.Join("' "' lamPars) + ") => provider.CreateQuery<" + ret + ">(");                      Indent();                      WriteLine("Expression.Invoke(");                      Indent();                      WriteLine("Expression.Call(");                      Indent();                      WriteLine("null'");                      WriteLine("m'");                      WriteLine("Expression.Constant(provider' typeof(IQbservableProvider))'");                      WriteLine("begin'");                      WriteLine("end");                      Outdent();                      WriteLine(")" + (lamPars.Length > 0 ? "'" : ""));                      var k = 0;                      foreach (var e in genArgs.Zip(lamPars' (g' l) => new { g' l }))                      {                          WriteLine("Expression.Constant(" + e.l + "' typeof(" + e.g + "))" + (k < i - 1 ? "'" : ""));                          k++;                      }                      Outdent();                      WriteLine(")");                      Outdent();                      WriteLine(");");                        Outdent();                        WriteLine("}");                      WriteLine("");                        //if (i == 14)                      //    WriteLine("#endif"' true);                  }              }
Magic Number,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,WriteLine,The following statement contains a magic number: foreach (var t in s.Split('\n'))                  Out.WriteLine((noIndent ? "" : new string(' '' _indent * 4)) + t.TrimEnd('\r'));
Missing Default,HomoIconize,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\tools\HomoIcon\Program.cs,Generate,The following switch statement is missing a default case: switch (name)                          {                              case "Map":                                   underlying = "Select";                                  break;                              case "FlatMap":                                  underlying = "SelectMany";                                  break;                              case "Filter":                                   underlying = "Where";                                  break;                          }
