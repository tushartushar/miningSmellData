Implementation smell,Namespace,Class,File,Method,Description
Long Statement,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,Main,The length of the statement  "                       // The SelectMany operator' bound to by from...from... syntax causes the flattening of beginActivities and the result of parallel observation. " is 142.
Long Statement,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,Main,The length of the statement  "                            (e' a' b) => new { e' a' b }).LastAsync() /* the stream will end because all substreams end (due to FirstAsync and TakeUntil use); only forward the last combined result */ " is 171.
Long Statement,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The length of the statement  "                        var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray()); " is 123.
Long Statement,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The length of the statement  "                    Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag))); " is 127.
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: var semaphore = new Semaphore(10' 10);
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: var semaphore = new Semaphore(10' 10);
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
Magic Number,EventCorrelationSample,Program,C:\repos\Reactive-Extensions_Rx.NET\Rx.NET\Samples\EventCorrelationSample\EventCorrelationSample\Program.cs,StartService,The following statement contains a magic number: while (true)              {                  semaphore.WaitOne();                    var seed = rnd.Next();                  Task.Run(async () =>                  {                      var rand = new Random(seed);                        var requestId = Guid.NewGuid();                        Print(ConsoleColor.Green)("Starting request " + requestId);                        var measure = Stopwatch.StartNew();                      beginActivitiesObserver.OnNext(new BeginActivity { Id = requestId });                        Thread.Sleep(rand.Next(50' 300));                        var tossA = rand.Next(2);                      var tossB = rand.Next(2);                        var tasks = new List<Task>(tossA + tossB);                      var diag = new List<string>();                        if (tossA == 1)                      {                          var aDelay = rand.Next(20' 70);                          var aLength = rand.Next(100' 2000);                          var aValue = rand.Next(0' 43);                            diag.Add(string.Format("A(d = {0}' t = {1}' x = {2})"' aDelay' aLength' aValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(aDelay);                              beginAsObserver.OnNext(new BeginTaskA { Id = taskId' ActivityId = requestId' Value = aValue });                              Thread.Sleep(aLength);                              endAsObserver.OnNext(new EndTaskA { Id = taskId });                          }));                      }                        if (tossB == 1)                      {                          var bDelay = rand.Next(10' 40);                          var bLength = rand.Next(100' 2000);                          var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";                          var bValue = new string(Enumerable.Range(0' rand.Next(0' 10)).Select(x => alphabet[rand.Next(alphabet.Length)]).ToArray());                            diag.Add(string.Format("B(d = {0}' t = {1}' x = {2})"' bDelay' bLength' bValue));                            tasks.Add(Task.Run(() =>                          {                              var taskId = Guid.NewGuid();                                Thread.Sleep(bDelay);                              beginBsObserver.OnNext(new BeginTaskB { Id = taskId' ActivityId = requestId' Value = bValue });                              Thread.Sleep(bLength);                              endBsObserver.OnNext(new EndTaskB { Id = taskId });                          }));                      }                        await Task.WhenAll(tasks);                        Thread.Sleep(rand.Next(50' 100));                        measure.Stop();                      Print(ConsoleColor.Red)(string.Format("Ending request {0} (d = {1}) {2}"' requestId' measure.Elapsed' string.Join(" "' diag)));                      endActivitiesObserver.OnNext(new EndActivity { Id = requestId });                        semaphore.Release();                  });              }
