Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,Cyclomatic complexity of the method is 47
Complex Method,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,CuckooFilter,Cyclomatic complexity of the method is 13
Complex Method,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,Cyclomatic complexity of the method is 19
Complex Method,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,Cyclomatic complexity of the method is 19
Complex Method,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,Cyclomatic complexity of the method is 19
Complex Method,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,Cyclomatic complexity of the method is 16
Complex Method,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,Cyclomatic complexity of the method is 16
Complex Method,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,Cyclomatic complexity of the method is 16
Long Statement,CuckooFilter,MainClass,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\Program.cs,Main,The length of the statement  "	Console.WriteLine ("False positive rate is {0:F4}%' false queries {1}' total queries {2}"' 100.0 * false_queries / total_queries' false_queries' total_queries); " is 160.
Long Statement,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The length of the statement  "		Console.WriteLine (" lowbits=" + lowbits [j].ToString ("X02") + " dirbits=" + StringUtils.ByteArrayToHexString (BitConverter.GetBytes (dirbits [j])' (int)(dirbits_per_tag / 8 + 1))); " is 182.
Long Statement,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The length of the statement  "			*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11)); " is 125.
Long Statement,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The length of the statement  "				*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18)); " is 156.
Long Statement,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The length of the statement  "				*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24)); " is 151.
Long Statement,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The length of the statement  "			*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35); " is 144.
Long Statement,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The length of the statement  "			*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47); " is 143.
Long Statement,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The length of the statement  "		uint k = (uint)(data [currentIndex++] | data [currentIndex++] << 8 | data [currentIndex++] << 16 | data [currentIndex++] << 24); " is 128.
Complex Conditional,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,Delete,The conditional expression  "victim_.used && tag == victim_.tag && (i1 == victim_.index || i2 == victim_.index)"  is complex.
Magic Number,CuckooFilter,MainClass,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\Program.cs,Main,The following statement contains a magic number: for (ulong i = total_items; i < 2 * total_items; i++) {  	if (filter.Contain (i) == Status.Ok) {  		false_queries++;  		//Debug.WriteLine("False Positive : " + i);  	}  	total_queries++;  }  
Magic Number,CuckooFilter,MainClass,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\Program.cs,Main,The following statement contains a magic number: Console.WriteLine ("False positive rate is {0:F4}%' false queries {1}' total queries {2}"' 100.0 * false_queries / total_queries' false_queries' total_queries);  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,GetBit,The following statement contains a magic number: Debug.Assert (!(bitnum < 0 || bitnum > 31)' "Invalid bit number");  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,SetBit,The following statement contains a magic number: Debug.Assert (!(bitnum < 0 || bitnum > 31)' "Invalid bit number");  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,ClearBit,The following statement contains a magic number: Debug.Assert (!(bitnum < 0 || bitnum > 31)' "Invalid bit number");  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,RotateLeft,The following statement contains a magic number: return (original << bits) | (original >> (64 - bits));  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,RotateRight,The following statement contains a magic number: return (original >> bits) | (original << (64 - bits));  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,Upperpower2,The following statement contains a magic number: x |= x >> 2;  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,Upperpower2,The following statement contains a magic number: x |= x >> 4;  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,Upperpower2,The following statement contains a magic number: x |= x >> 8;  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,Upperpower2,The following statement contains a magic number: x |= x >> 16;  
Magic Number,CuckooFilter,PrimitiveHelpers,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,Upperpower2,The following statement contains a magic number: x |= x >> 32;  
Magic Number,CuckooFilter,StringUtils,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,ByteArrayToHexString,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	byte b = buf [i];  	Result.Append (HexAlphabet [(int)(b >> 4)]);  	Result.Append (HexAlphabet [(int)(b & 0xF)]);  	Result.Append (sep);  }  
Magic Number,CuckooFilter,StringUtils,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\MiscUtils.cs,ByteArrayToHexString,The following statement contains a magic number: Result.Append (HexAlphabet [(int)(b >> 4)]);  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixBody,The following statement contains a magic number: h1 = h1.RotateLeft (27);  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixBody,The following statement contains a magic number: h1 = h1 * 5 + 0x52dce729;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixBody,The following statement contains a magic number: h2 = h2.RotateLeft (31);  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixBody,The following statement contains a magic number: h2 = h2 * 5 + 0x38495ab5;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixKey1,The following statement contains a magic number: k1 = k1.RotateLeft (31);  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixKey2,The following statement contains a magic number: k2 = k2.RotateLeft (33);  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixFinal,The following statement contains a magic number: k ^= k >> 33;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixFinal,The following statement contains a magic number: k ^= k >> 33;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,MixFinal,The following statement contains a magic number: k ^= k >> 33;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytes,The following statement contains a magic number: while (remaining >= READ_SIZE) {  	ulong k1 = bb.GetUInt64 (pos);  	pos += 8;  	ulong k2 = bb.GetUInt64 (pos);  	pos += 8;  	length += READ_SIZE;  	remaining -= READ_SIZE;  	MixBody (k1' k2);  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytes,The following statement contains a magic number: while (remaining >= READ_SIZE) {  	ulong k1 = bb.GetUInt64 (pos);  	pos += 8;  	ulong k2 = bb.GetUInt64 (pos);  	pos += 8;  	length += READ_SIZE;  	remaining -= READ_SIZE;  	MixBody (k1' k2);  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytes,The following statement contains a magic number: pos += 8;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytes,The following statement contains a magic number: pos += 8;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: switch (remaining) {  case 15:  	k2 ^= (ulong)bb [pos + 14] << 48;  	// fall through  	goto case 14;  case 14:  	k2 ^= (ulong)bb [pos + 13] << 40;  	// fall through  	goto case 13;  case 13:  	k2 ^= (ulong)bb [pos + 12] << 32;  	// fall through  	goto case 12;  case 12:  	k2 ^= (ulong)bb [pos + 11] << 24;  	// fall through  	goto case 11;  case 11:  	k2 ^= (ulong)bb [pos + 10] << 16;  	// fall through  	goto case 10;  case 10:  	k2 ^= (ulong)bb [pos + 9] << 8;  	// fall through  	goto case 9;  case 9:  	k2 ^= (ulong)bb [pos + 8];  	// fall through  	goto case 8;  case 8:  	k1 ^= bb.GetUInt64 (pos);  	break;  case 7:  	k1 ^= (ulong)bb [pos + 6] << 48;  	// fall through  	goto case 6;  case 6:  	k1 ^= (ulong)bb [pos + 5] << 40;  	// fall through  	goto case 5;  case 5:  	k1 ^= (ulong)bb [pos + 4] << 32;  	// fall through  	goto case 4;  case 4:  	k1 ^= (ulong)bb [pos + 3] << 24;  	// fall through  	goto case 3;  case 3:  	k1 ^= (ulong)bb [pos + 2] << 16;  	// fall through  	goto case 2;  case 2:  	k1 ^= (ulong)bb [pos + 1] << 8;  	// fall through  	goto case 1;  case 1:  	k1 ^= (ulong)bb [pos];  	// fall through  	break;  default:  	throw new Exception ("Something went wrong with remaining bytes calculation.");  }  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 14] << 48;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 14] << 48;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 14;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 13] << 40;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 13] << 40;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 13;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 12] << 32;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 12] << 32;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 12;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 11] << 24;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 11] << 24;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 11;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 10] << 16;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 10] << 16;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 10;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 9] << 8;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 9] << 8;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 9;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k2 ^= (ulong)bb [pos + 8];  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 8;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 6] << 48;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 6] << 48;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 6;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 5] << 40;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 5] << 40;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 5;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 4] << 32;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 4] << 32;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 4;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 3] << 24;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 3] << 24;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 3;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 2] << 16;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 2] << 16;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: goto case 2;  
Magic Number,CuckooFilter,Murmur3,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash.cs,ProcessBytesRemaining,The following statement contains a magic number: k1 ^= (ulong)bb [pos + 1] << 8;  
Magic Number,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,CuckooFilter,The following statement contains a magic number: if (frac > 0.96) {  	num_buckets <<= 1;  }  
Magic Number,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,Info,The following statement contains a magic number: ss.Append ("\t\tHashtable size: " + (table_.SizeInBytes () >> 10));  
Magic Number,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,GenerateIndexTagHash,The following statement contains a magic number: index = IndexHash (hashed_key.GetUInt32 (4));  
Magic Number,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,BitsPerItem,The following statement contains a magic number: return 8.0 * table_.SizeInBytes () / Size ();  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,SingleTable,The following statement contains a magic number: if (bits_per_tag > 32)  	throw new ArgumentException ("bits_per_tag should be <= 32");  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,SingleTable,The following statement contains a magic number: this.bytes_per_bucket = (bits_per_tag * tags_per_bucket + 7) >> 3;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,SingleTable,The following statement contains a magic number: this.bytes_per_bucket = (bits_per_tag * tags_per_bucket + 7) >> 3;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = 0;  	if (bits_per_tag == 2) {  		tag = (uint)(*((byte*)p) >> (byte)(j * 2));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  	}  	else if (bits_per_tag == 8) {  		p += j;  		tag = *((byte*)p);  	}  	else if (bits_per_tag == 12) {  		p += j + (j >> 1);  		tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  	}  	else if (bits_per_tag == 16) {  		p += (j << 1);  		tag = *((ushort*)p);  	}  	else if (bits_per_tag == 32) {  		tag = ((uint*)p) [j];  	}  	return tag & TAGMASK;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	tag = (uint)(*((byte*)p) >> (byte)(j * 2));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: tag = (uint)(*((byte*)p) >> (byte)(j * 2));  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  }  else if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: tag = (uint)(*((byte*)p) >> (byte)((j & 1) << 2));  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	p += j;  	tag = *((byte*)p);  }  else if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += j + (j >> 1);  	tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  }  else if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: tag = (uint)(*((ushort*)p) >> (ushort)((j & 1) << 2));  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 16) {  	p += (j << 1);  	tag = *((ushort*)p);  }  else if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,ReadTag,The following statement contains a magic number: if (bits_per_tag == 32) {  	tag = ((uint*)p) [j];  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: fixed (byte* ptr = &buckets_ [i' 0]) {  	byte* p = ptr;  	uint tag = t & TAGMASK;  	/* following code only works for little-endian */if (bits_per_tag == 2) {  		*((byte*)p) |= (byte)(tag << (byte)(2 * j));  	}  	else if (bits_per_tag == 4) {  		p += (j >> 1);  		if ((j & 1) == 0) {  			*((byte*)p) &= 0xf0;  			*((byte*)p) |= (byte)tag;  		}  		else {  			*((byte*)p) &= 0x0f;  			*((byte*)p) |= (byte)(tag << 4);  		}  	}  	else if (bits_per_tag == 8) {  		((byte*)p) [j] = (byte)tag;  	}  	else if (bits_per_tag == 12) {  		p += (j + (j >> 1));  		if ((j & 1) == 0) {  			((ushort*)p) [0] &= 0xf000;  			((ushort*)p) [0] |= (ushort)tag;  			//ushort tagdebug = ((ushort*)p) [0];  		}  		else {  			((ushort*)p) [0] &= 0x000f;  			((ushort*)p) [0] |= (ushort)(tag << 4);  		}  	}  	else if (bits_per_tag == 16) {  		((ushort*)p) [j] = (ushort)tag;  	}  	else if (bits_per_tag == 32) {  		((uint*)p) [j] = tag;  	}  	return;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 2) {  	*((byte*)p) |= (byte)(tag << (byte)(2 * j));  }  else if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: *((byte*)p) |= (byte)(tag << (byte)(2 * j));  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 4) {  	p += (j >> 1);  	if ((j & 1) == 0) {  		*((byte*)p) &= 0xf0;  		*((byte*)p) |= (byte)tag;  	}  	else {  		*((byte*)p) &= 0x0f;  		*((byte*)p) |= (byte)(tag << 4);  	}  }  else if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if ((j & 1) == 0) {  	*((byte*)p) &= 0xf0;  	*((byte*)p) |= (byte)tag;  }  else {  	*((byte*)p) &= 0x0f;  	*((byte*)p) |= (byte)(tag << 4);  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: *((byte*)p) |= (byte)(tag << 4);  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 8) {  	((byte*)p) [j] = (byte)tag;  }  else if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 12) {  	p += (j + (j >> 1));  	if ((j & 1) == 0) {  		((ushort*)p) [0] &= 0xf000;  		((ushort*)p) [0] |= (ushort)tag;  		//ushort tagdebug = ((ushort*)p) [0];  	}  	else {  		((ushort*)p) [0] &= 0x000f;  		((ushort*)p) [0] |= (ushort)(tag << 4);  	}  }  else if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if ((j & 1) == 0) {  	((ushort*)p) [0] &= 0xf000;  	((ushort*)p) [0] |= (ushort)tag;  	//ushort tagdebug = ((ushort*)p) [0];  }  else {  	((ushort*)p) [0] &= 0x000f;  	((ushort*)p) [0] |= (ushort)(tag << 4);  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: ((ushort*)p) [0] |= (ushort)(tag << 4);  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 16) {  	((ushort*)p) [j] = (ushort)tag;  }  else if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,WriteTag,The following statement contains a magic number: if (bits_per_tag == 32) {  	((uint*)p) [j] = tag;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ulong v1 = *((ulong*)p1);  		ulong v2 = *((ulong*)p2);  		// caution: unaligned access & assuming little endian  		if (bits_per_tag == 4 && tags_per_bucket == 4) {  			return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  		}  		else if (bits_per_tag == 8 && tags_per_bucket == 4) {  			return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  		}  		else if (bits_per_tag == 12 && tags_per_bucket == 4) {  			return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  		}  		else if (bits_per_tag == 16 && tags_per_bucket == 4) {  			return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  		}  		else {  			for (uint j = 0; j < tags_per_bucket; j++) {  				if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  					return true;  			}  			return false;  		}  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ulong v1 = *((ulong*)p1);  	ulong v2 = *((ulong*)p2);  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	return Hasvalue4 (v1' tag) || Hasvalue4 (v2' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	return Hasvalue8 (v1' tag) || Hasvalue8 (v2' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	return Hasvalue12 (v1' tag) || Hasvalue12 (v2' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBuckets,The following statement contains a magic number: if (bits_per_tag == 16 && tags_per_bucket == 4) {  	return Hasvalue16 (v1' tag) || Hasvalue16 (v2' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if ((ReadTag (i1' j) == tag) || (ReadTag (i2' j) == tag))  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: fixed (byte* p = &buckets_ [i' 0]) {  	// caution: unaligned access & assuming little endian  	if (bits_per_tag == 4 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint16_t may suffice  		return Hasvalue4 (v' tag);  	}  	else if (bits_per_tag == 8 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		// uint may suffice  		return Hasvalue8 (v' tag);  	}  	else if (bits_per_tag == 12 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue12 (v' tag);  	}  	else if (bits_per_tag == 16 && tags_per_bucket == 4) {  		ulong v = *(ulong*)p;  		return Hasvalue16 (v' tag);  	}  	else {  		for (uint j = 0; j < tags_per_bucket; j++) {  			if (ReadTag (i' j) == tag)  				return true;  		}  		return false;  	}  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 4 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint16_t may suffice  	return Hasvalue4 (v' tag);  }  else if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 8 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	// uint may suffice  	return Hasvalue8 (v' tag);  }  else if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 12 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue12 (v' tag);  }  else if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,FindTagInBucket,The following statement contains a magic number: if (bits_per_tag == 16 && tags_per_bucket == 4) {  	ulong v = *(ulong*)p;  	return Hasvalue16 (v' tag);  }  else {  	for (uint j = 0; j < tags_per_bucket; j++) {  		if (ReadTag (i' j) == tag)  			return true;  	}  	return false;  }  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z1 << 6) ^ z1) >> 13;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z1 << 6) ^ z1) >> 13;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: z1 = ((z1 & 4294967294U) << 18) ^ b;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z2 << 2) ^ z2) >> 27;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z2 << 2) ^ z2) >> 27;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: z2 = ((z2 & 4294967288U) << 2) ^ b;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z3 << 13) ^ z3) >> 21;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z3 << 13) ^ z3) >> 21;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: z3 = ((z3 & 4294967280U) << 7) ^ b;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z4 << 3) ^ z4) >> 12;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: b = ((z4 << 3) ^ z4) >> 12;  
Magic Number,CuckooFilter,SingleTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\SingleTable.cs,Lfsr113Bits,The following statement contains a magic number: z4 = ((z4 & 4294967168U) << 13) ^ b;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: dirbits_per_tag = bits_per_tag - 4;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: bits_per_bucket = (3 + dirbits_per_tag) * 4;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: bits_per_bucket = (3 + dirbits_per_tag) * 4;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: bytes_per_bucket = (bits_per_bucket + 7) >> 3;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: bytes_per_bucket = (bits_per_bucket + 7) >> 3;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: DIRBITSMASK = (int)(((1UL << (int)dirbits_per_tag) - 1) << 4);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PackedTable,The following statement contains a magic number: len_ = bytes_per_bucket * num_buckets + 7;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,SizeInTags,The following statement contains a magic number: return 4 * num_buckets;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,InsertTagToBucket,The following statement contains a magic number: for (uint j = 0; j < 4; j++) {  	if (tags [j] == 0) {  		DPRINTF ("PackedTable.InsertTagToBucket slot {0} is empty"' j);  		tags [j] = tag;  		WriteBucket (i' tags);  		#if DEBUG_TABLE  							PrintBucket (i); 					ReadBucket (i' tags); #endif  		DPRINTF ("PackedTable.InsertTagToBucket Ok");  		return true;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,InsertTagToBucket,The following statement contains a magic number: if (kickout) {  	uint r = (uint)(rand.Next () & 3);  	DPRINTF ("PackedTable.InsertTagToBucket' let's kick out a random slot {0}"' r);  	//PrintBucket(i);  	oldtag = tags [r];  	tags [r] = tag;  	WriteBucket (i' tags);  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits1) & 0x0fff];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		v = perm_.dec_table [(bucketbits2) & 0x0fff];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits1) & 0x0fff];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	v = perm_.dec_table [(bucketbits2) & 0x0fff];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [1] |= (uint)(((v >> 8) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [1] |= (uint)(((v >> 8) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,DeleteTagFromBucket,The following statement contains a magic number: for (uint j = 0; j < 4; j++) {  	if (tags [j] == tag) {  		tags [j] = 0;  		WriteBucket (i' tags);  		return true;  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	lowbits [j] = (byte)(tags [j] & 0x0f);  	dirbits [j] = (uint)((tags [j] & DIRBITSMASK) >> 4);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	lowbits [j] = (byte)(tags [j] & 0x0f);  	dirbits [j] = (uint)((tags [j] & DIRBITSMASK) >> 4);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The following statement contains a magic number: dirbits [j] = (uint)((tags [j] & DIRBITSMASK) >> 4);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	Console.Write ("\ttag[" + j + "]: " + StringUtils.ByteArrayToHexString (BitConverter.GetBytes (tags [j])));  	Console.WriteLine (" lowbits=" + lowbits [j].ToString ("X02") + " dirbits=" + StringUtils.ByteArrayToHexString (BitConverter.GetBytes (dirbits [j])' (int)(dirbits_per_tag / 8 + 1)));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	Console.Write ("\ttag[" + j + "]: " + StringUtils.ByteArrayToHexString (BitConverter.GetBytes (tags [j])));  	Console.WriteLine (" lowbits=" + lowbits [j].ToString ("X02") + " dirbits=" + StringUtils.ByteArrayToHexString (BitConverter.GetBytes (dirbits [j])' (int)(dirbits_per_tag / 8 + 1)));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,PrintTags,The following statement contains a magic number: Console.WriteLine (" lowbits=" + lowbits [j].ToString ("X02") + " dirbits=" + StringUtils.ByteArrayToHexString (BitConverter.GetBytes (dirbits [j])' (int)(dirbits_per_tag / 8 + 1)));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,SortTags,The following statement contains a magic number: Comparator (ref tags [0]' ref tags [2]);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,SortTags,The following statement contains a magic number: Comparator (ref tags [1]' ref tags [3]);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,SortTags,The following statement contains a magic number: Comparator (ref tags [2]' ref tags [3]);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,SortTags,The following statement contains a magic number: Comparator (ref tags [2]' ref tags [3]);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,SortTags,The following statement contains a magic number: Comparator (ref tags [1]' ref tags [2]);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	//const char* p; // =  buckets_ + ((bits_per_bucket * i) >> 3);  	ushort codeword = 0;  	byte[] lowbits = new byte[4];  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		ushort bucketbits = *((ushort*)p);  		codeword = (ushort)(bucketbits & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((short*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		int bucketbits = *((int*)p);  		codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		uint bucketbits = *((uint*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		long bucketbits = *((long*)p);  		codeword = (ushort)(*((ushort*)p) & 0x0fff);  		tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  		tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  		tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  		tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  	}  	/* codeword is the lowest 12 bits in the bucket */ushort v = perm_.dec_table [codeword];  	lowbits [0] = (byte)(v & 0x000f);  	lowbits [2] = (byte)((v >> 4) & 0x000f);  	lowbits [1] = (byte)((v >> 8) & 0x000f);  	lowbits [3] = (byte)((v >> 12) & 0x000f);  	tags [0] |= lowbits [0];  	tags [1] |= lowbits [1];  	tags [2] |= lowbits [2];  	tags [3] |= lowbits [3];  	#if DEBUG_TABLE  					PrintTags (tags); #endif  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	ushort bucketbits = *((ushort*)p);  	codeword = (ushort)(bucketbits & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + (i * 2);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> 9) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 10) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 11) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + ((20 * i) >> 3);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + ((20 * i) >> 3);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: codeword = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> (int)(10 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> (int)(14 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((short*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> 11) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 14) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	int bucketbits = *((int*)p);  	codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + ((28 * i) >> 3);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + ((28 * i) >> 3);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: codeword = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> (int)(8 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> (int)(12 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> (int)(16 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> (int)(20 + ((i & 1) << 2))) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	uint bucketbits = *((uint*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + (i * 4);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> 13) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 18) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 23) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + (i * 6);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	long bucketbits = *((long*)p);  	codeword = (ushort)(*((ushort*)p) & 0x0fff);  	tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  	tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  	tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  	tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: p = pbuckets + (i << 3);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [0] = (uint)((bucketbits >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [1] = (uint)((bucketbits >> 21) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] = (uint)((bucketbits >> 34) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] = (uint)((bucketbits >> 47) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: lowbits [2] = (byte)((v >> 4) & 0x000f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: lowbits [2] = (byte)((v >> 4) & 0x000f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: lowbits [1] = (byte)((v >> 8) & 0x000f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: lowbits [3] = (byte)((v >> 12) & 0x000f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: lowbits [3] = (byte)((v >> 12) & 0x000f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] |= lowbits [2];  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [2] |= lowbits [2];  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] |= lowbits [3];  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,ReadBucket,The following statement contains a magic number: tags [3] |= lowbits [3];  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: lowbits [2] = (byte)(tags [2] & 0x0f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: lowbits [2] = (byte)(tags [2] & 0x0f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: lowbits [3] = (byte)(tags [3] & 0x0f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: lowbits [3] = (byte)(tags [3] & 0x0f);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: highbits [2] = tags [2] & 0xfffffff0;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: highbits [2] = tags [2] & 0xfffffff0;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: highbits [3] = tags [3] & 0xfffffff0;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: highbits [3] = tags [3] & 0xfffffff0;  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p = pbuckets + ((bits_per_bucket * i) >> 3);  	//TODO DPRINTF ("original bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 8));  	if (bits_per_bucket == 16) {  		// 1 dirbits per tag  		*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  	}  	else if (bits_per_bucket == 20) {  		// 2 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xfff00000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  		}  		else {  			*((uint*)p) &= 0xff00000f;  			*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  		}  	}  	else if (bits_per_bucket == 24) {  		// 3 dirbits per tag  		*((uint*)p) &= 0xff000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  	}  	else if (bits_per_bucket == 28) {  		// 4 dirbits per tag  		if ((i & 0x0001) == 0) {  			*((uint*)p) &= 0xf0000000;  			*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  		}  		else {  			*((uint*)p) &= 0x0000000f;  			*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  		}  	}  	else if (bits_per_bucket == 32) {  		// 5 dirbits per tag  		*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 48) {  		// 9 dirbits per tag  		*((ulong*)p) &= 0xffff000000000000UL;  		*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  		//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  	}  	else if (bits_per_bucket == 64) {  		// 13 dirbits per tag  		*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  	}  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 16) {  	// 1 dirbits per tag  	*((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  }  else if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)(codeword | (highbits [0] << 8) | (highbits [1] << 9) | (highbits [2] << 10) | (highbits [3] << 11));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 20) {  	// 2 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xfff00000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  	}  	else {  		*((uint*)p) &= 0xff00000f;  		*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  	}  }  else if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xfff00000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  }  else {  	*((uint*)p) &= 0xff00000f;  	*((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 10) | (highbits [2] << 12) | (highbits [3] << 14);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((int)(codeword << 4) | (int)(highbits [0] << 12) | (int)(highbits [1] << 14) | (int)(highbits [2] << 16) | (int)(highbits [3] << 18));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 24) {  	// 3 dirbits per tag  	*((uint*)p) &= 0xff000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  }  else if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 11) | (highbits [2] << 14) | (highbits [3] << 17);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 28) {  	// 4 dirbits per tag  	if ((i & 0x0001) == 0) {  		*((uint*)p) &= 0xf0000000;  		*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  	}  	else {  		*((uint*)p) &= 0x0000000f;  		*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  	}  }  else if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if ((i & 0x0001) == 0) {  	*((uint*)p) &= 0xf0000000;  	*((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  }  else {  	*((uint*)p) &= 0x0000000f;  	*((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= codeword | (highbits [0] << 8) | (highbits [1] << 12) | (highbits [2] << 16) | (highbits [3] << 20);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) |= (uint)((codeword << 4) | ((int)highbits [0] << 12) | (int)(highbits [1] << 16) | (int)(highbits [2] << 20) | (int)(highbits [3] << 24));  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 32) {  	// 5 dirbits per tag  	*((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((uint*)p) = codeword | (highbits [0] << 8) | (highbits [1] << 13) | (highbits [2] << 18) | (highbits [3] << 23);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 48) {  	// 9 dirbits per tag  	*((ulong*)p) &= 0xffff000000000000UL;  	*((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  	//TODO DPRINTF (" new bucketbits={0}"' StringUtils.ByteArrayToHexString ((char*)p' 4));  }  else if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) |= codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 17) | ((ulong)highbits [2] << 26) | ((ulong)highbits [3] << 35);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: if (bits_per_bucket == 64) {  	// 13 dirbits per tag  	*((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  }  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  
Magic Number,CuckooFilter,PackedTable,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTable.cs,WriteBucket,The following statement contains a magic number: *((ulong*)p) = codeword | ((ulong)highbits [0] << 8) | ((ulong)highbits [1] << 21) | ((ulong)highbits [2] << 34) | ((ulong)highbits [3] << 47);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,Unpack,The following statement contains a magic number: out_ [2] = (byte)((in_ >> 4) & 0x000f);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,Unpack,The following statement contains a magic number: out_ [2] = (byte)((in_ >> 4) & 0x000f);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,Unpack,The following statement contains a magic number: out_ [1] = (byte)((in_ >> 8) & 0x000f);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,Unpack,The following statement contains a magic number: out_ [3] = (byte)((in_ >> 12) & 0x000f);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,Unpack,The following statement contains a magic number: out_ [3] = (byte)((in_ >> 12) & 0x000f);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,GenTables,The following statement contains a magic number: for (byte i = base_; i < 16; i++) {  	/* for fast comparison in binary_search in little-endian machine */dst [k] = i;  	if (k + 1 < 4) {  		GenTables (i' k + 1' dst' ref idx);  	}  	else {  		dec_table [idx] = Pack (dst);  		enc_table [Pack (dst)] = idx;  		#if DEBUG_ENCODE  							Console.WriteLine ("enc_table[0x{0:X04}]=0x{1:X04}\t0x{2:X02} 0x{3:X02} 0x{4:X02} 0x{5:X02}"'  						                  Pack (dst)' idx' dst [0]' dst [1]' dst [2]' dst [3]); #endif  		idx++;  	}  }  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,GenTables,The following statement contains a magic number: for (byte i = base_; i < 16; i++) {  	/* for fast comparison in binary_search in little-endian machine */dst [k] = i;  	if (k + 1 < 4) {  		GenTables (i' k + 1' dst' ref idx);  	}  	else {  		dec_table [idx] = Pack (dst);  		enc_table [Pack (dst)] = idx;  		#if DEBUG_ENCODE  							Console.WriteLine ("enc_table[0x{0:X04}]=0x{1:X04}\t0x{2:X02} 0x{3:X02} 0x{4:X02} 0x{5:X02}"'  						                  Pack (dst)' idx' dst [0]' dst [1]' dst [2]' dst [3]); #endif  		idx++;  	}  }  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,GenTables,The following statement contains a magic number: if (k + 1 < 4) {  	GenTables (i' k + 1' dst' ref idx);  }  else {  	dec_table [idx] = Pack (dst);  	enc_table [Pack (dst)] = idx;  	#if DEBUG_ENCODE  						Console.WriteLine ("enc_table[0x{0:X04}]=0x{1:X04}\t0x{2:X02} 0x{3:X02} 0x{4:X02} 0x{5:X02}"'  						                  Pack (dst)' idx' dst [0]' dst [1]' dst [2]' dst [3]); #endif  	idx++;  }  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,TestPermEcoding,The following statement contains a magic number: Console.WriteLine ("Rst=0x{0:X04}\t0x{1:X02} 0x{2:X02} 0x{3:X02} 0x{4:X02}"' rst' src [0]' src [1]' src [2]' src [3]);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,TestPermEcoding,The following statement contains a magic number: Console.WriteLine ("Rst=0x{0:X04}\t0x{1:X02} 0x{2:X02} 0x{3:X02} 0x{4:X02}"' rst' src [0]' src [1]' src [2]' src [3]);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,TestPermEcoding,The following statement contains a magic number: Console.WriteLine ("Rst=0x{0:X04}\t0x{1:X02} 0x{2:X02} 0x{3:X02} 0x{4:X02}"' rst' dst [0]' dst [1]' dst [2]' dst [3]);  
Magic Number,CuckooFilter,PermEncoding,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PermEncoding.cs,TestPermEcoding,The following statement contains a magic number: Console.WriteLine ("Rst=0x{0:X04}\t0x{1:X02} 0x{2:X02} 0x{3:X02} 0x{4:X02}"' rst' dst [0]' dst [1]' dst [2]' dst [3]);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,InsertTagToStash,The following statement contains a magic number: while (pos != lastStashPos) {  	if (stashcode [pos] != 0) {  		IncrStashPosition (ref pos);  		continue;  	}  	else {  		ushort codeword;  		ModifyBucket (i' 3876 + pos' out codeword);  		stashcode [pos] = codeword;  		stashtag [pos] = tag;  		lastStashPos = pos;  		return true;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,InsertTagToStash,The following statement contains a magic number: if (stashcode [pos] != 0) {  	IncrStashPosition (ref pos);  	continue;  }  else {  	ushort codeword;  	ModifyBucket (i' 3876 + pos' out codeword);  	stashcode [pos] = codeword;  	stashtag [pos] = tag;  	lastStashPos = pos;  	return true;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,InsertTagToStash,The following statement contains a magic number: ModifyBucket (i' 3876 + pos' out codeword);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p1 = &buckets_ [i1' 0]) {  	fixed (byte* p2 = &buckets_ [i2' 0]) {  		ushort v;  		ulong bucketbits1 = *((ulong*)(p1));  		ulong bucketbits2 = *((ulong*)(p2));  		tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  		tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  		tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  		tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  		ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  		if (codeword1 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword1];  		// the order 0 2 1 3 is not a bug  		tags1 [0] |= (uint)((v & 0x000f));  		tags1 [2] |= (uint)(((v >> 4) & 0x000f));  		tags1 [1] |= (uint)(((v >> 8) & 0x000f));  		tags1 [3] |= (uint)(((v >> 12) & 0x000f));  		tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  		tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  		tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  		tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  		ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  		if (codeword2 >= PermEncoding.N_ENTS) {  			if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  				return true;  			codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  		}  		v = perm_.dec_table [codeword2];  		tags2 [0] |= (uint)((v & 0x000f));  		tags2 [2] |= (uint)(((v >> 4) & 0x000f));  		tags2 [1] |= (uint)(((v >> 8) & 0x000f));  		tags2 [3] |= (uint)(((v >> 12) & 0x000f));  		bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  		bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  		return ret1 || ret2;  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: fixed (byte* p2 = &buckets_ [i2' 0]) {  	ushort v;  	ulong bucketbits1 = *((ulong*)(p1));  	ulong bucketbits2 = *((ulong*)(p2));  	tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  	tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  	tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  	tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  	ushort codeword1 = (ushort)((bucketbits1) & 0x0fff);  	if (codeword1 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword1 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword1 = stashcode [codeword1 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword1];  	// the order 0 2 1 3 is not a bug  	tags1 [0] |= (uint)((v & 0x000f));  	tags1 [2] |= (uint)(((v >> 4) & 0x000f));  	tags1 [1] |= (uint)(((v >> 8) & 0x000f));  	tags1 [3] |= (uint)(((v >> 12) & 0x000f));  	tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  	tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  	tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  	tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  	ushort codeword2 = (ushort)((bucketbits2) & 0x0fff);  	if (codeword2 >= PermEncoding.N_ENTS) {  		if (stashtag [codeword2 - PermEncoding.N_ENTS] == tag)  			return true;  		codeword2 = stashcode [codeword2 - PermEncoding.N_ENTS];  	}  	v = perm_.dec_table [codeword2];  	tags2 [0] |= (uint)((v & 0x000f));  	tags2 [2] |= (uint)(((v >> 4) & 0x000f));  	tags2 [1] |= (uint)(((v >> 8) & 0x000f));  	tags2 [3] |= (uint)(((v >> 12) & 0x000f));  	bool ret1 = ((tags1 [0] == tag) || (tags1 [1] == tag) || (tags1 [2] == tag) || (tags1 [3] == tag));  	bool ret2 = ((tags2 [0] == tag) || (tags2 [1] == tag) || (tags2 [2] == tag) || (tags2 [3] == tag));  	return ret1 || ret2;  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [0] = (uint)((int)(bucketbits1 >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [1] = (uint)((int)(bucketbits1 >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] = (uint)((int)(bucketbits1 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] = (uint)((int)(bucketbits1 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [1] |= (uint)(((v >> 8) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags1 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [0] = (uint)((int)(bucketbits2 >> 8) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [1] = (uint)((int)(bucketbits2 >> 17) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] = (uint)((int)(bucketbits2 >> 26) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] = (uint)((int)(bucketbits2 >> 35) & DIRBITSMASK);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [2] |= (uint)(((v >> 4) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [1] |= (uint)(((v >> 8) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,FindTagInBuckets,The following statement contains a magic number: tags2 [3] |= (uint)(((v >> 12) & 0x000f));  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: fixed (byte* pbuckets = &buckets_ [0' 0]) {  	byte* p;  	oldCodeWord = 0;  	if (bits_per_tag == 5) {  		// 1 dirbits per tag' 16 bits per bucket  		p = pbuckets + (i * 2);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 6) {  		// 2 dirbits per tag' 20 bits per bucket  		p = pbuckets + ((20 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 7) {  		// 3 dirbits per tag' 24 bits per bucket  		p = pbuckets + (i << 1) + i;  		oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 8) {  		// 4 dirbits per tag' 28 bits per bucket  		p = pbuckets + ((28 * i) >> 3);  		oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  	}  	else if (bits_per_tag == 9) {  		// 5 dirbits per tag' 32 bits per bucket  		p = pbuckets + (i * 4);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 13) {  		// 9 dirbits per tag'  48 bits per bucket  		p = pbuckets + (i * 6);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  	else if (bits_per_tag == 17) {  		// 13 dirbits per tag' 64 bits per bucket  		p = pbuckets + (i << 3);  		oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  		*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  	}  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 5) {  	// 1 dirbits per tag' 16 bits per bucket  	p = pbuckets + (i * 2);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + (i * 2);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 6) {  	// 2 dirbits per tag' 20 bits per bucket  	p = pbuckets + ((20 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + ((20 * i) >> 3);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + ((20 * i) >> 3);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: oldCodeWord = (ushort)((*((short*)p)) >> (int)((i & 1) << 2) & 0x0fff);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 7) {  	// 3 dirbits per tag' 24 bits per bucket  	p = pbuckets + (i << 1) + i;  	oldCodeWord = (ushort)(*((short*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 8) {  	// 4 dirbits per tag' 28 bits per bucket  	p = pbuckets + ((28 * i) >> 3);  	oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  }  else if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + ((28 * i) >> 3);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + ((28 * i) >> 3);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: oldCodeWord = (ushort)((*((short*)p) >> (int)((i & 1) << 2)) & 0x0fff);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: *((ushort*)p) = (ushort)((newCodeWord) >> (int)((i & 1) << 2) & 0x0fff);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 9) {  	// 5 dirbits per tag' 32 bits per bucket  	p = pbuckets + (i * 4);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + (i * 4);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 13) {  	// 9 dirbits per tag'  48 bits per bucket  	p = pbuckets + (i * 6);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  else if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + (i * 6);  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: if (bits_per_tag == 17) {  	// 13 dirbits per tag' 64 bits per bucket  	p = pbuckets + (i << 3);  	oldCodeWord = (ushort)(*((ushort*)p) & 0x0fff);  	*((ushort*)p) = (ushort)((newCodeWord) & 0x0fff);  }  
Magic Number,CuckooFilter,PackedTableWithStash,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\PackedTableWithStash.cs,ModifyBucket,The following statement contains a magic number: p = pbuckets + (i << 3);  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	uint tmp = (uint)(BitConverter.ToUInt16 (dataToHash' currentIndex + 2) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	currentIndex += 4;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	uint tmp = (uint)(BitConverter.ToUInt16 (dataToHash' currentIndex + 2) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	currentIndex += 4;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	uint tmp = (uint)(BitConverter.ToUInt16 (dataToHash' currentIndex + 2) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	currentIndex += 4;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	uint tmp = (uint)(BitConverter.ToUInt16 (dataToHash' currentIndex + 2) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	currentIndex += 4;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	uint tmp = (uint)(BitConverter.ToUInt16 (dataToHash' currentIndex + 2) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	currentIndex += 4;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash = (hash << 16) ^ tmp;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: currentIndex += 4;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += BitConverter.ToUInt16 (dataToHash' currentIndex);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 16;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= ((uint)dataToHash [currentIndex + 2]) << 18;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 11;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 10;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 3;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 5;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 4;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 25;  
Magic Number,HashTableHashing,SuperFastHashSimple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 6;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	uint tmp = (uint)((uint)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	uint tmp = (uint)((uint)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	uint tmp = (uint)((uint)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	uint tmp = (uint)((uint)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	uint tmp = (uint)((uint)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash = (hash << 16) ^ tmp;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 16;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= ((uint)dataToHash [currentIndex]) << 18;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 11;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 10;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 3;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 5;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 4;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 25;  
Magic Number,HashTableHashing,SuperFastHashInlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 6;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += arrayHack [currentIndex++];  	uint tmp = (uint)(arrayHack [currentIndex++] << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += arrayHack [currentIndex++];  	uint tmp = (uint)(arrayHack [currentIndex++] << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: while (numberOfLoops > 0) {  	hash += arrayHack [currentIndex++];  	uint tmp = (uint)(arrayHack [currentIndex++] << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	hash += hash >> 11;  	numberOfLoops--;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash = (hash << 16) ^ tmp;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: currentIndex *= 2;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  	hash ^= hash << 16;  	hash ^= ((uint)dataToHash [currentIndex]) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += dataToHash [currentIndex];  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex++] << 8);  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 16;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= ((uint)dataToHash [currentIndex]) << 18;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += (UInt16)(dataToHash [currentIndex++] | dataToHash [currentIndex] << 8);  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 11;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 10;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 3;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 5;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 4;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 25;  
Magic Number,HashTableHashing,SuperFastHashUInt16Hack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 6;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(dataToHash [0])) {  	/* Main loop */UInt16* data = (UInt16*)firstByte;  	for (; numberOfLoops > 0; numberOfLoops--) {  		hash += *data;  		uint tmp = (uint)(*(data + 1) << 11) ^ hash;  		hash = (hash << 16) ^ tmp;  		data += 2;  		hash += hash >> 11;  	}  	switch (remainingBytes) {  	case 3:  		hash += *data;  		hash ^= hash << 16;  		hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  		hash += hash >> 11;  		break;  	case 2:  		hash += *data;  		hash ^= hash << 11;  		hash += hash >> 17;  		break;  	case 1:  		hash += *((Byte*)data);  		hash ^= hash << 10;  		hash += hash >> 1;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: for (; numberOfLoops > 0; numberOfLoops--) {  	hash += *data;  	uint tmp = (uint)(*(data + 1) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	data += 2;  	hash += hash >> 11;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: for (; numberOfLoops > 0; numberOfLoops--) {  	hash += *data;  	uint tmp = (uint)(*(data + 1) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	data += 2;  	hash += hash >> 11;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: for (; numberOfLoops > 0; numberOfLoops--) {  	hash += *data;  	uint tmp = (uint)(*(data + 1) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	data += 2;  	hash += hash >> 11;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: for (; numberOfLoops > 0; numberOfLoops--) {  	hash += *data;  	uint tmp = (uint)(*(data + 1) << 11) ^ hash;  	hash = (hash << 16) ^ tmp;  	data += 2;  	hash += hash >> 11;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash = (hash << 16) ^ tmp;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: data += 2;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	hash += *data;  	hash ^= hash << 16;  	hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  	hash += hash >> 11;  	break;  case 2:  	hash += *data;  	hash ^= hash << 11;  	hash += hash >> 17;  	break;  case 1:  	hash += *((Byte*)data);  	hash ^= hash << 10;  	hash += hash >> 1;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 16;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= ((uint)(*(((Byte*)(data)) + 2))) << 18;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 11;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 11;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 10;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 3;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 5;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 4;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 17;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash ^= hash << 25;  
Magic Number,HashTableHashing,SuperFastHashUnsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\SuperFastHash.cs,Hash,The following statement contains a magic number: hash += hash >> 6;  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = BitConverter.ToUInt32 (data' currentIndex);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	currentIndex += 4;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = BitConverter.ToUInt32 (data' currentIndex);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	currentIndex += 4;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = BitConverter.ToUInt32 (data' currentIndex);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	currentIndex += 4;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: currentIndex += 4;  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: length -= 4;  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h ^= (uint)data [currentIndex + 2] << 16;  	h *= m;  	break;  case 2:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h ^= (uint)data [currentIndex + 2] << 16;  	h *= m;  	break;  case 2:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h ^= (uint)data [currentIndex + 2] << 16;  	h *= m;  	break;  case 2:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h ^= (uint)data [currentIndex + 2] << 16;  	h *= m;  	break;  case 2:  	h ^= BitConverter.ToUInt16 (data' currentIndex);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (uint)data [currentIndex + 2] << 16;  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (uint)data [currentIndex + 2] << 16;  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 13;  
Magic Number,HashTableHashing,MurmurHash2Simple,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 15;  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = (uint)(data [currentIndex++] | data [currentIndex++] << 8 | data [currentIndex++] << 16 | data [currentIndex++] << 24);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = (uint)(data [currentIndex++] | data [currentIndex++] << 8 | data [currentIndex++] << 16 | data [currentIndex++] << 24);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = (uint)(data [currentIndex++] | data [currentIndex++] << 8 | data [currentIndex++] << 16 | data [currentIndex++] << 24);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = (uint)(data [currentIndex++] | data [currentIndex++] << 8 | data [currentIndex++] << 16 | data [currentIndex++] << 24);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = (uint)(data [currentIndex++] | data [currentIndex++] << 8 | data [currentIndex++] << 16 | data [currentIndex++] << 24);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: length -= 4;  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)(data [currentIndex] << 16);  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)(data [currentIndex] << 16);  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)(data [currentIndex] << 16);  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)(data [currentIndex] << 16);  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)(data [currentIndex] << 16);  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (uint)(data [currentIndex] << 16);  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 13;  
Magic Number,HashTableHashing,MurmurHash2InlineBitConverter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 15;  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = hackArray [currentIndex++];  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: while (length >= 4) {  	uint k = hackArray [currentIndex++];  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  	length -= 4;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: length -= 4;  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: currentIndex *= 4;  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)data [currentIndex] << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)data [currentIndex] << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)data [currentIndex] << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)data [currentIndex] << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length) {  case 3:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  	h ^= (uint)data [currentIndex] << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  	h *= m;  	break;  case 1:  	h ^= data [currentIndex];  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (UInt16)(data [currentIndex++] | data [currentIndex++] << 8);  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (uint)data [currentIndex] << 16;  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= (UInt16)(data [currentIndex++] | data [currentIndex] << 8);  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 13;  
Magic Number,HashTableHashing,MurmurHash2uintHack,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 15;  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(data [0])) {  	uint* realData = (uint*)firstByte;  	while (numberOfLoops != 0) {  		uint k = *realData;  		k *= m;  		k ^= k >> r;  		k *= m;  		h *= m;  		h ^= k;  		numberOfLoops--;  		realData++;  	}  	switch (remainingBytes) {  	case 3:  		h ^= (UInt16)(*realData);  		h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  		h *= m;  		break;  	case 2:  		h ^= (UInt16)(*realData);  		h *= m;  		break;  	case 1:  		h ^= *((Byte*)realData);  		h *= m;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(data [0])) {  	uint* realData = (uint*)firstByte;  	while (numberOfLoops != 0) {  		uint k = *realData;  		k *= m;  		k ^= k >> r;  		k *= m;  		h *= m;  		h ^= k;  		numberOfLoops--;  		realData++;  	}  	switch (remainingBytes) {  	case 3:  		h ^= (UInt16)(*realData);  		h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  		h *= m;  		break;  	case 2:  		h ^= (UInt16)(*realData);  		h *= m;  		break;  	case 1:  		h ^= *((Byte*)realData);  		h *= m;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(data [0])) {  	uint* realData = (uint*)firstByte;  	while (numberOfLoops != 0) {  		uint k = *realData;  		k *= m;  		k ^= k >> r;  		k *= m;  		h *= m;  		h ^= k;  		numberOfLoops--;  		realData++;  	}  	switch (remainingBytes) {  	case 3:  		h ^= (UInt16)(*realData);  		h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  		h *= m;  		break;  	case 2:  		h ^= (UInt16)(*realData);  		h *= m;  		break;  	case 1:  		h ^= *((Byte*)realData);  		h *= m;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: fixed (byte* firstByte = &(data [0])) {  	uint* realData = (uint*)firstByte;  	while (numberOfLoops != 0) {  		uint k = *realData;  		k *= m;  		k ^= k >> r;  		k *= m;  		h *= m;  		h ^= k;  		numberOfLoops--;  		realData++;  	}  	switch (remainingBytes) {  	case 3:  		h ^= (UInt16)(*realData);  		h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  		h *= m;  		break;  	case 2:  		h ^= (UInt16)(*realData);  		h *= m;  		break;  	case 1:  		h ^= *((Byte*)realData);  		h *= m;  		break;  	default:  		break;  	}  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	h ^= (UInt16)(*realData);  	h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(*realData);  	h *= m;  	break;  case 1:  	h ^= *((Byte*)realData);  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	h ^= (UInt16)(*realData);  	h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(*realData);  	h *= m;  	break;  case 1:  	h ^= *((Byte*)realData);  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	h ^= (UInt16)(*realData);  	h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(*realData);  	h *= m;  	break;  case 1:  	h ^= *((Byte*)realData);  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (remainingBytes) {  case 3:  	h ^= (UInt16)(*realData);  	h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  	h *= m;  	break;  case 2:  	h ^= (UInt16)(*realData);  	h *= m;  	break;  case 1:  	h ^= *((Byte*)realData);  	h *= m;  	break;  default:  	break;  }  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= ((uint)(*(((Byte*)(realData)) + 2))) << 16;  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 13;  
Magic Number,HashTableHashing,MurmurHash2Unsafe,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\HashTableHashing\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 15;  
Missing Default,CuckooFilter,CuckooFilter,C:\repos\agustinsantos_CuckooFilter\CuckooFilter\CuckooFilter.cs,CuckooFilter,The following switch statement is missing a default case: switch (usePackedTable) {  case TypeOfTable.PackedTable:  	table_ = new PackedTable (bits_per_item' num_buckets);  	usingStash = false;  	break;  case TypeOfTable.SingleTable:  	table_ = new SingleTable (bits_per_item' num_buckets);  	usingStash = false;  	break;  case TypeOfTable.PackedTableWithStash:  	table_ = new PackedTableWithStash (bits_per_item' num_buckets);  	usingStash = true;  	break;  }  
