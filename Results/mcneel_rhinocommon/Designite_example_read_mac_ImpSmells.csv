Implementation smell,Namespace,Class,File,Method,Description
Complex Method,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,Cyclomatic complexity of the method is 10
Long Parameter List,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,ReadDirectoryHelper,The method has 7 parameters. Parameters: directoryDepth' maxDirectoryDepth' directoryName' filenameFilter' verboseTextDump' chunkDump' dump
Long Statement,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The length of the statement  "					arg.Equals("-chunkdump"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunkdump"' StringComparison.OrdinalIgnoreCase) ) " is 126.
Long Statement,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The length of the statement  "					arg.Equals("-recurse"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recurse"' StringComparison.OrdinalIgnoreCase) || " is 123.
Long Statement,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The length of the statement  "					arg.Equals("-recursive"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recursive"' StringComparison.OrdinalIgnoreCase) ) " is 126.
Long Statement,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Dump3dmFileHelper,The length of the statement  "			using (Rhino.FileIO.BinaryArchiveFile file = new Rhino.FileIO.BinaryArchiveFile(filename' Rhino.FileIO.BinaryArchiveMode.Read3dm)) " is 130.
Long Statement,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,ReadFileHelper,The length of the statement  "			dump.PopIndent(); dump.PopIndent(); dump.PopIndent(); dump.PopIndent(); dump.PopIndent(); dump.PopIndent(); dump.PopIndent(); " is 125.
Long Statement,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,ReadDirectoryHelper,The length of the statement  "					file_count += ReadDirectoryHelper(directoryDepth + 1' maxDirectoryDepth' dir' filenameFilter' verboseTextDump' chunkDump' dump); " is 128.
Complex Conditional,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The conditional expression  "arg.Equals("-c"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/c"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunk"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunk"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunkdump"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunkdump"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The conditional expression  "arg.Equals("-r"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/r"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recurse"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recurse"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recursive"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recursive"' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The following statement contains a magic number: if( args.Length < 2 )  			{  				PrintHelp();  				return;  			}
Magic Number,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The following statement contains a magic number: foreach( string arg in args )  			{  				// check for -out or /out option  				if( (arg.StartsWith("-out:") || arg.StartsWith("/out:")) && arg.Length > "-out:".Length )  				{  					// change destination of dump file  					output_filename = arg.Substring("-out:".Length).Trim();  					continue;  				}  				// check for -chunkdump or /chunkdump option  				if( arg.Equals("-c"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/c"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunk"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunk"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunkdump"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunkdump"' StringComparison.OrdinalIgnoreCase) )  				{  					chunk_dump = true;  					continue;  				}  				// check for -recursive or /recursive option  				if( arg.Equals("-r"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/r"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recurse"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recurse"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recursive"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recursive"' StringComparison.OrdinalIgnoreCase) )  				{  					maximum_directory_depth = 32;  					continue;  				}    				if( System.IO.Directory.Exists(arg) )  				{  					if (dump == null)  					{  						dump = new Rhino.FileIO.TextLog(output_filename);  						dump.IndentSize = 2;  					}    					file_count += ReadDirectoryHelper( 0' maximum_directory_depth' arg' null' bVerboseTextDump' chunk_dump' dump );  				}  				else  				{  					if (dump == null)  					{  						dump = new Rhino.FileIO.TextLog(output_filename);  						dump.IndentSize = 2;  					}    					if (ReadFileHelper(arg' bVerboseTextDump' chunk_dump' dump))  						file_count++;  				}  			}
Magic Number,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The following statement contains a magic number: foreach( string arg in args )  			{  				// check for -out or /out option  				if( (arg.StartsWith("-out:") || arg.StartsWith("/out:")) && arg.Length > "-out:".Length )  				{  					// change destination of dump file  					output_filename = arg.Substring("-out:".Length).Trim();  					continue;  				}  				// check for -chunkdump or /chunkdump option  				if( arg.Equals("-c"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/c"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunk"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunk"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunkdump"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunkdump"' StringComparison.OrdinalIgnoreCase) )  				{  					chunk_dump = true;  					continue;  				}  				// check for -recursive or /recursive option  				if( arg.Equals("-r"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/r"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recurse"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recurse"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recursive"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recursive"' StringComparison.OrdinalIgnoreCase) )  				{  					maximum_directory_depth = 32;  					continue;  				}    				if( System.IO.Directory.Exists(arg) )  				{  					if (dump == null)  					{  						dump = new Rhino.FileIO.TextLog(output_filename);  						dump.IndentSize = 2;  					}    					file_count += ReadDirectoryHelper( 0' maximum_directory_depth' arg' null' bVerboseTextDump' chunk_dump' dump );  				}  				else  				{  					if (dump == null)  					{  						dump = new Rhino.FileIO.TextLog(output_filename);  						dump.IndentSize = 2;  					}    					if (ReadFileHelper(arg' bVerboseTextDump' chunk_dump' dump))  						file_count++;  				}  			}
Magic Number,example_read_mac,Program,C:\repos\mcneel_rhinocommon\examples\rhino3dmio\example_read_mac\Program.cs,Main,The following statement contains a magic number: foreach( string arg in args )  			{  				// check for -out or /out option  				if( (arg.StartsWith("-out:") || arg.StartsWith("/out:")) && arg.Length > "-out:".Length )  				{  					// change destination of dump file  					output_filename = arg.Substring("-out:".Length).Trim();  					continue;  				}  				// check for -chunkdump or /chunkdump option  				if( arg.Equals("-c"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/c"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunk"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunk"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-chunkdump"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/chunkdump"' StringComparison.OrdinalIgnoreCase) )  				{  					chunk_dump = true;  					continue;  				}  				// check for -recursive or /recursive option  				if( arg.Equals("-r"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/r"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recurse"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recurse"' StringComparison.OrdinalIgnoreCase) ||  					arg.Equals("-recursive"' StringComparison.OrdinalIgnoreCase) || arg.Equals("/recursive"' StringComparison.OrdinalIgnoreCase) )  				{  					maximum_directory_depth = 32;  					continue;  				}    				if( System.IO.Directory.Exists(arg) )  				{  					if (dump == null)  					{  						dump = new Rhino.FileIO.TextLog(output_filename);  						dump.IndentSize = 2;  					}    					file_count += ReadDirectoryHelper( 0' maximum_directory_depth' arg' null' bVerboseTextDump' chunk_dump' dump );  				}  				else  				{  					if (dump == null)  					{  						dump = new Rhino.FileIO.TextLog(output_filename);  						dump.IndentSize = 2;  					}    					if (ReadFileHelper(arg' bVerboseTextDump' chunk_dump' dump))  						file_count++;  				}  			}
