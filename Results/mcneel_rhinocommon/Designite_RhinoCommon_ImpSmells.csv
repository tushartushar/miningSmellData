Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rhino.Runtime,AssemblyResolver,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,CurrentDomain_AssemblyResolve,The method has 113 lines of code.
Long Method,Rhino.Geometry,GeometryBase,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_geometry.cs,CreateGeometryHelper,The method has 155 lines of code.
Long Method,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadAndSetItemType,The method has 316 lines of code.
Long Method,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteItem,The method has 164 lines of code.
Long Method,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadAndSetItemType,The method has 316 lines of code.
Long Method,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteItem,The method has 164 lines of code.
Long Method,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The method has 131 lines of code.
Complex Method,Rhino.Runtime,AssemblyResolver,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,CurrentDomain_AssemblyResolve,Cyclomatic complexity of the method is 22
Complex Method,Rhino.Runtime,AssemblyResolver,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,TryLoadAssembly,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Runtime,FuzzyComparer,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,Cyclomatic complexity of the method is 19
Complex Method,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,Cyclomatic complexity of the method is 19
Complex Method,Rhino.Geometry,MeshFace,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IsValid,Cyclomatic complexity of the method is 10
Complex Method,Rhino.Geometry,MeshFace,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IsValid,Cyclomatic complexity of the method is 10
Complex Method,Rhino.Geometry,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,EpsilonEquals,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry,NurbsSurfacePointList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,EpsilonEquals,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Trim,Cyclomatic complexity of the method is 11
Complex Method,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,DeleteShortSegments,Cyclomatic complexity of the method is 9
Complex Method,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,BreakAtAngles,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,Cyclomatic complexity of the method is 11
Complex Method,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ClosestPoint,Cyclomatic complexity of the method is 10
Complex Method,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,Cyclomatic complexity of the method is 13
Complex Method,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,Contains,Cyclomatic complexity of the method is 9
Complex Method,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,Contains,Cyclomatic complexity of the method is 9
Complex Method,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,IsDegenerate,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,TryFitCircleTTT,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,EpsilonEquals,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,Cyclomatic complexity of the method is 9
Complex Method,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,Cyclomatic complexity of the method is 19
Complex Method,Rhino.Render,MeshFace,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IsValid,Cyclomatic complexity of the method is 10
Complex Method,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,Cyclomatic complexity of the method is 19
Complex Method,Rhino.Geometry.Collections,MeshFace,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IsValid,Cyclomatic complexity of the method is 10
Complex Method,Rhino.Geometry.Collections,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,EpsilonEquals,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry.Collections,NurbsSurfacePointList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,EpsilonEquals,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,EpsilonEquals,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,PlaneCircle,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,ExtendThroughBox,Cyclomatic complexity of the method is 9
Complex Method,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,FindLastIndex,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,TextReaderFromFile,Cyclomatic complexity of the method is 11
Complex Method,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,Cyclomatic complexity of the method is 27
Complex Method,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeControlTree,Cyclomatic complexity of the method is 8
Complex Method,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeToolStripCollection,Cyclomatic complexity of the method is 11
Complex Method,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeListView,Cyclomatic complexity of the method is 12
Complex Method,Rhino.UI,LocalizationUtils,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationUtils.cs,LocalizeString,Cyclomatic complexity of the method is 13
Complex Method,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,ListBoxForm,Cyclomatic complexity of the method is 8
Long Parameter List,Rhino.Runtime,HostUtils,C:\repos\mcneel_rhinocommon\dotnet\hostutils.cs,GetFormattedTimeHelper,The method has 9 parameters. Parameters: localeId' sec' min' hour' day' month' year' pStringHolderFormat' pResultString
Long Parameter List,Rhino,PersistentSettings,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,WriteXmlElement,The method has 5 parameters. Parameters: xmlWriter' elementName' attributeName' attributeValue' allUserSettings
Long Parameter List,Rhino.Geometry,RadialDimension,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_annotation2.cs,RadialDimension,The method has 5 parameters. Parameters: center' arrowTip' xAxis' normal' offsetDistance
Long Parameter List,Rhino.Geometry,BrepEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,Add,The method has 5 parameters. Parameters: startVertex' endVertex' curve3dIndex' subDomain' edgeTolerance
Long Parameter List,Rhino.Geometry,BrepEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,Add,The method has 5 parameters. Parameters: startVertexIndex' endVertexIndex' curve3dIndex' subDomain' edgeTolerance
Long Parameter List,Rhino.Geometry,MeshPart,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,MeshPart,The method has 6 parameters. Parameters: vertexStart' vertexEnd' faceStart' faceEnd' vertexCount' triangleCount
Long Parameter List,Rhino.Geometry,MeshPart,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,MeshPart,The method has 6 parameters. Parameters: vertexStart' vertexEnd' faceStart' faceEnd' vertexCount' triangleCount
Long Parameter List,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetFace,The method has 5 parameters. Parameters: index' vertex1' vertex2' vertex3' vertex4
Long Parameter List,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetFaceVertices,The method has 5 parameters. Parameters: faceIndex' a' b' c' d
Long Parameter List,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetFace,The method has 5 parameters. Parameters: index' vertex1' vertex2' vertex3' vertex4
Long Parameter List,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetFaceVertices,The method has 5 parameters. Parameters: faceIndex' a' b' c' d
Long Parameter List,Rhino.Geometry,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The method has 6 parameters. Parameters: dimension' isRational' order0' order1' controlPointCount0' controlPointCount1
Long Parameter List,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Reduce_RecursiveComponent,The method has 5 parameters. Parameters: P' vertex_map' tolerance' A' B
Long Parameter List,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,GetNextDiscontinuity,The method has 5 parameters. Parameters: direction' continuityType' t0' t1' t
Long Parameter List,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,Evaluate,The method has 5 parameters. Parameters: u' v' numberDerivatives' point' derivatives
Long Parameter List,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,BoundingBox,The method has 6 parameters. Parameters: minX' minY' minZ' maxX' maxY' maxZ
Long Parameter List,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,TryFitCircleTTT,The method has 6 parameters. Parameters: c1' c2' c3' t1' t2' t3
Long Parameter List,Rhino.Geometry,Line,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_line.cs,Line,The method has 6 parameters. Parameters: x0' y0' z0' x1' y1' z1
Long Parameter List,Rhino.Geometry,NurbsCurvePointList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,SetPoint,The method has 5 parameters. Parameters: index' x' y' z' weight
Long Parameter List,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The method has 6 parameters. Parameters: x0' y0' z0' x1' y1' z1
Long Parameter List,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ChangeBasis,The method has 6 parameters. Parameters: initialBasisX' initialBasisY' initialBasisZ' finalBasisX' finalBasisY' finalBasisZ
Long Parameter List,Rhino.DocObjects,Texture,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_texture.cs,GetAlphaBlendValues,The method has 5 parameters. Parameters: constant' a0' a1' a2' a3
Long Parameter List,Rhino.DocObjects,Texture,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_texture.cs,SetAlphaBlendValues,The method has 5 parameters. Parameters: constant' a0' a1' a2' a3
Long Parameter List,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,SetFrustum,The method has 6 parameters. Parameters: left' right' bottom' top' nearDistance' farDistance
Long Parameter List,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetFrustum,The method has 6 parameters. Parameters: left' right' bottom' top' nearDistance' farDistance
Long Parameter List,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,SetFrustumNearFar,The method has 5 parameters. Parameters: nearDistance' farDistance' minNearDistance' minNearOverFar' targetDistance
Long Parameter List,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,SetScreenPort,The method has 6 parameters. Parameters: left' right' bottom' top' near' far
Long Parameter List,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetDollyCameraVector,The method has 5 parameters. Parameters: screenX0' screenY0' screenX1' screenY1' projectionPlaneDistance
Long Parameter List,Rhino.Render,MeshPart,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,MeshPart,The method has 6 parameters. Parameters: vertexStart' vertexEnd' faceStart' faceEnd' vertexCount' triangleCount
Long Parameter List,Rhino.Render,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetFace,The method has 5 parameters. Parameters: index' vertex1' vertex2' vertex3' vertex4
Long Parameter List,Rhino.Render,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetFaceVertices,The method has 5 parameters. Parameters: faceIndex' a' b' c' d
Long Parameter List,Rhino.Render,TextureMapping,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_texture_mapping.cs,CreateBoxMapping,The method has 5 parameters. Parameters: plane' dx' dy' dz' capped
Long Parameter List,Rhino.Display,ColorCMYK,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,ColorCMYK,The method has 5 parameters. Parameters: alpha' cyan' magenta' yellow' key
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The method has 6 parameters. Parameters: x' y' z' r' g' b
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The method has 6 parameters. Parameters: r' g' b' x' y' z
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The method has 6 parameters. Parameters: x' y' z' l' a' b
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The method has 6 parameters. Parameters: l' a' b' x' y' z
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_CIELCH,The method has 6 parameters. Parameters: l' a' b' lum' c' h
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELCH_To_CIELAB,The method has 6 parameters. Parameters: lum' c' h' l' a' b
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The method has 6 parameters. Parameters: r' g' b' h' s' l
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The method has 6 parameters. Parameters: h' s' l' r' g' b
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_CMY,The method has 6 parameters. Parameters: r' g' b' c' m' y
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CMY_To_RGB,The method has 6 parameters. Parameters: c' m' y' r' g' b
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CMY_To_CMYK,The method has 7 parameters. Parameters: cyan' magenta' yellow' c' m' y' k
Long Parameter List,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CMYK_To_CMY,The method has 7 parameters. Parameters: cyan' magenta' yellow' key' c' m' y
Long Parameter List,Rhino.FileIO,File3dm,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,ReadRevisionHistory,The method has 6 parameters. Parameters: path' createdBy' lastEditedBy' revision' createdOn' lastEditedOn
Long Parameter List,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddClippingPlane,The method has 5 parameters. Parameters: plane' uMagnitude' vMagnitude' clippedViewportIds' attributes
Long Parameter List,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddText,The method has 6 parameters. Parameters: text' plane' height' fontName' bold' italic
Long Parameter List,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddText,The method has 7 parameters. Parameters: text' plane' height' fontName' bold' italic' justification
Long Parameter List,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddText,The method has 8 parameters. Parameters: text' plane' height' fontName' bold' italic' justification' attributes
Long Parameter List,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddText,The method has 7 parameters. Parameters: text' plane' height' fontName' bold' italic' attributes
Long Parameter List,Rhino.Geometry.Collections,BrepEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,Add,The method has 5 parameters. Parameters: startVertex' endVertex' curve3dIndex' subDomain' edgeTolerance
Long Parameter List,Rhino.Geometry.Collections,BrepEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,Add,The method has 5 parameters. Parameters: startVertexIndex' endVertexIndex' curve3dIndex' subDomain' edgeTolerance
Long Parameter List,Rhino.Geometry.Collections,MeshPart,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,MeshPart,The method has 6 parameters. Parameters: vertexStart' vertexEnd' faceStart' faceEnd' vertexCount' triangleCount
Long Parameter List,Rhino.Geometry.Collections,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetFace,The method has 5 parameters. Parameters: index' vertex1' vertex2' vertex3' vertex4
Long Parameter List,Rhino.Geometry.Collections,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetFaceVertices,The method has 5 parameters. Parameters: faceIndex' a' b' c' d
Long Parameter List,Rhino.Geometry.Collections,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The method has 6 parameters. Parameters: dimension' isRational' order0' order1' controlPointCount0' controlPointCount1
Long Parameter List,Rhino.Geometry.Collections,NurbsCurvePointList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,SetPoint,The method has 5 parameters. Parameters: index' x' y' z' weight
Long Parameter List,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,LineLine,The method has 6 parameters. Parameters: lineA' lineB' a' b' tolerance' finiteSegments
Long Parameter List,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,LineCircle,The method has 6 parameters. Parameters: line' circle' t1' point1' t2' point2
Long Identifier,Rhino.Geometry,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxNormalizeTextureCoordinates is 30.
Long Identifier,Rhino.Geometry,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxTransposeTextureCoordinates is 30.
Long Identifier,Rhino.Geometry,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxNormalizeTextureCoordinates is 30.
Long Identifier,Rhino.Geometry,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxTransposeTextureCoordinates is 30.
Long Identifier,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the parameter faceOrientationMatchesEdgeDirection is 35.
Long Identifier,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the parameter faceOrientationMatchesEdgeDirection is 35.
Long Identifier,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,,The length of the parameter idxIsFrustumLeftRightSymmetric is 30.
Long Identifier,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,,The length of the parameter idxIsFrustumTopBottomSymmetric is 30.
Long Identifier,Rhino.Render,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxNormalizeTextureCoordinates is 30.
Long Identifier,Rhino.Render,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxTransposeTextureCoordinates is 30.
Long Identifier,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the parameter faceOrientationMatchesEdgeDirection is 35.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_INSTANCE_DEFINITION_TABLE is 31.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_PROPERTIES_REVISIONHISTORY is 32.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_PROPERTIES_COMPRESSED_PREVIEWIMAGE is 40.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_PROPERTIES_OPENNURBS_VERSION is 34.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_NAMED_CPLANE_LIST is 32.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_NAMED_VIEW_LIST is 30.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_CURRENT_LAYER_INDEX is 34.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_CURRENT_MATERIAL_INDEX is 37.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS__NEVER__USE__THIS is 32.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_CURRENT_WIRE_DENSITY is 35.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_CURRENT_FONT_INDEX is 33.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_SETTINGS_CURRENT_DIMSTYLE_INDEX is 37.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_LIGHT_RECORD_ATTRIBUTES_USERDATA is 38.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_INSTANCE_DEFINITION_RECORD is 32.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OBSOLETE_LAYERSET_RECORD is 30.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OBJECT_RECORD_ATTRIBUTES is 30.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OBJECT_RECORD_ATTRIBUTES_USERDATA is 39.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OBJECT_RECORD_HISTORY_HEADER is 34.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OBJECT_RECORD_HISTORY_DATA is 32.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OPENNURBS_CLASS_USERDATA is 30.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_OPENNURBS_CLASS_USERDATA_HEADER is 37.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_RHINOIO_OBJECT_NURBS_CURVE is 32.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_RHINOIO_OBJECT_NURBS_SURFACE is 34.
Long Identifier,Rhino.FileIO,File3dmTypeCodes,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm.cs,,The length of the parameter TCODE_COMPRESSED_MESH_GEOMETRY is 30.
Long Identifier,Rhino.Geometry.Collections,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxNormalizeTextureCoordinates is 30.
Long Identifier,Rhino.Geometry.Collections,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,,The length of the parameter idxTransposeTextureCoordinates is 30.
Long Identifier,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the parameter faceOrientationMatchesEdgeDirection is 35.
Long Statement,Rhino.Runtime,HostUtils,C:\repos\mcneel_rhinocommon\dotnet\hostutils.cs,InitializeRhinoCommon,The length of the statement  "      UnsafeNativeMethods.RHC_SetCmnUtilitiesCallbacks(PlugIn.GetPlugInSettingsFolderHook' PlugIn.GetPlugInRuiFileNameHook' PlugIn.ValidateRegisteredPlugInRuiFileNameHook); " is 166.
Long Statement,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnBrep,The length of the statement  "        System.Reflection.MethodInfo mi = onBrepType.GetMethod("WrapNativePointer"' new Type[] { typeof(IntPtr)' typeof(bool)' typeof(bool) }); " is 135.
Long Statement,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnSurface,The length of the statement  "        System.Reflection.MethodInfo mi = onType.GetMethod("WrapNativePointer"' new Type[] { typeof(IntPtr)' typeof(bool)' typeof(bool) }); " is 131.
Long Statement,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnMesh,The length of the statement  "        System.Reflection.MethodInfo mi = onType.GetMethod("WrapNativePointer"' new Type[] { typeof(IntPtr)' typeof(bool)' typeof(bool) }); " is 131.
Long Statement,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnCurve,The length of the statement  "        System.Reflection.MethodInfo mi = onType.GetMethod("WrapNativePointer"' new Type[] { typeof(IntPtr)' typeof(bool)' typeof(bool) }); " is 131.
Long Statement,Rhino.Runtime,MonoHost,C:\repos\mcneel_rhinocommon\dotnet\MonoHost.cs,InitializeExceptionHandling,The length of the statement  "      System.Windows.Forms.Application.ThreadException += new System.Threading.ThreadExceptionEventHandler(Application_ThreadException); " is 130.
Long Statement,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeReadON_Object,The length of the statement  "      IntPtr rc = UnsafeNativeMethods.ON_ReadBufferArchive(archive_3dm_version' archive_opennurbs_version' stream.Length' stream); " is 124.
Long Statement,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeWriteON_Object,The length of the statement  "      IntPtr pWriteBuffer = UnsafeNativeMethods.ON_WriteBufferArchive_NewWriter(pConstOnObject' rhino_version' writeuserdata' ref length); " is 132.
Long Statement,Rhino.Runtime,AssemblyResolver,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,CurrentDomain_AssemblyResolve,The length of the statement  "      string must_be_in_filename = searchname.Substring(0' searchname.Length > length_match ? length_match : searchname.Length); " is 122.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetByte,The length of the statement  "      return byte.TryParse(GetValue(bDefault)' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out value); " is 134.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetInteger,The length of the statement  "      return int.TryParse(GetValue(bDefault)' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out value); " is 133.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetUnsignedInteger,The length of the statement  "      return uint.TryParse(GetValue(bDefault)' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out value); " is 134.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetDouble,The length of the statement  "      return double.TryParse(GetValue(bDefault)' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out value); " is 136.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetStringList,The length of the statement  "        s = s.Replace(StringListSeparator + StringListRootKey + StringListSeparator' string.IsNullOrEmpty(rootString) ? listSeporator : listSeporator + rootString + listSeporator); " is 172.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetStringList,The length of the statement  "        s = s.Replace(StringListSeparator + StringListRootKey' string.IsNullOrEmpty(rootString) ? string.Empty : listSeporator + rootString); " is 133.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetStringList,The length of the statement  "        s = s.Replace(StringListRootKey + StringListSeparator' string.IsNullOrEmpty(rootString) ? string.Empty : rootString + listSeporator); " is 133.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetDate,The length of the statement  "      return DateTime.TryParse(GetValue(bDefault)' CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out value); " is 128.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetColor,The length of the statement  "      if (   Int32.TryParse(argb[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out alpha) " is 123.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetPoint3d,The length of the statement  "      if (   double.TryParse(point[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out x) " is 121.
Long Statement,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,SetPoint,The length of the statement  "        PersistentSettingsEventArgs<System.Drawing.Point> a = new PersistentSettingsEventArgs<System.Drawing.Point>(old_value' value); " is 126.
Long Statement,Rhino,PersistentSettings,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,ContainsModifiedValues,The length of the statement  "          if (null != allUserSettings && allUserSettings.m_Settings.ContainsKey(v.Key) && 0 != string.Compare(v.Value.GetValue(false)' allUserSettings.m_Settings[v.Key].GetValue(false)' StringComparison.Ordinal)) " is 202.
Long Statement,Rhino,PersistentSettings,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,WriteXmlElement,The length of the statement  "          bool valueDifferentThanAllUser = (null != allUserValue && 0 != string.Compare(value' allUserValue' StringComparison.Ordinal)); " is 126.
Long Statement,Rhino.Geometry,LinearDimension,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_annotation2.cs,SetLocations,The length of the statement  "      UnsafeNativeMethods.ON_LinearDimension2_SetLocations(pThis' extensionLine1End' extensionLine2End' pointOnDimensionLine); " is 120.
Long Statement,Rhino.Geometry,BrepEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,Add,The length of the statement  "      int index = UnsafeNativeMethods.ON_Brep_NewEdge2(ptr_brep' startVertexIndex' endVertexIndex' curve3dIndex' subDomain' edgeTolerance); " is 133.
Long Statement,Rhino.Geometry,BrepTrimList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,AddSingularTrim,The length of the statement  "      int index = UnsafeNativeMethods.ON_Brep_NewSingularTrim(ptr_brep' vertex.VertexIndex' loop.LoopIndex' (int)iso' curve2dIndex); " is 126.
Long Statement,Rhino.Geometry,Hatch,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_hatch.cs,Get3dCurves,The length of the statement  "      using (Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer curves = new Runtime.InteropWrappers.SimpleArrayCurvePointer()) " is 124.
Long Statement,Rhino.Geometry,InstanceDefinitionGeometry,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_instance.cs,_InternalGetConstPointer,The length of the statement  "      DocObjects.Tables.InstanceDefinitionTableEventArgs ide = m__parent as DocObjects.Tables.InstanceDefinitionTableEventArgs; " is 121.
Long Statement,Rhino.Geometry,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,TryGetAt,The length of the statement  "      var success = UnsafeNativeMethods.ON_TextureCoordinates_GetTextureCoordinate(ConstPointer()' index' ref u' ref v' ref w); " is 121.
Long Statement,Rhino.Geometry,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,TryGetAt,The length of the statement  "      var success = UnsafeNativeMethods.ON_TextureCoordinates_GetTextureCoordinate(ConstPointer()' index' ref u' ref v' ref w); " is 121.
Long Statement,Rhino.Geometry,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetPartition,The length of the statement  "      if (UnsafeNativeMethods.ON_Mesh_GetMeshPart(pConstThis' which' ref vi0' ref vi1' ref fi0' ref fi1' ref vert_count' ref tri_count)) " is 130.
Long Statement,Rhino.Geometry,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetPartition,The length of the statement  "      if (UnsafeNativeMethods.ON_Mesh_GetMeshPart(pConstThis' which' ref vi0' ref vi1' ref fi0' ref fi1' ref vert_count' ref tri_count)) " is 130.
Long Statement,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The length of the statement  "        if (index >= max) { throw new IndexOutOfRangeException("Vertex index must be smaller than the size of the collection"); } " is 121.
Long Statement,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The length of the statement  "        if (index >= max) { throw new IndexOutOfRangeException("Vertex index must be smaller than the size of the collection"); } " is 121.
Long Statement,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the statement  "      UnsafeNativeMethods.ON_MeshTopologyEdge_TopfList2(pConstMesh' topologyEdgeIndex' count' rc' faceOrientationMatchesEdgeDirection); " is 129.
Long Statement,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the statement  "      UnsafeNativeMethods.ON_MeshTopologyEdge_TopfList2(pConstMesh' topologyEdgeIndex' count' rc' faceOrientationMatchesEdgeDirection); " is 129.
Long Statement,Rhino.Geometry,MeshTextureCoordinateList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetTextureCoordinatesHelper,The length of the statement  "      return UnsafeNativeMethods.ON_Mesh_SetTextureCoordinates(ptr' textureCoordinates.Length' ref textureCoordinates[0]' append); " is 124.
Long Statement,Rhino.Geometry,MeshTextureCoordinateList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetTextureCoordinatesHelper,The length of the statement  "      return UnsafeNativeMethods.ON_Mesh_SetTextureCoordinates(ptr' textureCoordinates.Length' ref textureCoordinates[0]' append); " is 124.
Long Statement,Rhino.Geometry,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The length of the statement  "      IntPtr ptr = UnsafeNativeMethods.ON_NurbsSurface_New(dimension' isRational' order0' order1' controlPointCount0' controlPointCount1); " is 132.
Long Statement,Rhino.Geometry,RevSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_revsurface.cs,Create,The length of the statement  "      IntPtr pRevSurface = UnsafeNativeMethods.ON_RevSurface_Create(pConstCurve' ref axisOfRevolution' startAngleRadians' endAngleRadians); " is 133.
Long Statement,Rhino.Geometry,RTree,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rtree.cs,Search,The length of the statement  "      bool rc = UnsafeNativeMethods.ON_RTree_SearchSphere(pConstTree' sphere.Center' sphere.Radius' cbh.SerialNumber' searcher); " is 122.
Long Statement,Rhino.Geometry,Arc,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_arc.cs,Equals,The length of the statement  "      return Math.Abs(m_radius-other.m_radius)<RhinoMath.ZeroTolerance && m_angle == other.m_angle && m_plane == other.m_plane; " is 121.
Long Statement,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,TryFitCircleTTT,The length of the statement  "      if (!UnsafeNativeMethods.ON_Circle_TryFitTTT(c1.ConstPointer()' c2.ConstPointer()' c3.ConstPointer()' t1' t2' t3' ref rc)) " is 122.
Long Statement,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,DerivativeAt,The length of the statement  "      if (derivativeCount < 0) { throw new InvalidOperationException("The derivativeCount must be larger than or equal to zero"); } " is 125.
Long Statement,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The length of the statement  "      bool rc = periodic ? UnsafeNativeMethods.ON_NurbsCurve_CreatePeriodicUniformNurbs(ptr_curve' dimension' order' count' point_array' knot_delta) : " is 144.
Long Statement,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The length of the statement  "                           UnsafeNativeMethods.ON_NurbsCurve_CreateClampedUniformNurbs(ptr_curve' dimension' order' count' point_array' knot_delta); " is 121.
Long Statement,Rhino.Geometry,Quaternion,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_quaternion.cs,CrossProduct,The length of the statement  "      return new Quaternion(0.0' p.m_c * q.m_d - p.m_d * q.m_c' p.m_d * q.m_b - p.m_b * q.m_d' p.m_b * q.m_c - p.m_c * q.m_d); " is 120.
Long Statement,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToString,The length of the statement  "      sb.AppendFormat("R0=({0}'{1}'{2}'{3})'"' m_00.ToString(provider)' m_01.ToString(provider)' m_02.ToString(provider)' m_03.ToString(provider)); " is 141.
Long Statement,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToString,The length of the statement  "      sb.AppendFormat(" R1=({0}'{1}'{2}'{3})'"' m_10.ToString(provider)' m_11.ToString(provider)' m_12.ToString(provider)' m_13.ToString(provider)); " is 142.
Long Statement,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToString,The length of the statement  "      sb.AppendFormat(" R2=({0}'{1}'{2}'{3})'"' m_20.ToString(provider)' m_21.ToString(provider)' m_22.ToString(provider)' m_23.ToString(provider)); " is 142.
Long Statement,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToString,The length of the statement  "      sb.AppendFormat(" R3=({0}'{1}'{2}'{3})"' m_30.ToString(provider)' m_31.ToString(provider)' m_32.ToString(provider)' m_33.ToString(provider)); " is 141.
Long Statement,Rhino.Geometry,Interval,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_point.cs,ParameterAt,The length of the statement  "      return (RhinoMath.IsValidDouble(normalizedParameter) ? ((1.0 - normalizedParameter) * m_t0 + normalizedParameter * m_t1) : RhinoMath.UnsetValue); " is 145.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,ChangeToPerspectiveProjection,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_ChangeToPerspectiveProjection(pThis' targetDistance' symmetricFrustum' lensLength); " is 122.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,SetFrustum,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_SetFrustum(NonConstPointer()' left' right' bottom' top' nearDistance' farDistance); " is 122.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetFrustum,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_GetFrustum(pConstThis' ref left' ref right' ref bottom' ref top' ref nearDistance' ref farDistance); " is 139.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,ChangeToSymmetricFrustum,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_ChangeToSymmetricFrustum(pThis' isLeftRightSymmetric' isTopBottomSymmetric' targetDistance); " is 131.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetBoundingBoxDepth,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_GetBoundingBoxDepth(pConstThis' bbox.Min' bbox.Max' ref nearDistance' ref farDistance' false); " is 133.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetSphereDepth,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_GetSphereDepth(pConstThis' sphere.Center' sphere.Radius' ref nearDistance' ref farDistance' false); " is 138.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,SetFrustumNearFar,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_SetFrustrumNearFar(pThis' nearDistance' farDistance' minNearDistance' minNearOverFar' targetDistance); " is 141.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetNearPlaneCorners,The length of the statement  "      if (!UnsafeNativeMethods.ON_Viewport_GetNearFarRect(pConstThis' true' ref leftBottom' ref rightBottom' ref leftTop' ref rightTop)) " is 130.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetFarPlaneCorners,The length of the statement  "      if (!UnsafeNativeMethods.ON_Viewport_GetNearFarRect(pConstThis' false' ref leftBottom' ref rightBottom' ref leftTop' ref rightTop)) " is 131.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,SetScreenPort,The length of the statement  "      return SetScreenPort(windowRectangle.Left' windowRectangle.Right' windowRectangle.Bottom' windowRectangle.Top' near' far); " is 122.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetScreenPort,The length of the statement  "      if (!UnsafeNativeMethods.ON_Viewport_GetScreenPort(pConstThis' ref left' ref right' ref bottom' ref top' ref near' ref far)) " is 124.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetCameraAngles,The length of the statement  "      return UnsafeNativeMethods.ON_Viewport_GetCameraAngle2(pConstThis' ref halfDiagonalAngleRadians' ref halfVerticalAngleRadians' ref halfHorizontalAngleRadians); " is 159.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,GetDollyCameraVector,The length of the statement  "      if (UnsafeNativeMethods.ON_Viewport_GetDollyCameraVector(pConstThis' screenX0' screenY0' screenX1' screenY1' projectionPlaneDistance' ref v)) " is 141.
Long Statement,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,DollyExtents,The length of the statement  "        rc = UnsafeNativeMethods.ON_Viewport_DollyExtents(ptr_this' cameraCoordinateBoundingBox.Min' cameraCoordinateBoundingBox.Max); " is 126.
Long Statement,Rhino.DocObjects,MaterialRefs,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkmaterial.cs,Create,The length of the statement  "      if (createParams.PlugInId == Guid.Empty) throw new ArgumentException("The PlugInId property can not be empty"' "createParams"); " is 127.
Long Statement,Rhino.DocObjects,MaterialRefs,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkmaterial.cs,CopyTo,The length of the statement  "      if (array.Length < length) throw new ArgumentException("The number of elements in the MaterialRefs is greater than the available space from arrayIndex to the end of the destination array."' "array"); " is 199.
Long Statement,Rhino.Render,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,TryGetAt,The length of the statement  "      var success = UnsafeNativeMethods.ON_TextureCoordinates_GetTextureCoordinate(ConstPointer()' index' ref u' ref v' ref w); " is 121.
Long Statement,Rhino.Render,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetPartition,The length of the statement  "      if (UnsafeNativeMethods.ON_Mesh_GetMeshPart(pConstThis' which' ref vi0' ref vi1' ref fi0' ref fi1' ref vert_count' ref tri_count)) " is 130.
Long Statement,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The length of the statement  "        if (index >= max) { throw new IndexOutOfRangeException("Vertex index must be smaller than the size of the collection"); } " is 121.
Long Statement,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the statement  "      UnsafeNativeMethods.ON_MeshTopologyEdge_TopfList2(pConstMesh' topologyEdgeIndex' count' rc' faceOrientationMatchesEdgeDirection); " is 129.
Long Statement,Rhino.Render,MeshTextureCoordinateList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetTextureCoordinatesHelper,The length of the statement  "      return UnsafeNativeMethods.ON_Mesh_SetTextureCoordinates(ptr' textureCoordinates.Length' ref textureCoordinates[0]' append); " is 124.
Long Statement,Rhino.FileIO,File3dm,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,Read,The length of the statement  "      IntPtr ptr_onx_model = UnsafeNativeMethods.ONX_Model_ReadFile2(path' (UnsafeNativeMethods.ReadFileTableTypeFilter)tableTypeFilterFilter' (UnsafeNativeMethods.ObjectTypeFilter)objectTypeFilter' IntPtr.Zero); " is 206.
Long Statement,Rhino.FileIO,File3dm,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,ReadWithLog,The length of the statement  "        IntPtr ptr_onx_model = UnsafeNativeMethods.ONX_Model_ReadFile2(path' (UnsafeNativeMethods.ReadFileTableTypeFilter)tableTypeFilterFilter' (UnsafeNativeMethods.ObjectTypeFilter)objectTypeFilter' ptr_string); " is 205.
Long Statement,Rhino.FileIO,File3dm,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,ReadRevisionHistory,The length of the statement  "          if (UnsafeNativeMethods.ON_3dmRevisionHistory_GetDate(ptr_revhist' true' ref second' ref minute' ref hour' ref day' ref month' ref year)) " is 137.
Long Statement,Rhino.FileIO,File3dm,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,ReadRevisionHistory,The length of the statement  "          if (UnsafeNativeMethods.ON_3dmRevisionHistory_GetDate(ptr_revhist' false' ref second' ref minute' ref hour' ref day' ref month' ref year)) " is 138.
Long Statement,Rhino.FileIO,File3dm,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,Write,The length of the statement  "      return UnsafeNativeMethods.ONX_Model_WriteFile2(ptr_this' path' options.Version' options.SaveRenderMeshes' options.SaveAnalysisMeshes' options.SaveUserData); " is 157.
Long Statement,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddClippingPlane,The length of the statement  "      Guid rc = UnsafeNativeMethods.ONX_Model_ObjectTable_AddClippingPlane(pThis' ref plane' uMagnitude' vMagnitude' count' clippedIds' pAttrs); " is 138.
Long Statement,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddText,The length of the statement  "      Guid rc = UnsafeNativeMethods.ONX_Model_ObjectTable_AddText(pThis' text' ref plane' height' fontName' fontStyle' (int)justification' pAttr); " is 140.
Long Statement,Rhino.FileIO,File3dmMaterialTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,File3dmLinetypeTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,File3dmLayerTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,File3dmDimStyleTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,File3dmHatchPatternTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,File3dmInstanceDefinitionTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,File3dmInstanceDefinitionTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,GetEnumerator,The length of the statement  "      return new Rhino.Collections.TableEnumerator<File3dmInstanceDefinitionTable' Rhino.Geometry.InstanceDefinitionGeometry>(this); " is 126.
Long Statement,Rhino.FileIO,File3dmInstanceDefinitionTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,GetEnumerator,The length of the statement  "      return new Rhino.Collections.TableEnumerator<File3dmInstanceDefinitionTable' Rhino.Geometry.InstanceDefinitionGeometry>(this); " is 126.
Long Statement,Rhino.FileIO,File3dmViewTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,CopyTo,The length of the statement  "        throw new ArgumentException("The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array."); " is 172.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,Write3dmChunkVersion,The length of the statement  "      m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_Write3dmChunkVersion(m_ptr' major' minor); " is 129.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteBoolArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteBool2(m_ptr' count' l.ToArray()); " is 125.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteByteArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteByte2(m_ptr' count' l.ToArray()); " is 125.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteCompressedBuffer,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteCompressedBuffer(m_ptr' count' l.ToArray()); " is 136.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteShortArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteShort2(m_ptr' count' l.ToArray()); " is 126.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteIntArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' count' l.ToArray()); " is 124.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteSingleArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' count' l.ToArray()); " is 127.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteDoubleArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' count' l.ToArray()); " is 127.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteTransform,The length of the statement  "      m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteTransform(m_ptr' ref value); " is 120.
Long Statement,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteMeshingParameters,The length of the statement  "      m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteMeshParameters(m_ptr' pMeshParameters); " is 131.
Long Statement,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,Read3dmChunkVersion,The length of the statement  "      m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_Read3dmChunkVersion(m_ptr' ref major' ref minor); " is 134.
Long Statement,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadCompressedBuffer,The length of the statement  "      m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadCompressedBufferSize(m_ptr' ref count); " is 128.
Long Statement,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadCompressedBuffer,The length of the statement  "        m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadCompressedBuffer(m_ptr' count' rc); " is 124.
Long Statement,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadStringArray,The length of the statement  "          m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadString(m_ptr' str.NonConstPointer()); " is 126.
Long Statement,Rhino.Geometry.Collections,BrepEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,Add,The length of the statement  "      int index = UnsafeNativeMethods.ON_Brep_NewEdge2(ptr_brep' startVertexIndex' endVertexIndex' curve3dIndex' subDomain' edgeTolerance); " is 133.
Long Statement,Rhino.Geometry.Collections,BrepTrimList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,AddSingularTrim,The length of the statement  "      int index = UnsafeNativeMethods.ON_Brep_NewSingularTrim(ptr_brep' vertex.VertexIndex' loop.LoopIndex' (int)iso' curve2dIndex); " is 126.
Long Statement,Rhino.Geometry.Collections,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,TryGetAt,The length of the statement  "      var success = UnsafeNativeMethods.ON_TextureCoordinates_GetTextureCoordinate(ConstPointer()' index' ref u' ref v' ref w); " is 121.
Long Statement,Rhino.Geometry.Collections,Mesh,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetPartition,The length of the statement  "      if (UnsafeNativeMethods.ON_Mesh_GetMeshPart(pConstThis' which' ref vi0' ref vi1' ref fi0' ref fi1' ref vert_count' ref tri_count)) " is 130.
Long Statement,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The length of the statement  "        if (index >= max) { throw new IndexOutOfRangeException("Vertex index must be smaller than the size of the collection"); } " is 121.
Long Statement,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetConnectedFaces,The length of the statement  "      UnsafeNativeMethods.ON_MeshTopologyEdge_TopfList2(pConstMesh' topologyEdgeIndex' count' rc' faceOrientationMatchesEdgeDirection); " is 129.
Long Statement,Rhino.Geometry.Collections,MeshTextureCoordinateList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,SetTextureCoordinatesHelper,The length of the statement  "      return UnsafeNativeMethods.ON_Mesh_SetTextureCoordinates(ptr' textureCoordinates.Length' ref textureCoordinates[0]' append); " is 124.
Long Statement,Rhino.Geometry.Collections,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The length of the statement  "      IntPtr ptr = UnsafeNativeMethods.ON_NurbsSurface_New(dimension' isRational' order0' order1' controlPointCount0' controlPointCount1); " is 132.
Long Statement,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The length of the statement  "      bool rc = periodic ? UnsafeNativeMethods.ON_NurbsCurve_CreatePeriodicUniformNurbs(ptr_curve' dimension' order' count' point_array' knot_delta) : " is 144.
Long Statement,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The length of the statement  "                           UnsafeNativeMethods.ON_NurbsCurve_CreateClampedUniformNurbs(ptr_curve' dimension' order' count' point_array' knot_delta); " is 121.
Long Statement,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,LineSphere,The length of the statement  "      int rc = UnsafeNativeMethods.ON_Intersect_LineSphere(ref line' ref sphere' ref intersectionPoint1' ref intersectionPoint2); " is 123.
Long Statement,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,LineCylinder,The length of the statement  "      int rc = UnsafeNativeMethods.ON_Intersect_LineCylinder(ref line' ref cylinder' ref intersectionPoint1' ref intersectionPoint2); " is 127.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,Write3dmChunkVersion,The length of the statement  "      m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_Write3dmChunkVersion(m_ptr' major' minor); " is 129.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteBoolArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteBool2(m_ptr' count' l.ToArray()); " is 125.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteByteArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteByte2(m_ptr' count' l.ToArray()); " is 125.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteCompressedBuffer,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteCompressedBuffer(m_ptr' count' l.ToArray()); " is 136.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteShortArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteShort2(m_ptr' count' l.ToArray()); " is 126.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteIntArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' count' l.ToArray()); " is 124.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteSingleArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' count' l.ToArray()); " is 127.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteDoubleArray,The length of the statement  "        m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' count' l.ToArray()); " is 127.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteTransform,The length of the statement  "      m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteTransform(m_ptr' ref value); " is 120.
Long Statement,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteMeshingParameters,The length of the statement  "      m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteMeshParameters(m_ptr' pMeshParameters); " is 131.
Long Statement,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,Read3dmChunkVersion,The length of the statement  "      m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_Read3dmChunkVersion(m_ptr' ref major' ref minor); " is 134.
Long Statement,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadCompressedBuffer,The length of the statement  "      m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadCompressedBufferSize(m_ptr' ref count); " is 128.
Long Statement,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadCompressedBuffer,The length of the statement  "        m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadCompressedBuffer(m_ptr' count' rc); " is 124.
Long Statement,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadStringArray,The length of the statement  "          m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadString(m_ptr' str.NonConstPointer()); " is 126.
Long Statement,Rhino.DocObjects.Custom,UserData,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_userdata.cs,RegisterType,The length of the statement  "      UnsafeNativeMethods.CRhCmnUserData_SetCallbacks(g_on_transform_user_data' g_on_archive' g_on_read_write' g_on_duplicate' g_on_create' g_on_delete); " is 147.
Long Statement,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ComboListBoxForm)); " is 136.
Long Statement,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The length of the statement  "      m_btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 141.
Long Statement,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The length of the statement  "      m_btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The length of the statement  "      this.m_comboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The length of the statement  "              if (!string.IsNullOrEmpty(dialog_text_value) && 0 != String.CompareOrdinal(english_text_value' dialog_text_value) && !m_dialog_list.ContainsKey(dialog_text_value)) " is 163.
Long Statement,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeListView,The length of the statement  "        // First look at this control' in case this is a derived class' then get list view parent so we have a place to look for ControlHeader variables " is 144.
Long Statement,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeListView,The length of the statement  "                if (null != header && !string.IsNullOrEmpty(header.Text) && header_fields.TryGetValue(header' out control_field_name) && !string.IsNullOrEmpty(control_field_name)) " is 163.
Long Statement,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,OnFormClosing,The length of the statement  "      if (OnlyNumbers && (e.CloseReason == CloseReason.UserClosing || e.CloseReason== CloseReason.None) && DialogResult == System.Windows.Forms.DialogResult.OK) " is 154.
Long Statement,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StringBoxForm)); " is 133.
Long Statement,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The length of the statement  "      this.m_btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The length of the statement  "      this.m_btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The length of the statement  "      this.m_txtbox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EditBoxForm)); " is 131.
Long Statement,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The length of the statement  "      m_btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The length of the statement  "      this.m_btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The length of the statement  "      this.m_txtbox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListBoxForm)); " is 131.
Long Statement,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The length of the statement  "      m_btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The length of the statement  "      m_btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 141.
Long Statement,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The length of the statement  "      this.m_list.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 142.
Long Statement,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The length of the statement  "      this.m_checkedListBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 152.
Complex Conditional,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetColor,The conditional expression  "Int32.TryParse(argb[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out alpha)            && Int32.TryParse(argb[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out red)            && Int32.TryParse(argb[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out green)            && Int32.TryParse(argb[3]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out blue)"  is complex.
Complex Conditional,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetRectangle,The conditional expression  "int.TryParse(rect[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out x)            && int.TryParse(rect[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out y)            && int.TryParse(rect[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out width)            && int.TryParse(rect[3]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out height)"  is complex.
Complex Conditional,Rhino.Geometry,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The conditional expression  "success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z)"  is complex.
Complex Conditional,Rhino.Geometry,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The conditional expression  "success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z)"  is complex.
Complex Conditional,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The conditional expression  "a < 0 || b < 0 || c < 0 || d < 0"  is complex.
Complex Conditional,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The conditional expression  "a < 0 || b < 0 || c < 0 || d < 0"  is complex.
Complex Conditional,Rhino.Geometry,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The conditional expression  "dimension < 1 || order0 < 2 || order1 < 2 || controlPointCount0 < order0 || controlPointCount1 < order1"  is complex.
Complex Conditional,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Contains,The conditional expression  "x == m_x.T0 || x == m_x.T1 || y == m_y.T0 || y == m_y.T1"  is complex.
Complex Conditional,Rhino.Render,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The conditional expression  "success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z)"  is complex.
Complex Conditional,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The conditional expression  "a < 0 || b < 0 || c < 0 || d < 0"  is complex.
Complex Conditional,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteItem,The conditional expression  "archive == null || it == ItemType.Undefined || string.IsNullOrEmpty(entryName) || val == null"  is complex.
Complex Conditional,Rhino.Geometry.Collections,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The conditional expression  "success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z)"  is complex.
Complex Conditional,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The conditional expression  "a < 0 || b < 0 || c < 0 || d < 0"  is complex.
Complex Conditional,Rhino.Geometry.Collections,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The conditional expression  "dimension < 1 || order0 < 2 || order1 < 2 || controlPointCount0 < order0 || controlPointCount1 < order1"  is complex.
Complex Conditional,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteItem,The conditional expression  "archive == null || it == ItemType.Undefined || string.IsNullOrEmpty(entryName) || val == null"  is complex.
Complex Conditional,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeListView,The conditional expression  "null != header && !string.IsNullOrEmpty(header.Text) && header_fields.TryGetValue(header' out control_field_name) && !string.IsNullOrEmpty(control_field_name)"  is complex.
Complex Conditional,Rhino.UI,LocalizationUtils,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationUtils.cs,LocalizeString,The conditional expression  "iStart > 0 || jEnd > iEnd || bN || bR || bT || bQuot || bBS"  is complex.
Complex Conditional,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,OnFormClosing,The conditional expression  "OnlyNumbers && (e.CloseReason == CloseReason.UserClosing || e.CloseReason== CloseReason.None) && DialogResult == System.Windows.Forms.DialogResult.OK"  is complex.
Complex Conditional,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,OnFormClosing,The conditional expression  "(RhinoMath.IsValidDouble(MinimumNumberValue) && d < MinimumNumberValue) ||                (RhinoMath.IsValidDouble(MaximumNumberValue) && d > MaximumNumberValue)"  is complex.
Empty Catch Block,Rhino.Runtime,HostUtils,C:\repos\mcneel_rhinocommon\dotnet\hostutils.cs,SetInShutDown,The method has an empty catch block.
Empty Catch Block,Rhino.Runtime,AssemblyResolver,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,CurrentDomain_AssemblyResolve,The method has an empty catch block.
Empty Catch Block,Rhino,PersistentSettings,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetEnumValue,The method has an empty catch block.
Empty Catch Block,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,TryGetEnumValue,The method has an empty catch block.
Empty Catch Block,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,TryGetEnumValue,The method has an empty catch block.
Magic Number,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnXform,The following statement contains a magic number: if (null != onType)        {          double[] vals = new double[16];          for( int row=0; row<4; row++ )          {            for (int column = 0; column < 4; column++)            {              vals[4 * row + column] = source[row' column];            }          }          rc = System.Activator.CreateInstance(onType' new object[] { vals });        }
Magic Number,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnXform,The following statement contains a magic number: if (null != onType)        {          double[] vals = new double[16];          for( int row=0; row<4; row++ )          {            for (int column = 0; column < 4; column++)            {              vals[4 * row + column] = source[row' column];            }          }          rc = System.Activator.CreateInstance(onType' new object[] { vals });        }
Magic Number,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnXform,The following statement contains a magic number: if (null != onType)        {          double[] vals = new double[16];          for( int row=0; row<4; row++ )          {            for (int column = 0; column < 4; column++)            {              vals[4 * row + column] = source[row' column];            }          }          rc = System.Activator.CreateInstance(onType' new object[] { vals });        }
Magic Number,Rhino.Runtime,Interop,C:\repos\mcneel_rhinocommon\dotnet\interop.cs,ToOnXform,The following statement contains a magic number: if (null != onType)        {          double[] vals = new double[16];          for( int row=0; row<4; row++ )          {            for (int column = 0; column < 4; column++)            {              vals[4 * row + column] = source[row' column];            }          }          rc = System.Activator.CreateInstance(onType' new object[] { vals });        }
Magic Number,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeWriteON_Object,The following statement contains a magic number: int rhino_version = (options != null) ? options.RhinoVersion : 5;
Magic Number,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeWriteON_Object,The following statement contains a magic number: if (rhino_version > 4 && rhino_version < 50)          rhino_version *= 10;
Magic Number,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeWriteON_Object,The following statement contains a magic number: if (rhino_version > 4 && rhino_version < 50)          rhino_version *= 10;
Magic Number,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeWriteON_Object,The following statement contains a magic number: if (rhino_version > 4 && rhino_version < 50)          rhino_version *= 10;
Magic Number,Rhino.Runtime,CommonObject,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_object.cs,SerializeWriteON_Object,The following statement contains a magic number: if (length < int.MaxValue && length > 0 && pWriteBuffer != IntPtr.Zero)        {          int sz = (int)length;          IntPtr pByteArray = UnsafeNativeMethods.ON_WriteBufferArchive_Buffer(pWriteBuffer);          byte[] bytearray = new byte[sz];          System.Runtime.InteropServices.Marshal.Copy(pByteArray' bytearray' 0' sz);            info.AddValue("version"' 10000);          info.AddValue(ARCHIVE_3DM_VERSION' rhino_version);          int archive_opennurbs_version = UnsafeNativeMethods.ON_Version();          info.AddValue(ARCHIVE_OPENNURBS_VERSION' archive_opennurbs_version);          info.AddValue("data"' bytearray);        }
Magic Number,Rhino.Runtime,AssemblyResolver,C:\repos\mcneel_rhinocommon\dotnet\resolver.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: const int length_match = 5;
Magic Number,Rhino,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToRadians,The following statement contains a magic number: return degrees * PI / 180.0;
Magic Number,Rhino,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToDegrees,The following statement contains a magic number: return radians * 180.0 / PI;
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetColor,The following statement contains a magic number: if (argb.Length != 4)          return false;
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetColor,The following statement contains a magic number: if (   Int32.TryParse(argb[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out alpha)            && Int32.TryParse(argb[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out red)            && Int32.TryParse(argb[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out green)            && Int32.TryParse(argb[3]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out blue))        {          value = Color.FromArgb(alpha' red' green' blue);          return true;        }
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetColor,The following statement contains a magic number: if (   Int32.TryParse(argb[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out alpha)            && Int32.TryParse(argb[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out red)            && Int32.TryParse(argb[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out green)            && Int32.TryParse(argb[3]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out blue))        {          value = Color.FromArgb(alpha' red' green' blue);          return true;        }
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetPoint3d,The following statement contains a magic number: if (point.Length != 3)          return false;
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetPoint3d,The following statement contains a magic number: if (   double.TryParse(point[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out x)            && double.TryParse(point[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out y)            && double.TryParse(point[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out z))        {          value = new Point3d(x' y' z);          return true;        }
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetSize,The following statement contains a magic number: if (size.Length != 2)          return false;
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetRectangle,The following statement contains a magic number: if (rect.Length != 4)          return false;
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetRectangle,The following statement contains a magic number: if (   int.TryParse(rect[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out x)            && int.TryParse(rect[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out y)            && int.TryParse(rect[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out width)            && int.TryParse(rect[3]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out height))        {          value = new System.Drawing.Rectangle(x' y' width' height);          return true;        }
Magic Number,Rhino,SettingValue,C:\repos\mcneel_rhinocommon\dotnet\rhino\rhinosdkuiprofilecontext.cs,TryGetRectangle,The following statement contains a magic number: if (   int.TryParse(rect[0]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out x)            && int.TryParse(rect[1]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out y)            && int.TryParse(rect[2]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out width)            && int.TryParse(rect[3]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat' out height))        {          value = new System.Drawing.Rectangle(x' y' width' height);          return true;        }
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: Point3d[] corners = new Point3d[8];
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: corners[2] = PointAt(1' 1' 0);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: corners[3] = PointAt(0' 1' 0);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: corners[4] = PointAt(0' 0' 1);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: corners[5] = PointAt(1' 0' 1);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: corners[6] = PointAt(1' 1' 1);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,GetCorners,The following statement contains a magic number: corners[7] = PointAt(0' 1' 1);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x0 = 0.25 * (P[0].m_x + P[3].m_x + P[4].m_x + P[7].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x0 = 0.25 * (P[0].m_x + P[3].m_x + P[4].m_x + P[7].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x0 = 0.25 * (P[0].m_x + P[3].m_x + P[4].m_x + P[7].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x0 = 0.25 * (P[0].m_x + P[3].m_x + P[4].m_x + P[7].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x1 = 0.25 * (P[1].m_x + P[2].m_x + P[5].m_x + P[6].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x1 = 0.25 * (P[1].m_x + P[2].m_x + P[5].m_x + P[6].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x1 = 0.25 * (P[1].m_x + P[2].m_x + P[5].m_x + P[6].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double x1 = 0.25 * (P[1].m_x + P[2].m_x + P[5].m_x + P[6].m_x);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y0 = 0.25 * (P[0].m_y + P[1].m_y + P[4].m_y + P[5].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y0 = 0.25 * (P[0].m_y + P[1].m_y + P[4].m_y + P[5].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y0 = 0.25 * (P[0].m_y + P[1].m_y + P[4].m_y + P[5].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y1 = 0.25 * (P[2].m_y + P[3].m_y + P[6].m_y + P[7].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y1 = 0.25 * (P[2].m_y + P[3].m_y + P[6].m_y + P[7].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y1 = 0.25 * (P[2].m_y + P[3].m_y + P[6].m_y + P[7].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y1 = 0.25 * (P[2].m_y + P[3].m_y + P[6].m_y + P[7].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double y1 = 0.25 * (P[2].m_y + P[3].m_y + P[6].m_y + P[7].m_y);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z0 = 0.25 * (P[0].m_z + P[1].m_z + P[2].m_z + P[3].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z0 = 0.25 * (P[0].m_z + P[1].m_z + P[2].m_z + P[3].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z0 = 0.25 * (P[0].m_z + P[1].m_z + P[2].m_z + P[3].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z1 = 0.25 * (P[4].m_z + P[5].m_z + P[6].m_z + P[7].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z1 = 0.25 * (P[4].m_z + P[5].m_z + P[6].m_z + P[7].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z1 = 0.25 * (P[4].m_z + P[5].m_z + P[6].m_z + P[7].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z1 = 0.25 * (P[4].m_z + P[5].m_z + P[6].m_z + P[7].m_z);
Magic Number,Rhino.Geometry,Box,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_box.cs,Transform,The following statement contains a magic number: double z1 = 0.25 * (P[4].m_z + P[5].m_z + P[6].m_z + P[7].m_z);
Magic Number,Rhino.Geometry,Brep,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,CreateFromBox,The following statement contains a magic number: Point3d[] box_corners = new Point3d[8];
Magic Number,Rhino.Geometry,Brep,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,CreateFromBox,The following statement contains a magic number: foreach (Point3d p in corners)        {          box_corners[i] = p;          i++;          if (8 == i) { break; }        }
Magic Number,Rhino.Geometry,Brep,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,CreateFromBox,The following statement contains a magic number: if (i < 8) { return null; }
Magic Number,Rhino.Geometry,Matrix,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_matrix.cs,Matrix,The following statement contains a magic number: m_rows = 4;
Magic Number,Rhino.Geometry,Matrix,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_matrix.cs,Matrix,The following statement contains a magic number: m_columns = 4;
Magic Number,Rhino.Geometry,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The following statement contains a magic number: for (var i = 0; i < count; i++)        {          double u' v' w;          var success = TryGetAt(i' out u' out v' out w);          if (success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z))            return i;        }
Magic Number,Rhino.Geometry,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The following statement contains a magic number: for (var i = 0; i < count; i++)        {          double u' v' w;          var success = TryGetAt(i' out u' out v' out w);          if (success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z))            return i;        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToFloatArray,The following statement contains a magic number: float[] rc = new float[count * 3];
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToFloatArray,The following statement contains a magic number: float[] rc = new float[count * 3];
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: int[] orientation = new int[4];
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: if (c == d)        {          sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1 };          return new int[] { a' b' c };        }
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: int[] orientation = new int[4];
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: if (c == d)        {          sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1 };          return new int[] { a' b' c };        }
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Geometry,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetTopologicalVertices,The following statement contains a magic number: int[] v = new int[4];
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetTopologicalVertices,The following statement contains a magic number: int[] v = new int[4];
Magic Number,Rhino.Geometry,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The following statement contains a magic number: if (dimension < 1 || order0 < 2 || order1 < 2 || controlPointCount0 < order0 || controlPointCount1 < order1)          return null;
Magic Number,Rhino.Geometry,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The following statement contains a magic number: if (dimension < 1 || order0 < 2 || order1 < 2 || controlPointCount0 < order0 || controlPointCount1 < order1)          return null;
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,IsClosedWithinTolerance,The following statement contains a magic number: if (m_size <= 2) { return false; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,IsClosedWithinTolerance,The following statement contains a magic number: if (tolerance <= 0.0)        {          int rc = UnsafeNativeMethods.ONC_ComparePoint(3' false' First' Last);          return (rc == 0);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,TangentAt,The following statement contains a magic number: if (count < 2) { return Vector3d.Zero; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,TangentAt,The following statement contains a magic number: if (segment_index < 0)        {          segment_index = 0;        }        else if (segment_index > count - 2)        {          segment_index = count - 2;        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,TangentAt,The following statement contains a magic number: if (segment_index < 0)        {          segment_index = 0;        }        else if (segment_index > count - 2)        {          segment_index = count - 2;        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,ClosestParameter,The following statement contains a magic number: if (count < 2) { return 0.0; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,ClosestParameter,The following statement contains a magic number: for (int i = 0; i < count - 1; i++)        {          Line seg = new Line(this[i]' this[i + 1]);          double d;          double t;            if (seg.Direction.IsTiny(1e-32))          {            t = 0.0;            d = this[i].DistanceTo(testPoint);          }          else          {            t = seg.ClosestParameter(testPoint);            if (t <= 0.0) { t = 0.0; }            else if (t > 1.0) { t = 1.0; }            d = seg.PointAt(t).DistanceTo(testPoint);          }            if (d < d_min)          {            d_min = d;            t_min = t;            s_min = i;          }        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,GetSegments,The following statement contains a magic number: if (m_size < 2) { return null; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,ToNurbsCurve,The following statement contains a magic number: if (m_size < 2) { return null; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,DeleteShortSegments,The following statement contains a magic number: if (count < 3) { return 0; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,DeleteShortSegments,The following statement contains a magic number: for (int i = count - 2; i > 0; i--)        {          if (map[i])          {            if (m_items[i].DistanceTo(m_items[count - 1]) <= tolerance)            {              // Point is too close to the end of the polyline' disable it.              map[i] = false;            }            else            {              // Point is further than tolerance from the end of the polyline'               // we can safely exhale.              break;            }          }        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,CollapseShortSegments,The following statement contains a magic number: if (m_size < 3) { return 0; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,CollapseShortSegments,The following statement contains a magic number: while (true)        {          // Abort if we've collapsed all but the last segment.          if (L.Count < 2) { break; }            // Find the shortest segment and abort if it is longer than tolerance.          int index = Collapse_ShortestEdgeIndex(L);          if (L[index] > tolerance) { break; }            // Collapse the shortest segment.          Collapse_CollapseSegment(index' L' P);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Collapse_ShortestEdgeIndex,The following statement contains a magic number: if (L.Count < 2) { return L.Count - 1; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Collapse_CollapseSegment,The following statement contains a magic number: if (segment_index == 0)        {          // Collapse first segment          P.RemoveAt(1);          L.RemoveAt(0);          L[0] = P[0].DistanceTo(P[1]);        }        else if (segment_index == L.Count - 1)        {          // Collapse last segment          P.RemoveAt(P.Count - 2);          L.RemoveAt(L.Count - 1);          L[L.Count - 1] = P[P.Count - 1].DistanceTo(P[P.Count - 2]);        }        else        {          // Collapse interior segment          Point3d A = P[segment_index];          Point3d B = P[segment_index + 1];          Point3d M = new Point3d(0.5 * (A.m_x + B.m_x)'                                  0.5 * (A.m_y + B.m_y)'                                  0.5 * (A.m_z + B.m_z));            P[segment_index] = M;          P.RemoveAt(segment_index + 1);          L.RemoveAt(segment_index);          L[segment_index - 1] = P[segment_index].DistanceTo(P[segment_index - 1]);          L[segment_index + 0] = P[segment_index].DistanceTo(P[segment_index + 1]);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Collapse_CollapseSegment,The following statement contains a magic number: if (segment_index == 0)        {          // Collapse first segment          P.RemoveAt(1);          L.RemoveAt(0);          L[0] = P[0].DistanceTo(P[1]);        }        else if (segment_index == L.Count - 1)        {          // Collapse last segment          P.RemoveAt(P.Count - 2);          L.RemoveAt(L.Count - 1);          L[L.Count - 1] = P[P.Count - 1].DistanceTo(P[P.Count - 2]);        }        else        {          // Collapse interior segment          Point3d A = P[segment_index];          Point3d B = P[segment_index + 1];          Point3d M = new Point3d(0.5 * (A.m_x + B.m_x)'                                  0.5 * (A.m_y + B.m_y)'                                  0.5 * (A.m_z + B.m_z));            P[segment_index] = M;          P.RemoveAt(segment_index + 1);          L.RemoveAt(segment_index);          L[segment_index - 1] = P[segment_index].DistanceTo(P[segment_index - 1]);          L[segment_index + 0] = P[segment_index].DistanceTo(P[segment_index + 1]);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Collapse_CollapseSegment,The following statement contains a magic number: if (segment_index == 0)        {          // Collapse first segment          P.RemoveAt(1);          L.RemoveAt(0);          L[0] = P[0].DistanceTo(P[1]);        }        else if (segment_index == L.Count - 1)        {          // Collapse last segment          P.RemoveAt(P.Count - 2);          L.RemoveAt(L.Count - 1);          L[L.Count - 1] = P[P.Count - 1].DistanceTo(P[P.Count - 2]);        }        else        {          // Collapse interior segment          Point3d A = P[segment_index];          Point3d B = P[segment_index + 1];          Point3d M = new Point3d(0.5 * (A.m_x + B.m_x)'                                  0.5 * (A.m_y + B.m_y)'                                  0.5 * (A.m_z + B.m_z));            P[segment_index] = M;          P.RemoveAt(segment_index + 1);          L.RemoveAt(segment_index);          L[segment_index - 1] = P[segment_index].DistanceTo(P[segment_index - 1]);          L[segment_index + 0] = P[segment_index].DistanceTo(P[segment_index + 1]);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Collapse_CollapseSegment,The following statement contains a magic number: if (segment_index == 0)        {          // Collapse first segment          P.RemoveAt(1);          L.RemoveAt(0);          L[0] = P[0].DistanceTo(P[1]);        }        else if (segment_index == L.Count - 1)        {          // Collapse last segment          P.RemoveAt(P.Count - 2);          L.RemoveAt(L.Count - 1);          L[L.Count - 1] = P[P.Count - 1].DistanceTo(P[P.Count - 2]);        }        else        {          // Collapse interior segment          Point3d A = P[segment_index];          Point3d B = P[segment_index + 1];          Point3d M = new Point3d(0.5 * (A.m_x + B.m_x)'                                  0.5 * (A.m_y + B.m_y)'                                  0.5 * (A.m_z + B.m_z));            P[segment_index] = M;          P.RemoveAt(segment_index + 1);          L.RemoveAt(segment_index);          L[segment_index - 1] = P[segment_index].DistanceTo(P[segment_index - 1]);          L[segment_index + 0] = P[segment_index].DistanceTo(P[segment_index + 1]);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Collapse_CollapseSegment,The following statement contains a magic number: if (segment_index == 0)        {          // Collapse first segment          P.RemoveAt(1);          L.RemoveAt(0);          L[0] = P[0].DistanceTo(P[1]);        }        else if (segment_index == L.Count - 1)        {          // Collapse last segment          P.RemoveAt(P.Count - 2);          L.RemoveAt(L.Count - 1);          L[L.Count - 1] = P[P.Count - 1].DistanceTo(P[P.Count - 2]);        }        else        {          // Collapse interior segment          Point3d A = P[segment_index];          Point3d B = P[segment_index + 1];          Point3d M = new Point3d(0.5 * (A.m_x + B.m_x)'                                  0.5 * (A.m_y + B.m_y)'                                  0.5 * (A.m_z + B.m_z));            P[segment_index] = M;          P.RemoveAt(segment_index + 1);          L.RemoveAt(segment_index);          L[segment_index - 1] = P[segment_index].DistanceTo(P[segment_index - 1]);          L[segment_index + 0] = P[segment_index].DistanceTo(P[segment_index + 1]);        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,ReduceSegments,The following statement contains a magic number: if (m_size < 3) { return 0; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,ReduceSegments,The following statement contains a magic number: if (m_size < 5 && IsClosed) { return 0; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,ReduceSegments,The following statement contains a magic number: if (N < 2)        {          Clear();          return vertex_map.Length;        }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Smooth,The following statement contains a magic number: if (count < 3) { return false; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Smooth,The following statement contains a magic number: amount *= 0.5;
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Smooth,The following statement contains a magic number: double x = 0.5 * (v0.m_x + v2.m_x);
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Smooth,The following statement contains a magic number: double y = 0.5 * (v0.m_y + v2.m_y);
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,Smooth,The following statement contains a magic number: double z = 0.5 * (v0.m_z + v2.m_z);
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,BreakAtAngles,The following statement contains a magic number: if (count <= 2) { return new Polyline[] { new Polyline(this) }; }
Magic Number,Rhino.Geometry,Polyline,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_polyline.cs,CenterPoint,The following statement contains a magic number: for (int i = 0; i < (Count - 1); i++)        {          Point3d A = this[i];          Point3d B = this[i + 1];          double d = A.DistanceTo(B);          center += d * 0.5 * (A + B);          weight += d;        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: Rhino.Collections.Point3dList pts = new Rhino.Collections.Point3dList(5);
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: foreach (Point3d pt in polyline)        {          pts.Add(pt);          if (pts.Count > 5) { return Rectangle3d.Unset; }        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: if (pts.Count < 4) { return Rectangle3d.Unset; }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: if (pts.Count == 5) { pts.RemoveAt(4); }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: if (pts.Count == 5) { pts.RemoveAt(4); }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: Vector3d DC = pts[2] - pts[3];
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: Vector3d DC = pts[2] - pts[3];
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: Vector3d AD = pts[3] - pts[0];
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: Vector3d BC = pts[2] - pts[1];
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: rc.m_x = new Interval(0' 0.5 * (AB.Length + DC.Length));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,CreateFromPolyline,The following statement contains a magic number: rc.m_y = new Interval(0' 0.5 * (AD.Length + BC.Length));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ComputeDeviation,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          dev = Math.Min(dev' rec.Corner(i).DistanceTo(pts[i]));        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ComputeDeviation,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int j = (i == 3) ? 0 : i + 1;          Vector3d re = rec.Corner(i) - rec.Corner(j);          Vector3d pe = pts[i] - pts[j];          double ad = Vector3d.VectorAngle(re' pe);          if (RhinoMath.IsValidDouble(ad)) { angdev = Math.Min(angdev' ad); }        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ComputeDeviation,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int j = (i == 3) ? 0 : i + 1;          Vector3d re = rec.Corner(i) - rec.Corner(j);          Vector3d pe = pts[i] - pts[j];          double ad = Vector3d.VectorAngle(re' pe);          if (RhinoMath.IsValidDouble(ad)) { angdev = Math.Min(angdev' ad); }        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Corner,The following statement contains a magic number: switch (index)        {          case 0: return m_plane.PointAt(m_x.T0' m_y.T0);          case 1: return m_plane.PointAt(m_x.T1' m_y.T0);          case 2: return m_plane.PointAt(m_x.T1' m_y.T1);          case 3: return m_plane.PointAt(m_x.T0' m_y.T1);          default:            throw new IndexOutOfRangeException("Rectangle corner index must be between and including 0 and 3");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Corner,The following statement contains a magic number: switch (index)        {          case 0: return m_plane.PointAt(m_x.T0' m_y.T0);          case 1: return m_plane.PointAt(m_x.T1' m_y.T0);          case 2: return m_plane.PointAt(m_x.T1' m_y.T1);          case 3: return m_plane.PointAt(m_x.T0' m_y.T1);          default:            throw new IndexOutOfRangeException("Rectangle corner index must be between and including 0 and 3");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: if (segment < 0)        {          segment = 0;          remainder = 0;        }        else if (segment >= 4)        {          segment = 3;          remainder = 1.0;        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: if (segment < 0)        {          segment = 0;          remainder = 0;        }        else if (segment >= 4)        {          segment = 3;          remainder = 1.0;        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: switch (segment)        {          case 0: return new Line(Corner(0)' Corner(1)).PointAt(remainder);          case 1: return new Line(Corner(1)' Corner(2)).PointAt(remainder);          case 2: return new Line(Corner(2)' Corner(3)).PointAt(remainder);          case 3: return new Line(Corner(3)' Corner(0)).PointAt(remainder);          default:            throw new IndexOutOfRangeException("Rectangle boundary parameter out of range");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: switch (segment)        {          case 0: return new Line(Corner(0)' Corner(1)).PointAt(remainder);          case 1: return new Line(Corner(1)' Corner(2)).PointAt(remainder);          case 2: return new Line(Corner(2)' Corner(3)).PointAt(remainder);          case 3: return new Line(Corner(3)' Corner(0)).PointAt(remainder);          default:            throw new IndexOutOfRangeException("Rectangle boundary parameter out of range");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: switch (segment)        {          case 0: return new Line(Corner(0)' Corner(1)).PointAt(remainder);          case 1: return new Line(Corner(1)' Corner(2)).PointAt(remainder);          case 2: return new Line(Corner(2)' Corner(3)).PointAt(remainder);          case 3: return new Line(Corner(3)' Corner(0)).PointAt(remainder);          default:            throw new IndexOutOfRangeException("Rectangle boundary parameter out of range");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: switch (segment)        {          case 0: return new Line(Corner(0)' Corner(1)).PointAt(remainder);          case 1: return new Line(Corner(1)' Corner(2)).PointAt(remainder);          case 2: return new Line(Corner(2)' Corner(3)).PointAt(remainder);          case 3: return new Line(Corner(3)' Corner(0)).PointAt(remainder);          default:            throw new IndexOutOfRangeException("Rectangle boundary parameter out of range");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: switch (segment)        {          case 0: return new Line(Corner(0)' Corner(1)).PointAt(remainder);          case 1: return new Line(Corner(1)' Corner(2)).PointAt(remainder);          case 2: return new Line(Corner(2)' Corner(3)).PointAt(remainder);          case 3: return new Line(Corner(3)' Corner(0)).PointAt(remainder);          default:            throw new IndexOutOfRangeException("Rectangle boundary parameter out of range");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,PointAt,The following statement contains a magic number: switch (segment)        {          case 0: return new Line(Corner(0)' Corner(1)).PointAt(remainder);          case 1: return new Line(Corner(1)' Corner(2)).PointAt(remainder);          case 2: return new Line(Corner(2)' Corner(3)).PointAt(remainder);          case 3: return new Line(Corner(3)' Corner(0)).PointAt(remainder);          default:            throw new IndexOutOfRangeException("Rectangle boundary parameter out of range");        }
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Transform,The following statement contains a magic number: Point3d p2 = Corner(2);
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Transform,The following statement contains a magic number: Point3d p3 = Corner(3);
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Transform,The following statement contains a magic number: m_x = new Interval(0.5 * (s0 + s3)' 0.5 * (s1 + s2));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Transform,The following statement contains a magic number: m_x = new Interval(0.5 * (s0 + s3)' 0.5 * (s1 + s2));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Transform,The following statement contains a magic number: m_y = new Interval(0.5 * (t0 + t1)' 0.5 * (t2 + t3));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,Transform,The following statement contains a magic number: m_y = new Interval(0.5 * (t0 + t1)' 0.5 * (t2 + t3));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ToPolyline,The following statement contains a magic number: Polyline rc = new Polyline(5);
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ToPolyline,The following statement contains a magic number: rc.Add(Corner(2));
Magic Number,Rhino.Geometry,Rectangle3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_rectangle.cs,ToPolyline,The following statement contains a magic number: rc.Add(Corner(3));
Magic Number,Rhino.Geometry,RevSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_revsurface.cs,Create,The following statement contains a magic number: return Create(revoluteCurve' axisOfRevolution' 0' 2.0 * Math.PI);
Magic Number,Rhino.Geometry,RevSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_revsurface.cs,Create,The following statement contains a magic number: return Create(revoluteLine' axisOfRevolution' 0' 2.0 * Math.PI);
Magic Number,Rhino.Geometry,RevSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_revsurface.cs,Create,The following statement contains a magic number: return Create(revolutePolyline' axisOfRevolution' 0' 2.0 * Math.PI);
Magic Number,Rhino.Geometry,SurfaceCurvature,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,OsculatingCircle,The following statement contains a magic number: if (Math.Abs(Kappa(direction)) < 1e-16 || Math.Abs(Kappa(direction)) > 1e16)        {          return Circle.Unset;        }
Magic Number,Rhino.Geometry,SurfaceCurvature,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,OsculatingCircle,The following statement contains a magic number: if (Math.Abs(Kappa(direction)) < 1e-16 || Math.Abs(Kappa(direction)) > 1e16)        {          return Circle.Unset;        }
Magic Number,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,Evaluate,The following statement contains a magic number: const int stride = 3;
Magic Number,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,Evaluate,The following statement contains a magic number: int count = (numberDerivatives + 1) * (numberDerivatives + 2) / 2;
Magic Number,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,Evaluate,The following statement contains a magic number: int count = (numberDerivatives + 1) * (numberDerivatives + 2) / 2;
Magic Number,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,Evaluate,The following statement contains a magic number: if (rc)        {          point = new Point3d(der_array[0]' der_array[1]' der_array[2]);          if (count > 1)          {            derivatives = new Vector3d[count - 1];            for (int i = 1; i < count; i++)            {              int index = i * stride;              derivatives[i - 1] = new Vector3d(der_array[index]' der_array[index + 1]' der_array[index + 2]);            }          }        }
Magic Number,Rhino.Geometry,Surface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_surface.cs,Evaluate,The following statement contains a magic number: if (rc)        {          point = new Point3d(der_array[0]' der_array[1]' der_array[2]);          if (count > 1)          {            derivatives = new Vector3d[count - 1];            for (int i = 1; i < count; i++)            {              int index = i * stride;              derivatives[i - 1] = new Vector3d(der_array[index]' der_array[index + 1]' der_array[index + 2]);            }          }        }
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateNearestNeighbour,The following statement contains a magic number: if (param >= 0.5) { idx = MapIndex(idx + 1); }
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCosine,The following statement contains a magic number: param = 0.5 * (1.0 - Math.Cos(param * Math.PI));
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a0 = -0.5 * m_items[idx0] + 1.5 * m_items[idx1] - 1.5 * m_items[idx2] + 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a0 = -0.5 * m_items[idx0] + 1.5 * m_items[idx1] - 1.5 * m_items[idx2] + 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a0 = -0.5 * m_items[idx0] + 1.5 * m_items[idx1] - 1.5 * m_items[idx2] + 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a0 = -0.5 * m_items[idx0] + 1.5 * m_items[idx1] - 1.5 * m_items[idx2] + 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a1 = m_items[idx0] - 2.5 * m_items[idx1] + 2 * m_items[idx2] - 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a1 = m_items[idx0] - 2.5 * m_items[idx1] + 2 * m_items[idx2] - 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a1 = m_items[idx0] - 2.5 * m_items[idx1] + 2 * m_items[idx2] - 0.5 * m_items[idx3];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a2 = -0.5 * m_items[idx0] + 0.5 * m_items[idx2];
Magic Number,Rhino.Geometry,Interpolator,C:\repos\mcneel_rhinocommon\dotnet\rhino\Interpolator.cs,InterpolateCatmullRom,The following statement contains a magic number: double a2 = -0.5 * m_items[idx0] + 0.5 * m_items[idx2];
Magic Number,Rhino.Geometry,Arc,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_arc.cs,Arc,The following statement contains a magic number: if (vectorAB.IsParallelTo(tangentA' 1e-6) != 0) { this = Invalid; return; }
Magic Number,Rhino.Geometry,Arc,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_arc.cs,Arc,The following statement contains a magic number: vectorBS *= (0.5 * (pointA.DistanceTo(pointB))) / (vectorBS * tangentA);
Magic Number,Rhino.Geometry,Arc,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_arc.cs,Trim,The following statement contains a magic number: if (domain[0] < domain[1]          && domain[1] - domain[0] <= 2.0 * Math.PI + RhinoMath.ZeroTolerance)        {          m_angle = domain;          if (m_angle.Length > 2.0 * Math.PI) m_angle[1] = m_angle[0] + 2.0 * Math.PI;          rc = true;        }
Magic Number,Rhino.Geometry,Arc,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_arc.cs,Trim,The following statement contains a magic number: if (domain[0] < domain[1]          && domain[1] - domain[0] <= 2.0 * Math.PI + RhinoMath.ZeroTolerance)        {          m_angle = domain;          if (m_angle.Length > 2.0 * Math.PI) m_angle[1] = m_angle[0] + 2.0 * Math.PI;          rc = true;        }
Magic Number,Rhino.Geometry,Arc,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_arc.cs,Trim,The following statement contains a magic number: if (domain[0] < domain[1]          && domain[1] - domain[0] <= 2.0 * Math.PI + RhinoMath.ZeroTolerance)        {          m_angle = domain;          if (m_angle.Length > 2.0 * Math.PI) m_angle[1] = m_angle[0] + 2.0 * Math.PI;          rc = true;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: System.Collections.Generic.List<Plane> faces = new System.Collections.Generic.List<Plane>(6);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_y != m_max.m_y)        {          // Bottom and Top faces          faces.Add(new Plane(C[0]' C[1]' C[3]));          faces.Add(new Plane(C[4]' C[5]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_y != m_max.m_y)        {          // Bottom and Top faces          faces.Add(new Plane(C[0]' C[1]' C[3]));          faces.Add(new Plane(C[4]' C[5]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_y != m_max.m_y)        {          // Bottom and Top faces          faces.Add(new Plane(C[0]' C[1]' C[3]));          faces.Add(new Plane(C[4]' C[5]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_y != m_max.m_y)        {          // Bottom and Top faces          faces.Add(new Plane(C[0]' C[1]' C[3]));          faces.Add(new Plane(C[4]' C[5]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_z != m_max.m_z)        {          // Front and Back faces          faces.Add(new Plane(C[0]' C[1]' C[4]));          faces.Add(new Plane(C[3]' C[2]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_z != m_max.m_z)        {          // Front and Back faces          faces.Add(new Plane(C[0]' C[1]' C[4]));          faces.Add(new Plane(C[3]' C[2]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_z != m_max.m_z)        {          // Front and Back faces          faces.Add(new Plane(C[0]' C[1]' C[4]));          faces.Add(new Plane(C[3]' C[2]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_x != m_max.m_x && m_min.m_z != m_max.m_z)        {          // Front and Back faces          faces.Add(new Plane(C[0]' C[1]' C[4]));          faces.Add(new Plane(C[3]' C[2]' C[7]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_y != m_max.m_y && m_min.m_z != m_max.m_z)        {          // Left and Right faces          faces.Add(new Plane(C[0]' C[3]' C[4]));          faces.Add(new Plane(C[1]' C[2]' C[5]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_y != m_max.m_y && m_min.m_z != m_max.m_z)        {          // Left and Right faces          faces.Add(new Plane(C[0]' C[3]' C[4]));          faces.Add(new Plane(C[1]' C[2]' C[5]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_y != m_max.m_y && m_min.m_z != m_max.m_z)        {          // Left and Right faces          faces.Add(new Plane(C[0]' C[3]' C[4]));          faces.Add(new Plane(C[1]' C[2]' C[5]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,ClosestPoint,The following statement contains a magic number: if (m_min.m_y != m_max.m_y && m_min.m_z != m_max.m_z)        {          // Left and Right faces          faces.Add(new Plane(C[0]' C[3]' C[4]));          faces.Add(new Plane(C[1]' C[2]' C[5]));        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,FurthestPoint,The following statement contains a magic number: double xm = 0.5 * (x0 + x1);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,FurthestPoint,The following statement contains a magic number: double ym = 0.5 * (y0 + y1);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,FurthestPoint,The following statement contains a magic number: double zm = 0.5 * (z0 + z1);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,IsDegenerate,The following statement contains a magic number: if (diag.X < 0.0)          return 4;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,IsDegenerate,The following statement contains a magic number: if (diag.Y < 0.0)          return 4;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,IsDegenerate,The following statement contains a magic number: if (diag.Z < 0.0)          return 4;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: Point3d[] corners = new Point3d[8];
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: corners[2] = new Point3d(m_max.m_x' m_max.m_y' m_min.m_z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: corners[3] = new Point3d(m_min.m_x' m_max.m_y' m_min.m_z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: corners[4] = new Point3d(m_min.m_x' m_min.m_y' m_max.m_z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: corners[5] = new Point3d(m_max.m_x' m_min.m_y' m_max.m_z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: corners[6] = new Point3d(m_max.m_x' m_max.m_y' m_max.m_z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetCorners,The following statement contains a magic number: corners[7] = new Point3d(m_min.m_x' m_max.m_y' m_max.m_z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: Line[] edges = new Line[12];
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: edges[2].From = edges[1].To;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: edges[2].To = new Point3d(minPt.X' maxPt.Y' minPt.Z);
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: edges[3].From = edges[2].To;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: edges[3].From = edges[2].To;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: edges[3].To = minPt;
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,BoundingBox,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_bounding_box.cs,GetEdges,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          edges[i + 4] = edges[i];          edges[i + 4].FromZ = maxPt.Z;          edges[i + 4].ToZ = maxPt.Z;            edges[i + 8].From = edges[i].From;          edges[i + 8].To = edges[i + 8].From;          edges[i + 8].ToZ = maxPt.Z;        }
Magic Number,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,DerivativeAt,The following statement contains a magic number: switch (Math.Abs(derivative) % 4)        {          case 0:            r0 *= Math.Cos(t);            r1 *= Math.Sin(t);            break;          case 1:            r0 *= -Math.Sin(t);            r1 *= Math.Cos(t);            break;          case 2:            r0 *= -Math.Cos(t);            r1 *= -Math.Sin(t);            break;          case 3:            r0 *= Math.Sin(t);            r1 *= -Math.Cos(t);            break;        }
Magic Number,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,DerivativeAt,The following statement contains a magic number: switch (Math.Abs(derivative) % 4)        {          case 0:            r0 *= Math.Cos(t);            r1 *= Math.Sin(t);            break;          case 1:            r0 *= -Math.Sin(t);            r1 *= Math.Cos(t);            break;          case 2:            r0 *= -Math.Cos(t);            r1 *= -Math.Sin(t);            break;          case 3:            r0 *= Math.Sin(t);            r1 *= -Math.Cos(t);            break;        }
Magic Number,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,DerivativeAt,The following statement contains a magic number: switch (Math.Abs(derivative) % 4)        {          case 0:            r0 *= Math.Cos(t);            r1 *= Math.Sin(t);            break;          case 1:            r0 *= -Math.Sin(t);            r1 *= Math.Cos(t);            break;          case 2:            r0 *= -Math.Cos(t);            r1 *= -Math.Sin(t);            break;          case 3:            r0 *= Math.Sin(t);            r1 *= -Math.Cos(t);            break;        }
Magic Number,Rhino.Geometry,Cone,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_cone.cs,AngleInDegrees,The following statement contains a magic number: return 180.0 * AngleInRadians() / Math.PI;
Magic Number,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,CreateControlPointCurve,The following statement contains a magic number: if (null == ptArray || count < 2)          return null;
Magic Number,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,CreateControlPointCurve,The following statement contains a magic number: if (2 == count)          return new LineCurve(ptArray[0]' ptArray[1]);
Magic Number,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,CreateControlPointCurve,The following statement contains a magic number: if (1 == degree && count > 2)          return PolylineCurve.FromArray(ptArray);
Magic Number,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,CreateControlPointCurve,The following statement contains a magic number: return CreateControlPointCurve(points' 3);
Magic Number,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,IsClosable,The following statement contains a magic number: return IsClosable(tolerance' 0.0' 10.0);
Magic Number,Rhino.Geometry,Curve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_curve.cs,Split,The following statement contains a magic number: Curve[] output = new Curve[2];
Magic Number,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,CreateFromLine,The following statement contains a magic number: NurbsCurve crv = new NurbsCurve(3' false' 2' 2);
Magic Number,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,CreateFromLine,The following statement contains a magic number: NurbsCurve crv = new NurbsCurve(3' false' 2' 2);
Magic Number,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,CreateFromLine,The following statement contains a magic number: NurbsCurve crv = new NurbsCurve(3' false' 2' 2);
Magic Number,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The following statement contains a magic number: const int dimension = 3;
Magic Number,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The following statement contains a magic number: if (null == point_array || count < 2)          return null;
Magic Number,Rhino.Geometry,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,NurbsCurve,The following statement contains a magic number: Create(3' false' degree + 1' pointCount);
Magic Number,Rhino.Geometry,Plane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_plane.cs,GetPlaneEquation,The following statement contains a magic number: double[] rc = new double[4];
Magic Number,Rhino.Geometry,Plane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_plane.cs,ValueAt,The following statement contains a magic number: return (pe[0]*p.X + pe[1]*p.Y + pe[2]*p.Z + pe[3]);
Magic Number,Rhino.Geometry,Plane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_plane.cs,ValueAt,The following statement contains a magic number: return (pe[0]*p.X + pe[1]*p.Y + pe[2]*p.Z + pe[3]);
Magic Number,Rhino.Geometry,Vector3f,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_fpoint.cs,GetLengthHelper,The following statement contains a magic number: const float ON_SINGLE_MIN = (float)2.2250738585072014e-308;
Magic Number,Rhino.Geometry,Quaternion,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_quaternion.cs,SetRotation,The following statement contains a magic number: s = (s > 0.0) ? Math.Sin(0.5*angle)/s : 0.0;
Magic Number,Rhino.Geometry,Quaternion,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_quaternion.cs,SetRotation,The following statement contains a magic number: m_a = Math.Cos(0.5*angle);
Magic Number,Rhino.Geometry,Quaternion,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_quaternion.cs,Rotation,The following statement contains a magic number: s = (s > 0.0) ? Math.Sin(0.5*angle)/s : 0.0;
Magic Number,Rhino.Geometry,Quaternion,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_quaternion.cs,Rotation,The following statement contains a magic number: return new Quaternion(Math.Cos(0.5*angle)'s*axisOfRotation.m_x's*axisOfRotation.m_y's*axisOfRotation.m_z);
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,LatitudeRadians,The following statement contains a magic number: Point3d p2 = PointAt(0.5 * Math.PI' radians);
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if ((Math.Abs(u) < 1e-64) && (Math.Abs(v) < 1e-64))        {          if (dist >= 0)          { latitudeRadians = 0.5 * Math.PI; }          else          { latitudeRadians = -0.5 * Math.PI; }          return true;        }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if ((Math.Abs(u) < 1e-64) && (Math.Abs(v) < 1e-64))        {          if (dist >= 0)          { latitudeRadians = 0.5 * Math.PI; }          else          { latitudeRadians = -0.5 * Math.PI; }          return true;        }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if ((Math.Abs(u) < 1e-64) && (Math.Abs(v) < 1e-64))        {          if (dist >= 0)          { latitudeRadians = 0.5 * Math.PI; }          else          { latitudeRadians = -0.5 * Math.PI; }          return true;        }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if ((Math.Abs(u) < 1e-64) && (Math.Abs(v) < 1e-64))        {          if (dist >= 0)          { latitudeRadians = 0.5 * Math.PI; }          else          { latitudeRadians = -0.5 * Math.PI; }          return true;        }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if (longitudeRadians < 0.0)        { longitudeRadians = 2.0 * Math.PI + longitudeRadians; }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if (dist > 1e-64)        { latitudeRadians = 0.5 * Math.PI - Vector3d.VectorAngle(m_plane.ZAxis' testPoint - m_plane.Origin); }        else if (dist < -1e-64)        { latitudeRadians = -0.5 * Math.PI + Vector3d.VectorAngle(-m_plane.ZAxis' testPoint - m_plane.Origin); }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if (dist > 1e-64)        { latitudeRadians = 0.5 * Math.PI - Vector3d.VectorAngle(m_plane.ZAxis' testPoint - m_plane.Origin); }        else if (dist < -1e-64)        { latitudeRadians = -0.5 * Math.PI + Vector3d.VectorAngle(-m_plane.ZAxis' testPoint - m_plane.Origin); }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if (dist > 1e-64)        { latitudeRadians = 0.5 * Math.PI - Vector3d.VectorAngle(m_plane.ZAxis' testPoint - m_plane.Origin); }        else if (dist < -1e-64)        { latitudeRadians = -0.5 * Math.PI + Vector3d.VectorAngle(-m_plane.ZAxis' testPoint - m_plane.Origin); }
Magic Number,Rhino.Geometry,Sphere,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_sphere.cs,ClosestParameter,The following statement contains a magic number: if (dist > 1e-64)        { latitudeRadians = 0.5 * Math.PI - Vector3d.VectorAngle(m_plane.ZAxis' testPoint - m_plane.Origin); }        else if (dist < -1e-64)        { latitudeRadians = -0.5 * Math.PI + Vector3d.VectorAngle(-m_plane.ZAxis' testPoint - m_plane.Origin); }
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[0'2] = x0.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[1'2] = y0.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[2'0] = z0.X;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[2'1] = z0.Y;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[2'2] = z0.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[2'2] = z0.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[3'3] = 1.0;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F0[3'3] = 1.0;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[0'2] = z1.X;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[1'2] = z1.Y;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[2'0] = x1.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[2'1] = y1.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[2'2] = z1.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[2'2] = z1.Z;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[3'3] = 1.0;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Rotation,The following statement contains a magic number: F1[3'3] = 1.0;
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Transpose,The following statement contains a magic number: for (int r = 0; r < 4; r++)        {          for (int c = 0; c < 4; c++)          {            rc[r' c] = this[c' r];          }        }
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,Transpose,The following statement contains a magic number: for (int r = 0; r < 4; r++)        {          for (int c = 0; c < 4; c++)          {            rc[r' c] = this[c' r];          }        }
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: var rc = new float[16];
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,ToFloatArray,The following statement contains a magic number: if (rowDominant) {  				rc [0]  = (float)m_00; rc [1]  = (float)m_01; rc [2]  = (float)m_02; rc [3]  = (float)m_03;  				rc [4]  = (float)m_10; rc [5]  = (float)m_11; rc [6]  = (float)m_12; rc [7]  = (float)m_13;  				rc [8]  = (float)m_20; rc [9]  = (float)m_21; rc [10] = (float)m_22; rc [11] = (float)m_23;  				rc [12] = (float)m_30; rc [13] = (float)m_31; rc [14] = (float)m_32; rc [15] = (float)m_33;  			} else {  				rc [0]  = (float)m_00; rc [1]  = (float)m_10; rc [2]  = (float)m_20; rc [3]  = (float)m_30;  				rc [4]  = (float)m_01; rc [5]  = (float)m_11; rc [6]  = (float)m_21; rc [7]  = (float)m_31;  				rc [8]  = (float)m_02; rc [9]  = (float)m_12; rc [10] = (float)m_22; rc [11] = (float)m_32;  				rc [12] = (float)m_03; rc [13] = (float)m_13; rc [14] = (float)m_23; rc [15] = (float)m_33;  			}
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,CompareTo,The following statement contains a magic number: for (int i = 3; i >= 0; i--)        {          for (int j = 3; j >= 0; j--)          {            if (this[i' j] < other[i' j]) return -1;            if (this[i' j] < other[i' j]) return 1;          }        }
Magic Number,Rhino.Geometry,Transform,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_xform.cs,CompareTo,The following statement contains a magic number: for (int i = 3; i >= 0; i--)        {          for (int j = 3; j >= 0; j--)          {            if (this[i' j] < other[i' j]) return -1;            if (this[i' j] < other[i' j]) return 1;          }        }
Magic Number,Rhino.Geometry,Vector3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_point.cs,VectorAngle,The following statement contains a magic number: { // Special case (anti)parallel vectors.          if (Math.Abs(angle) < 1e-64) { return 0.0; }          if (Math.Abs(angle - Math.PI) < 1e-64) { return Math.PI; }        }
Magic Number,Rhino.Geometry,Vector3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_point.cs,VectorAngle,The following statement contains a magic number: { // Special case (anti)parallel vectors.          if (Math.Abs(angle) < 1e-64) { return 0.0; }          if (Math.Abs(angle - Math.PI) < 1e-64) { return Math.PI; }        }
Magic Number,Rhino.Geometry,Vector3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_point.cs,VectorAngle,The following statement contains a magic number: return 2.0 * Math.PI - angle;
Magic Number,Rhino.Geometry,Vector3d,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_point.cs,GetLengthHelper,The following statement contains a magic number: const double ON_DBL_MIN = 2.2250738585072014e-308;
Magic Number,Rhino.Geometry,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToRadians,The following statement contains a magic number: return degrees * PI / 180.0;
Magic Number,Rhino.Geometry,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToDegrees,The following statement contains a magic number: return radians * 180.0 / PI;
Magic Number,Rhino.DocObjects,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_line_count = 70;
Magic Number,Rhino.DocObjects,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_thick_frequency = 5;
Magic Number,Rhino.DocObjects,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: int[] rc = new int[5];
Magic Number,Rhino.DocObjects,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[2] = m_grid_x_color.ToArgb();
Magic Number,Rhino.DocObjects,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[3] = m_grid_y_color.ToArgb();
Magic Number,Rhino.DocObjects,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[4] = m_grid_z_color.ToArgb();
Magic Number,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,DollyExtents,The following statement contains a magic number: if (cameraCoordinateBoundingBox.IsValid)        {          if (border > 1.0 && RhinoMath.IsValidDouble(border))          {            double dx = cameraCoordinateBoundingBox.Max.X - cameraCoordinateBoundingBox.Min.X;            dx *= 0.5 * (border - 1.0);            double dy = cameraCoordinateBoundingBox.Max.Y - cameraCoordinateBoundingBox.Min.Y;            dy *= 0.5 * (border - 1.0);            var pt = cameraCoordinateBoundingBox.Max;            cameraCoordinateBoundingBox.Max = new Point3d(pt.X + dx' pt.Y + dy' pt.Z);            pt = cameraCoordinateBoundingBox.Min;            cameraCoordinateBoundingBox.Min = new Point3d(pt.X - dx' pt.Y - dy' pt.Z);          }          IntPtr ptr_this = NonConstPointer();          rc = UnsafeNativeMethods.ON_Viewport_DollyExtents(ptr_this' cameraCoordinateBoundingBox.Min' cameraCoordinateBoundingBox.Max);        }
Magic Number,Rhino.DocObjects,ViewportInfo,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_viewport.cs,DollyExtents,The following statement contains a magic number: if (cameraCoordinateBoundingBox.IsValid)        {          if (border > 1.0 && RhinoMath.IsValidDouble(border))          {            double dx = cameraCoordinateBoundingBox.Max.X - cameraCoordinateBoundingBox.Min.X;            dx *= 0.5 * (border - 1.0);            double dy = cameraCoordinateBoundingBox.Max.Y - cameraCoordinateBoundingBox.Min.Y;            dy *= 0.5 * (border - 1.0);            var pt = cameraCoordinateBoundingBox.Max;            cameraCoordinateBoundingBox.Max = new Point3d(pt.X + dx' pt.Y + dy' pt.Z);            pt = cameraCoordinateBoundingBox.Min;            cameraCoordinateBoundingBox.Min = new Point3d(pt.X - dx' pt.Y - dy' pt.Z);          }          IntPtr ptr_this = NonConstPointer();          rc = UnsafeNativeMethods.ON_Viewport_DollyExtents(ptr_this' cameraCoordinateBoundingBox.Min' cameraCoordinateBoundingBox.Max);        }
Magic Number,Rhino.Render,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_line_count = 70;
Magic Number,Rhino.Render,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_thick_frequency = 5;
Magic Number,Rhino.Render,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: int[] rc = new int[5];
Magic Number,Rhino.Render,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[2] = m_grid_x_color.ToArgb();
Magic Number,Rhino.Render,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[3] = m_grid_y_color.ToArgb();
Magic Number,Rhino.Render,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[4] = m_grid_z_color.ToArgb();
Magic Number,Rhino.Render,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The following statement contains a magic number: for (var i = 0; i < count; i++)        {          double u' v' w;          var success = TryGetAt(i' out u' out v' out w);          if (success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z))            return i;        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToFloatArray,The following statement contains a magic number: float[] rc = new float[count * 3];
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: int[] orientation = new int[4];
Magic Number,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: if (c == d)        {          sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1 };          return new int[] { a' b' c };        }
Magic Number,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Render,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Render,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Render,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Render,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Render,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetTopologicalVertices,The following statement contains a magic number: int[] v = new int[4];
Magic Number,Rhino.Display,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_line_count = 70;
Magic Number,Rhino.Display,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_thick_frequency = 5;
Magic Number,Rhino.Display,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: int[] rc = new int[5];
Magic Number,Rhino.Display,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[2] = m_grid_x_color.ToArgb();
Magic Number,Rhino.Display,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[3] = m_grid_y_color.ToArgb();
Magic Number,Rhino.Display,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[4] = m_grid_z_color.ToArgb();
Magic Number,Rhino.Display,ColorHSL,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,ToArgbColor,The following statement contains a magic number: byte a = (byte)(255.0 * A);
Magic Number,Rhino.Display,ColorCMYK,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,ColorCMYK,The following statement contains a magic number: m_a = 1.0 - ((double)rgb.A / 255.0);
Magic Number,Rhino.Display,ColorXYZ,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,ColorXYZ,The following statement contains a magic number: m_a = 1.0 - ((double)rgb.A / 255.0);
Magic Number,Rhino.Display,ColorLCH,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,ClipH,The following statement contains a magic number: n = n % 360.0;
Magic Number,Rhino.Display,ColorLCH,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,ClipH,The following statement contains a magic number: if (n < 0) { n += 360.0; }
Magic Number,Rhino.Display,ColorLCH,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,MakePositive,The following statement contains a magic number: if (C < 0)        {          C = Math.Abs(C);          H = (H + 180.0) % 360.0;        }
Magic Number,Rhino.Display,ColorLCH,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,MakePositive,The following statement contains a magic number: if (C < 0)        {          C = Math.Abs(C);          H = (H + 180.0) % 360.0;        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: x *= (0.01 * 95.047);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: x *= (0.01 * 95.047);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: y *= (0.01 * 100.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: y *= (0.01 * 100.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: z *= (0.01 * 108.883);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: z *= (0.01 * 108.883);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vR = x * +3.2406 + y * -1.5372 + z * -0.4986;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vR = x * +3.2406 + y * -1.5372 + z * -0.4986;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vR = x * +3.2406 + y * -1.5372 + z * -0.4986;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vG = x * -0.9689 + y * +1.8758 + z * +0.0415;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vG = x * -0.9689 + y * +1.8758 + z * +0.0415;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vG = x * -0.9689 + y * +1.8758 + z * +0.0415;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vB = x * +0.0557 + y * -0.2040 + z * +1.0570;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vB = x * +0.0557 + y * -0.2040 + z * +1.0570;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: double vB = x * +0.0557 + y * -0.2040 + z * +1.0570;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: r = tobyte(vR * 255.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: g = tobyte(vG * 255.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_RGB,The following statement contains a magic number: b = tobyte(vB * 255.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzrgb_map,The following statement contains a magic number: if (v > 0.0031308)        {          return 1.055 * Math.Pow(v' 1.0 / 2.4) - 0.055;        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzrgb_map,The following statement contains a magic number: if (v > 0.0031308)        {          return 1.055 * Math.Pow(v' 1.0 / 2.4) - 0.055;        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzrgb_map,The following statement contains a magic number: if (v > 0.0031308)        {          return 1.055 * Math.Pow(v' 1.0 / 2.4) - 0.055;        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzrgb_map,The following statement contains a magic number: if (v > 0.0031308)        {          return 1.055 * Math.Pow(v' 1.0 / 2.4) - 0.055;        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzrgb_map,The following statement contains a magic number: return 12.92 * v;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: double vR = (double)r / 255.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: double vG = (double)g / 255.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: double vB = (double)b / 255.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: vR *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: vG *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: vB *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: x = vR * 0.4124 + vG * 0.3576 + vB * 0.1805;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: x = vR * 0.4124 + vG * 0.3576 + vB * 0.1805;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: x = vR * 0.4124 + vG * 0.3576 + vB * 0.1805;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: y = vR * 0.2126 + vG * 0.7152 + vB * 0.0722;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: y = vR * 0.2126 + vG * 0.7152 + vB * 0.0722;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: y = vR * 0.2126 + vG * 0.7152 + vB * 0.0722;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: z = vR * 0.0193 + vG * 0.1192 + vB * 0.9505;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: z = vR * 0.0193 + vG * 0.1192 + vB * 0.9505;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: z = vR * 0.0193 + vG * 0.1192 + vB * 0.9505;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: x *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: y *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_XYZ,The following statement contains a magic number: z *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,rgbxyz_map,The following statement contains a magic number: if (v > 0.04045)        {          return Math.Pow((v + 0.055) / 1.055' 2.4);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,rgbxyz_map,The following statement contains a magic number: if (v > 0.04045)        {          return Math.Pow((v + 0.055) / 1.055' 2.4);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,rgbxyz_map,The following statement contains a magic number: if (v > 0.04045)        {          return Math.Pow((v + 0.055) / 1.055' 2.4);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,rgbxyz_map,The following statement contains a magic number: if (v > 0.04045)        {          return Math.Pow((v + 0.055) / 1.055' 2.4);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,rgbxyz_map,The following statement contains a magic number: return v / 12.92;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: x *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: y *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: z *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: double vX = x / 95.047;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: double vY = y / 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: double vZ = z / 108.883;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: l = (116.0 * vY) - 16.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: l = (116.0 * vY) - 16.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: a = 500 * (vX - vY);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: b = 200 * (vY - vZ);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: l *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: a *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,XYZ_To_CIELAB,The following statement contains a magic number: b *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzlab_map,The following statement contains a magic number: if (v > 0.008856)        {          return Math.Pow(v' 1.0 / 3.0);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzlab_map,The following statement contains a magic number: if (v > 0.008856)        {          return Math.Pow(v' 1.0 / 3.0);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzlab_map,The following statement contains a magic number: return (v * 7.787) + (16.0 / 116.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzlab_map,The following statement contains a magic number: return (v * 7.787) + (16.0 / 116.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,xyzlab_map,The following statement contains a magic number: return (v * 7.787) + (16.0 / 116.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: l *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: a *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: b *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: double vY = (l + 16.0) / 116.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: double vY = (l + 16.0) / 116.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: double vX = (a / 500.0) + vY;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: double vZ = vY - (b / 200.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: x = 95.0470 * vX;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: y = 100.000 * vY;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: z = 108.883 * vZ;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: x *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: y *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_XYZ,The following statement contains a magic number: z *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,labxyx_map,The following statement contains a magic number: double pv = Math.Pow(v' 3.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,labxyx_map,The following statement contains a magic number: if (pv > 0.008856)        {          return pv;        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,labxyx_map,The following statement contains a magic number: return (v - (16.0 / 116.0)) / 7.787;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,labxyx_map,The following statement contains a magic number: return (v - (16.0 / 116.0)) / 7.787;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,labxyx_map,The following statement contains a magic number: return (v - (16.0 / 116.0)) / 7.787;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_CIELCH,The following statement contains a magic number: l *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_CIELCH,The following statement contains a magic number: a *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_CIELCH,The following statement contains a magic number: b *= 100.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_CIELCH,The following statement contains a magic number: lum *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELAB_To_CIELCH,The following statement contains a magic number: c *= 0.01;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELCH_To_CIELAB,The following statement contains a magic number: a = Math.Cos(h * 2 * Math.PI) * c;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CIELCH_To_CIELAB,The following statement contains a magic number: b = Math.Sin(h * 2 * Math.PI) * c;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: double vR = (double)r / 255.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: double vG = (double)g / 255.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: double vB = (double)b / 255.0;
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: l = 0.5 * (vMax + vMin);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: if (vDel != 0.0)        {          // non-greyscale          if (l < 0.5)          {            s = vDel / (vMax + vMin);          }          else          {            s = vDel / (2.0 - vMax - vMin);          }            if (vR == vMax)          {            h = (vG - vB) / vDel;          }          else if (vG == vMax)          {            h = 2.0 + (vB - vR) / vDel;          }          else          {            h = 4.0 + (vR - vG) / vDel;          }            h /= 6.0;          if (h < 0.0) { h += 1.0; }          if (h > 1.0) { h -= 1.0; }        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: if (vDel != 0.0)        {          // non-greyscale          if (l < 0.5)          {            s = vDel / (vMax + vMin);          }          else          {            s = vDel / (2.0 - vMax - vMin);          }            if (vR == vMax)          {            h = (vG - vB) / vDel;          }          else if (vG == vMax)          {            h = 2.0 + (vB - vR) / vDel;          }          else          {            h = 4.0 + (vR - vG) / vDel;          }            h /= 6.0;          if (h < 0.0) { h += 1.0; }          if (h > 1.0) { h -= 1.0; }        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: if (vDel != 0.0)        {          // non-greyscale          if (l < 0.5)          {            s = vDel / (vMax + vMin);          }          else          {            s = vDel / (2.0 - vMax - vMin);          }            if (vR == vMax)          {            h = (vG - vB) / vDel;          }          else if (vG == vMax)          {            h = 2.0 + (vB - vR) / vDel;          }          else          {            h = 4.0 + (vR - vG) / vDel;          }            h /= 6.0;          if (h < 0.0) { h += 1.0; }          if (h > 1.0) { h -= 1.0; }        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: if (vDel != 0.0)        {          // non-greyscale          if (l < 0.5)          {            s = vDel / (vMax + vMin);          }          else          {            s = vDel / (2.0 - vMax - vMin);          }            if (vR == vMax)          {            h = (vG - vB) / vDel;          }          else if (vG == vMax)          {            h = 2.0 + (vB - vR) / vDel;          }          else          {            h = 4.0 + (vR - vG) / vDel;          }            h /= 6.0;          if (h < 0.0) { h += 1.0; }          if (h > 1.0) { h -= 1.0; }        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_HSL,The following statement contains a magic number: if (vDel != 0.0)        {          // non-greyscale          if (l < 0.5)          {            s = vDel / (vMax + vMin);          }          else          {            s = vDel / (2.0 - vMax - vMin);          }            if (vR == vMax)          {            h = (vG - vB) / vDel;          }          else if (vG == vMax)          {            h = 2.0 + (vB - vR) / vDel;          }          else          {            h = 4.0 + (vR - vG) / vDel;          }            h /= 6.0;          if (h < 0.0) { h += 1.0; }          if (h > 1.0) { h -= 1.0; }        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,HSL_To_RGB,The following statement contains a magic number: if (s == 0.0)        {          r = (byte)(l * 255.0);          g = (byte)(l * 255.0);          b = (byte)(l * 255.0);        }        else        {          double v2;            if (l < 0.5)          {            v2 = l * (1.0 + s);          }          else          {            v2 = (l + s) - (l * s);          }            double v1 = 2.0 * l - v2;            double vR = huergb_map(v1' v2' h + (1.0 / 3.0));          double vG = huergb_map(v1' v2' h);          double vB = huergb_map(v1' v2' h - (1.0 / 3.0));            r = (byte)(255 * vR);          g = (byte)(255 * vG);          b = (byte)(255 * vB);        }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((6.0 * vH) < 1.0) { return v1 + (v2 - v1) * 6.0 * vH; }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((6.0 * vH) < 1.0) { return v1 + (v2 - v1) * 6.0 * vH; }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((2.0 * vH) < 1.0) { return v2; }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((3.0 * vH) < 2.0) { return v1 + (v2 - v1) * 6.0 * ((2.0 / 3.0) - vH); }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((3.0 * vH) < 2.0) { return v1 + (v2 - v1) * 6.0 * ((2.0 / 3.0) - vH); }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((3.0 * vH) < 2.0) { return v1 + (v2 - v1) * 6.0 * ((2.0 / 3.0) - vH); }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((3.0 * vH) < 2.0) { return v1 + (v2 - v1) * 6.0 * ((2.0 / 3.0) - vH); }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,huergb_map,The following statement contains a magic number: if ((3.0 * vH) < 2.0) { return v1 + (v2 - v1) * 6.0 * ((2.0 / 3.0) - vH); }
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_CMY,The following statement contains a magic number: c = 1.0 - ((double)r / 255.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_CMY,The following statement contains a magic number: m = 1.0 - ((double)g / 255.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,RGB_To_CMY,The following statement contains a magic number: y = 1.0 - ((double)b / 255.0);
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CMY_To_RGB,The following statement contains a magic number: r = (byte)(255.0 * (1.0 - c));
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CMY_To_RGB,The following statement contains a magic number: g = (byte)(255.0 * (1.0 - m));
Magic Number,Rhino.Display,ColorConverter,C:\repos\mcneel_rhinocommon\dotnet\rhino\RhinoColors.cs,CMY_To_RGB,The following statement contains a magic number: b = (byte)(255.0 * (1.0 - y));
Magic Number,Rhino.FileIO,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_line_count = 70;
Magic Number,Rhino.FileIO,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ConstructionPlane,The following statement contains a magic number: m_grid_thick_frequency = 5;
Magic Number,Rhino.FileIO,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: int[] rc = new int[5];
Magic Number,Rhino.FileIO,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[2] = m_grid_x_color.ToArgb();
Magic Number,Rhino.FileIO,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[3] = m_grid_y_color.ToArgb();
Magic Number,Rhino.FileIO,ConstructionPlane,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_3dm_settings.cs,ArgbColors,The following statement contains a magic number: rc[4] = m_grid_z_color.ToArgb();
Magic Number,Rhino.FileIO,File3dmWriteOptions,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,File3dmWriteOptions,The following statement contains a magic number: Version = 5;
Magic Number,Rhino.FileIO,File3dmObjectTable,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_extensions.cs,AddText,The following statement contains a magic number: if (italic)          fontStyle |= 2;
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePointF,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteRectangle,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' 4' xywh);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteRectangleF,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 4' f);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteSize,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteSizeF,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteInterval,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 2' d);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint2d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 2' d);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint3d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 3' d);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint4d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 4' d);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteVector2d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 2' d);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteVector3d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 3' d);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePlaneEquation,The following statement contains a magic number: if (value.Length != 4)          throw new ArgumentException("Plane equation must have 4 values");
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePlaneEquation,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 4' value);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint3f,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 3' f);
Magic Number,Rhino.FileIO,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteVector3f,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 3' f);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint,The following statement contains a magic number: int[] xy = new int[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadInt2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPointF,The following statement contains a magic number: float[] xy = new float[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPointF,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: int[] xywh = new int[4];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadInt2(m_ptr' 4' xywh);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: return new System.Drawing.Rectangle(xywh[0]' xywh[1]' xywh[2]' xywh[3]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: return new System.Drawing.Rectangle(xywh[0]' xywh[1]' xywh[2]' xywh[3]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: float[] f = new float[4];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 4' f);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: return new System.Drawing.RectangleF(f[0]' f[1]' f[2]' f[3]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: return new System.Drawing.RectangleF(f[0]' f[1]' f[2]' f[3]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSize,The following statement contains a magic number: int[] xy = new int[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSize,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadInt2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSizeF,The following statement contains a magic number: float[] xy = new float[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSizeF,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 2' xy);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadInterval,The following statement contains a magic number: double[] d = new double[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadInterval,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 2' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint2d,The following statement contains a magic number: double[] d = new double[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint2d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 2' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3d,The following statement contains a magic number: double[] d = new double[3];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 3' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3d,The following statement contains a magic number: return new Geometry.Point3d(d[0]' d[1]' d[2]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: double[] d = new double[4];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 4' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: return new Geometry.Point4d(d[0]' d[1]' d[2]' d[3]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: return new Geometry.Point4d(d[0]' d[1]' d[2]' d[3]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector2d,The following statement contains a magic number: double[] d = new double[2];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector2d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 2' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3d,The following statement contains a magic number: double[] d = new double[3];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 3' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3d,The following statement contains a magic number: return new Geometry.Vector3d(d[0]' d[1]' d[2]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPlaneEquation,The following statement contains a magic number: double[] d = new double[4];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPlaneEquation,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 4' d);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3f,The following statement contains a magic number: float[] f = new float[3];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3f,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 3' f);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3f,The following statement contains a magic number: return new Geometry.Point3f(f[0]' f[1]' f[2]);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3f,The following statement contains a magic number: float[] f = new float[3];
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3f,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 3' f);
Magic Number,Rhino.FileIO,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3f,The following statement contains a magic number: return new Geometry.Vector3f(f[0]' f[1]' f[2]);
Magic Number,Rhino.FileIO,SerializationOptions,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,SerializationOptions,The following statement contains a magic number: RhinoVersion = 5;
Magic Number,Rhino.Geometry.Collections,Brep,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,CreateFromBox,The following statement contains a magic number: Point3d[] box_corners = new Point3d[8];
Magic Number,Rhino.Geometry.Collections,Brep,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,CreateFromBox,The following statement contains a magic number: foreach (Point3d p in corners)        {          box_corners[i] = p;          i++;          if (8 == i) { break; }        }
Magic Number,Rhino.Geometry.Collections,Brep,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_brep.cs,CreateFromBox,The following statement contains a magic number: if (i < 8) { return null; }
Magic Number,Rhino.Geometry.Collections,CachedTextureCoordinates,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,IndexOf,The following statement contains a magic number: for (var i = 0; i < count; i++)        {          double u' v' w;          var success = TryGetAt(i' out u' out v' out w);          if (success && u == item.X && v == item.Y && (Dim < 3 || w == item.Z))            return i;        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToFloatArray,The following statement contains a magic number: float[] rc = new float[count * 3];
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following statement contains a magic number: for (int i = 0; i < faces.Count; i++)        {          MeshFace face = faces[i];          int k = -1;          int N = 0;            if (idx.Contains(face.A)) { k = 0; N++; }          if (idx.Contains(face.B)) { k = 1; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (idx.Contains(face.C)) { k = 2; N++; }          if (N >= 2) { faceidx.Add(i); continue; }          if (face.IsQuad && idx.Contains(face.D)) { k = 3; N++; }          if (N >= 2) { faceidx.Add(i); continue; }            // Do not change face.          if (N == 0) { continue; }            // Always remove triangles.          if (face.IsTriangle) { faceidx.Add(i); continue; }            // Remove quads when shrinking is not allowed.          if (face.IsQuad && !shrinkFaces) { faceidx.Add(i); continue; }            // Convert quad to triangle.          switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }          faces.SetFace(i' face);        }
Magic Number,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: int[] orientation = new int[4];
Magic Number,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: if (c == d)        {          sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1 };          return new int[] { a' b' c };        }
Magic Number,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Geometry.Collections,MeshTopologyEdgeList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetEdgesForFace,The following statement contains a magic number: sameOrientation = new bool[] { orientation[0] == 1' orientation[1] == 1' orientation[2] == 1' orientation[3] == 1 };
Magic Number,Rhino.Geometry.Collections,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry.Collections,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry.Collections,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,ToIntArray,The following statement contains a magic number: int count = asTriangles ? (QuadCount * 2 + TriangleCount) * 3 : Count * 4;
Magic Number,Rhino.Geometry.Collections,MeshFaceList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,GetTopologicalVertices,The following statement contains a magic number: int[] v = new int[4];
Magic Number,Rhino.Geometry.Collections,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The following statement contains a magic number: if (dimension < 1 || order0 < 2 || order1 < 2 || controlPointCount0 < order0 || controlPointCount1 < order1)          return null;
Magic Number,Rhino.Geometry.Collections,NurbsSurface,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbssurface.cs,Create,The following statement contains a magic number: if (dimension < 1 || order0 < 2 || order1 < 2 || controlPointCount0 < order0 || controlPointCount1 < order1)          return null;
Magic Number,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,CreateFromLine,The following statement contains a magic number: NurbsCurve crv = new NurbsCurve(3' false' 2' 2);
Magic Number,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,CreateFromLine,The following statement contains a magic number: NurbsCurve crv = new NurbsCurve(3' false' 2' 2);
Magic Number,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,CreateFromLine,The following statement contains a magic number: NurbsCurve crv = new NurbsCurve(3' false' 2' 2);
Magic Number,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The following statement contains a magic number: const int dimension = 3;
Magic Number,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,Create,The following statement contains a magic number: if (null == point_array || count < 2)          return null;
Magic Number,Rhino.Geometry.Collections,NurbsCurve,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_nurbscurve.cs,NurbsCurve,The following statement contains a magic number: Create(3' false' degree + 1' pointCount);
Magic Number,Rhino.Geometry.Intersect,Intersection,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_intersect.cs,SphereSphere,The following statement contains a magic number: if (rc <= 0 || rc > 3)        {          return SphereSphereIntersection.None;        }
Magic Number,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,RhinoList,The following statement contains a magic number: if (is2 != null)        {          int count = is2.Count;          m_items = new T[count];            is2.CopyTo(m_items' 0);          m_size = count;        }        else        {          m_size = 0;          m_items = new T[4];          using (IEnumerator<T> enumerator = collection.GetEnumerator())          {            while (enumerator.MoveNext())            {              Add(enumerator.Current);            }          }        }
Magic Number,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,EnsureCapacity,The following statement contains a magic number: if (m_items.Length < min)        {          int num = (m_items.Length == 0) ? 4 : (m_items.Length * 2);          if (num < min)          {            num = min;          }          Capacity = num;        }
Magic Number,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,EnsureCapacity,The following statement contains a magic number: if (m_items.Length < min)        {          int num = (m_items.Length == 0) ? 4 : (m_items.Length * 2);          if (num < min)          {            num = min;          }          Capacity = num;        }
Magic Number,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,InsertRange,The following statement contains a magic number: if (is2 != null)        {          int count = is2.Count;          if (count > 0)          {            EnsureCapacity(m_size + count);            if (index < m_size)            {              Array.Copy(m_items' index' m_items' index + count' m_size - index);            }            if (this == is2)            {              Array.Copy(m_items' 0' m_items' index' index);              Array.Copy(m_items' (index + count)' m_items' (index * 2)' (m_size - index));            }            else            {              T[] array = new T[count];              is2.CopyTo(array' 0);              array.CopyTo(m_items' index);            }            m_size += count;          }        }        else        {          using (IEnumerator<T> enumerator = collection.GetEnumerator())          {            while (enumerator.MoveNext())            {              Insert(index++' enumerator.Current);            }          }        }
Magic Number,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,Sort,The following statement contains a magic number: if (m_size < 2) { return; }
Magic Number,Rhino.Collections,RhinoList<T>,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_list.cs,Sort,The following statement contains a magic number: if (m_size < 2) { return; }
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePointF,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteRectangle,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' 4' xywh);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteRectangleF,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 4' f);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteSize,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteInt2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteSizeF,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteInterval,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 2' d);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint2d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 2' d);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint3d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 3' d);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint4d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 4' d);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteVector2d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 2' d);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteVector3d,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 3' d);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePlaneEquation,The following statement contains a magic number: if (value.Length != 4)          throw new ArgumentException("Plane equation must have 4 values");
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePlaneEquation,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteDouble2(m_ptr' 4' value);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WritePoint3f,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 3' f);
Magic Number,Rhino.Collections,BinaryArchiveWriter,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteVector3f,The following statement contains a magic number: m_write_error_occured = m_write_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_WriteSingle2(m_ptr' 3' f);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint,The following statement contains a magic number: int[] xy = new int[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadInt2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPointF,The following statement contains a magic number: float[] xy = new float[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPointF,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: int[] xywh = new int[4];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadInt2(m_ptr' 4' xywh);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: return new System.Drawing.Rectangle(xywh[0]' xywh[1]' xywh[2]' xywh[3]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangle,The following statement contains a magic number: return new System.Drawing.Rectangle(xywh[0]' xywh[1]' xywh[2]' xywh[3]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: float[] f = new float[4];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 4' f);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: return new System.Drawing.RectangleF(f[0]' f[1]' f[2]' f[3]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadRectangleF,The following statement contains a magic number: return new System.Drawing.RectangleF(f[0]' f[1]' f[2]' f[3]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSize,The following statement contains a magic number: int[] xy = new int[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSize,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadInt2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSizeF,The following statement contains a magic number: float[] xy = new float[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadSizeF,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 2' xy);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadInterval,The following statement contains a magic number: double[] d = new double[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadInterval,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 2' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint2d,The following statement contains a magic number: double[] d = new double[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint2d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 2' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3d,The following statement contains a magic number: double[] d = new double[3];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 3' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3d,The following statement contains a magic number: return new Geometry.Point3d(d[0]' d[1]' d[2]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: double[] d = new double[4];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 4' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: return new Geometry.Point4d(d[0]' d[1]' d[2]' d[3]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint4d,The following statement contains a magic number: return new Geometry.Point4d(d[0]' d[1]' d[2]' d[3]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector2d,The following statement contains a magic number: double[] d = new double[2];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector2d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 2' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3d,The following statement contains a magic number: double[] d = new double[3];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3d,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 3' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3d,The following statement contains a magic number: return new Geometry.Vector3d(d[0]' d[1]' d[2]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPlaneEquation,The following statement contains a magic number: double[] d = new double[4];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPlaneEquation,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadDouble2(m_ptr' 4' d);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3f,The following statement contains a magic number: float[] f = new float[3];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3f,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 3' f);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadPoint3f,The following statement contains a magic number: return new Geometry.Point3f(f[0]' f[1]' f[2]);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3f,The following statement contains a magic number: float[] f = new float[3];
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3f,The following statement contains a magic number: m_read_error_occured = m_read_error_occured || !UnsafeNativeMethods.ON_BinaryArchive_ReadSingle2(m_ptr' 3' f);
Magic Number,Rhino.Collections,BinaryArchiveReader,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadVector3f,The following statement contains a magic number: return new Geometry.Vector3f(f[0]' f[1]' f[2]);
Magic Number,Rhino.Collections,SerializationOptions,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,SerializationOptions,The following statement contains a magic number: RhinoVersion = 5;
Magic Number,Geometry,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToRadians,The following statement contains a magic number: return degrees * PI / 180.0;
Magic Number,Geometry,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToDegrees,The following statement contains a magic number: return radians * 180.0 / PI;
Magic Number,DocObjects,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToRadians,The following statement contains a magic number: return degrees * PI / 180.0;
Magic Number,DocObjects,RhinoMath,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_defines.cs,ToDegrees,The following statement contains a magic number: return radians * 180.0 / PI;
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Location = new System.Drawing.Point(64' 237);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Location = new System.Drawing.Point(64' 237);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.TabIndex = 2;
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Location = new System.Drawing.Point(145' 237);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Location = new System.Drawing.Point(145' 237);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.TabIndex = 3;
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(60' 13);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(60' 13);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_comboBox.Location = new System.Drawing.Point(13' 26);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_comboBox.Location = new System.Drawing.Point(13' 26);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_comboBox.Size = new System.Drawing.Size(205' 207);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_comboBox.Size = new System.Drawing.Size(205' 207);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_comboBox.TabIndex = 4;
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(230' 272);
Magic Number,Rhino.UI,ComboListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ComboListBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(230' 272);
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,TextReaderFromFile,The following statement contains a magic number: for (int x = 0; string.IsNullOrEmpty(xml_path) && x < 2; x++)        {          string filename;          if (x < 1)          {            // First check using the actual assembly file name            filename = Path.GetFileNameWithoutExtension(a.Location);          }          else          {            // Second' look using the assembly name            AssemblyName assname = a.GetName();            filename = assname.Name;          }          if (!string.IsNullOrEmpty(filename) && filename.EndsWith("_d"' StringComparison.InvariantCultureIgnoreCase))          {            int start_index = filename.Length - 2;            if (start_index >= 0)              filename = filename.Remove(start_index);          }          xml_path = XmlFileExists(dir' filename' languageId);          if (string.IsNullOrEmpty(xml_path) && !string.IsNullOrEmpty(dir))          {            bool found = false;            var di = new DirectoryInfo(dir);            var sub_directories = di.GetDirectories();            foreach (DirectoryInfo t in sub_directories)            {              xml_path = XmlFileExists(t.FullName' filename' languageId);              if (!string.IsNullOrEmpty(xml_path))              {                found = true;                break;              }            }            if (found)              break;            if (x > 0)              return null;          }        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,TextReaderFromFile,The following statement contains a magic number: for (int x = 0; string.IsNullOrEmpty(xml_path) && x < 2; x++)        {          string filename;          if (x < 1)          {            // First check using the actual assembly file name            filename = Path.GetFileNameWithoutExtension(a.Location);          }          else          {            // Second' look using the assembly name            AssemblyName assname = a.GetName();            filename = assname.Name;          }          if (!string.IsNullOrEmpty(filename) && filename.EndsWith("_d"' StringComparison.InvariantCultureIgnoreCase))          {            int start_index = filename.Length - 2;            if (start_index >= 0)              filename = filename.Remove(start_index);          }          xml_path = XmlFileExists(dir' filename' languageId);          if (string.IsNullOrEmpty(xml_path) && !string.IsNullOrEmpty(dir))          {            bool found = false;            var di = new DirectoryInfo(dir);            var sub_directories = di.GetDirectories();            foreach (DirectoryInfo t in sub_directories)            {              xml_path = XmlFileExists(t.FullName' filename' languageId);              if (!string.IsNullOrEmpty(xml_path))              {                found = true;                break;              }            }            if (found)              break;            if (x > 0)              return null;          }        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The following statement contains a magic number: try        {          XmlTextReader reader = TextReaderFromFile(a' languageId) ?? LoadFromAssemblyEmbeddedResource(a' languageId);          if (null == reader)            return false; // External or embedded XML file not found          var doc = new XmlDocument();          doc.Load(reader);          reader.Close();            XmlNode root = doc.DocumentElement;          XmlNodeList command_list = null == root ? null : root.SelectNodes("RMACOMMANDNAME");          XmlNodeList string_list = null == root ? null : root.SelectNodes("RMASTRING");          XmlNodeList dialog_list = null == root ? null : root.SelectNodes("DIALOG");            if (null != command_list)          {            const string prefix = "Command::";            int prefix_length = prefix.Length;            int count = command_list.Count;            for (int i = 0; i < count; i++)            {              if (command_list[i].Attributes == null)                continue;                var en = command_list[i].Attributes["English"];              if (en == null)                continue;                string key = en.Value;              key = key.Substring(prefix_length);              var loc = command_list[i].Attributes["Localized"];              if (loc == null)                continue;                string value = command_list[i].Attributes["Localized"].Value;              int last_index = value.LastIndexOf("::"' StringComparison.Ordinal);              if (last_index > 0)                value = value.Substring(last_index + 2);                // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value) && !m_command_list.ContainsKey(key))                m_command_list.Add(key' StripTrailingSquareBrackets(value));            }          }            if (null != string_list)          {            int count = string_list.Count;            for (int i = 0; i < count; i++)            {              if (string_list[i].Attributes == null)                continue;                string key = string_list[i].Attributes["English"].Value;              string value = string_list[i].Attributes["Localized"].Value;              // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value)&& !m_string_list.ContainsKey(key))                m_string_list.Add(key' StripTrailingSquareBrackets(value));            }          }                    if (null != dialog_list)          {            int dialog_count = dialog_list.Count;            for (int current_dialog = 0; current_dialog < dialog_count; current_dialog++)            {              XmlNode dialog_node = dialog_list[current_dialog];              if (dialog_node.Attributes == null)                continue;                XmlAttribute attrib = dialog_node.Attributes["English"];              if (null != attrib)              {                string dialog_name = dialog_node.Attributes["English"].Value;                string english_text_value = dialog_name;                int last_index = dialog_name.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                {                  english_text_value = dialog_name.Substring(last_index + 2);                  dialog_name = dialog_name.Substring(0' last_index);                }                string dialog_text_value = dialog_node.Attributes["Localized"].Value;                last_index = dialog_text_value.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                  dialog_text_value = dialog_text_value.Substring(last_index + 2);                // Only add to dictionary if the dialog text item has been translated                if (!string.IsNullOrEmpty(dialog_text_value) && 0 != String.CompareOrdinal(english_text_value' dialog_text_value) && !m_dialog_list.ContainsKey(dialog_text_value))                {                  if (m_dialog_list.ContainsKey(dialog_name))                    System.Diagnostics.Debug.WriteLine("Dialog key exists in localization dictionary:: " + dialog_name);                  else                    m_dialog_list.Add(dialog_name' dialog_text_value);                }              }                            XmlNodeList control_list = dialog_node.SelectNodes("CONTROL");              if (null != control_list)              {                int control_count = control_list.Count;                for (int current_control = 0; current_control < control_count; current_control++)                {                  XmlNode control_node = control_list[current_control];                  if (control_node.Attributes == null)                    continue;                    String key = control_node.Attributes["English"].Value;                  String value = control_node.Attributes["Localized"].Value;                  String english_value = key;                  int key_index = key.LastIndexOf("::"' StringComparison.Ordinal);                  if (key_index > 0)                  {                    english_value = key.Substring(key_index + 2);                    key = key.Substring(0'key_index);                  }                  int value_index = value.LastIndexOf("::"' StringComparison.Ordinal);                  if (value_index > 0)                    value = value.Substring(value_index + 2);                  // Only add to dictionary if the value has been translated                  if (0 != String.CompareOrdinal(value' english_value) && !m_dialog_list.ContainsKey(key))                    m_dialog_list.Add(key' value);                }              }            }          }        }  #if RHINO_SDK        catch(Exception exception)        {          Rhino.Runtime.HostUtils.ExceptionReport(exception);          rc = false;        }  #else        catch(Exception)        {          rc = false;        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The following statement contains a magic number: try        {          XmlTextReader reader = TextReaderFromFile(a' languageId) ?? LoadFromAssemblyEmbeddedResource(a' languageId);          if (null == reader)            return false; // External or embedded XML file not found          var doc = new XmlDocument();          doc.Load(reader);          reader.Close();            XmlNode root = doc.DocumentElement;          XmlNodeList command_list = null == root ? null : root.SelectNodes("RMACOMMANDNAME");          XmlNodeList string_list = null == root ? null : root.SelectNodes("RMASTRING");          XmlNodeList dialog_list = null == root ? null : root.SelectNodes("DIALOG");            if (null != command_list)          {            const string prefix = "Command::";            int prefix_length = prefix.Length;            int count = command_list.Count;            for (int i = 0; i < count; i++)            {              if (command_list[i].Attributes == null)                continue;                var en = command_list[i].Attributes["English"];              if (en == null)                continue;                string key = en.Value;              key = key.Substring(prefix_length);              var loc = command_list[i].Attributes["Localized"];              if (loc == null)                continue;                string value = command_list[i].Attributes["Localized"].Value;              int last_index = value.LastIndexOf("::"' StringComparison.Ordinal);              if (last_index > 0)                value = value.Substring(last_index + 2);                // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value) && !m_command_list.ContainsKey(key))                m_command_list.Add(key' StripTrailingSquareBrackets(value));            }          }            if (null != string_list)          {            int count = string_list.Count;            for (int i = 0; i < count; i++)            {              if (string_list[i].Attributes == null)                continue;                string key = string_list[i].Attributes["English"].Value;              string value = string_list[i].Attributes["Localized"].Value;              // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value)&& !m_string_list.ContainsKey(key))                m_string_list.Add(key' StripTrailingSquareBrackets(value));            }          }                    if (null != dialog_list)          {            int dialog_count = dialog_list.Count;            for (int current_dialog = 0; current_dialog < dialog_count; current_dialog++)            {              XmlNode dialog_node = dialog_list[current_dialog];              if (dialog_node.Attributes == null)                continue;                XmlAttribute attrib = dialog_node.Attributes["English"];              if (null != attrib)              {                string dialog_name = dialog_node.Attributes["English"].Value;                string english_text_value = dialog_name;                int last_index = dialog_name.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                {                  english_text_value = dialog_name.Substring(last_index + 2);                  dialog_name = dialog_name.Substring(0' last_index);                }                string dialog_text_value = dialog_node.Attributes["Localized"].Value;                last_index = dialog_text_value.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                  dialog_text_value = dialog_text_value.Substring(last_index + 2);                // Only add to dictionary if the dialog text item has been translated                if (!string.IsNullOrEmpty(dialog_text_value) && 0 != String.CompareOrdinal(english_text_value' dialog_text_value) && !m_dialog_list.ContainsKey(dialog_text_value))                {                  if (m_dialog_list.ContainsKey(dialog_name))                    System.Diagnostics.Debug.WriteLine("Dialog key exists in localization dictionary:: " + dialog_name);                  else                    m_dialog_list.Add(dialog_name' dialog_text_value);                }              }                            XmlNodeList control_list = dialog_node.SelectNodes("CONTROL");              if (null != control_list)              {                int control_count = control_list.Count;                for (int current_control = 0; current_control < control_count; current_control++)                {                  XmlNode control_node = control_list[current_control];                  if (control_node.Attributes == null)                    continue;                    String key = control_node.Attributes["English"].Value;                  String value = control_node.Attributes["Localized"].Value;                  String english_value = key;                  int key_index = key.LastIndexOf("::"' StringComparison.Ordinal);                  if (key_index > 0)                  {                    english_value = key.Substring(key_index + 2);                    key = key.Substring(0'key_index);                  }                  int value_index = value.LastIndexOf("::"' StringComparison.Ordinal);                  if (value_index > 0)                    value = value.Substring(value_index + 2);                  // Only add to dictionary if the value has been translated                  if (0 != String.CompareOrdinal(value' english_value) && !m_dialog_list.ContainsKey(key))                    m_dialog_list.Add(key' value);                }              }            }          }        }  #if RHINO_SDK        catch(Exception exception)        {          Rhino.Runtime.HostUtils.ExceptionReport(exception);          rc = false;        }  #else        catch(Exception)        {          rc = false;        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The following statement contains a magic number: try        {          XmlTextReader reader = TextReaderFromFile(a' languageId) ?? LoadFromAssemblyEmbeddedResource(a' languageId);          if (null == reader)            return false; // External or embedded XML file not found          var doc = new XmlDocument();          doc.Load(reader);          reader.Close();            XmlNode root = doc.DocumentElement;          XmlNodeList command_list = null == root ? null : root.SelectNodes("RMACOMMANDNAME");          XmlNodeList string_list = null == root ? null : root.SelectNodes("RMASTRING");          XmlNodeList dialog_list = null == root ? null : root.SelectNodes("DIALOG");            if (null != command_list)          {            const string prefix = "Command::";            int prefix_length = prefix.Length;            int count = command_list.Count;            for (int i = 0; i < count; i++)            {              if (command_list[i].Attributes == null)                continue;                var en = command_list[i].Attributes["English"];              if (en == null)                continue;                string key = en.Value;              key = key.Substring(prefix_length);              var loc = command_list[i].Attributes["Localized"];              if (loc == null)                continue;                string value = command_list[i].Attributes["Localized"].Value;              int last_index = value.LastIndexOf("::"' StringComparison.Ordinal);              if (last_index > 0)                value = value.Substring(last_index + 2);                // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value) && !m_command_list.ContainsKey(key))                m_command_list.Add(key' StripTrailingSquareBrackets(value));            }          }            if (null != string_list)          {            int count = string_list.Count;            for (int i = 0; i < count; i++)            {              if (string_list[i].Attributes == null)                continue;                string key = string_list[i].Attributes["English"].Value;              string value = string_list[i].Attributes["Localized"].Value;              // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value)&& !m_string_list.ContainsKey(key))                m_string_list.Add(key' StripTrailingSquareBrackets(value));            }          }                    if (null != dialog_list)          {            int dialog_count = dialog_list.Count;            for (int current_dialog = 0; current_dialog < dialog_count; current_dialog++)            {              XmlNode dialog_node = dialog_list[current_dialog];              if (dialog_node.Attributes == null)                continue;                XmlAttribute attrib = dialog_node.Attributes["English"];              if (null != attrib)              {                string dialog_name = dialog_node.Attributes["English"].Value;                string english_text_value = dialog_name;                int last_index = dialog_name.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                {                  english_text_value = dialog_name.Substring(last_index + 2);                  dialog_name = dialog_name.Substring(0' last_index);                }                string dialog_text_value = dialog_node.Attributes["Localized"].Value;                last_index = dialog_text_value.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                  dialog_text_value = dialog_text_value.Substring(last_index + 2);                // Only add to dictionary if the dialog text item has been translated                if (!string.IsNullOrEmpty(dialog_text_value) && 0 != String.CompareOrdinal(english_text_value' dialog_text_value) && !m_dialog_list.ContainsKey(dialog_text_value))                {                  if (m_dialog_list.ContainsKey(dialog_name))                    System.Diagnostics.Debug.WriteLine("Dialog key exists in localization dictionary:: " + dialog_name);                  else                    m_dialog_list.Add(dialog_name' dialog_text_value);                }              }                            XmlNodeList control_list = dialog_node.SelectNodes("CONTROL");              if (null != control_list)              {                int control_count = control_list.Count;                for (int current_control = 0; current_control < control_count; current_control++)                {                  XmlNode control_node = control_list[current_control];                  if (control_node.Attributes == null)                    continue;                    String key = control_node.Attributes["English"].Value;                  String value = control_node.Attributes["Localized"].Value;                  String english_value = key;                  int key_index = key.LastIndexOf("::"' StringComparison.Ordinal);                  if (key_index > 0)                  {                    english_value = key.Substring(key_index + 2);                    key = key.Substring(0'key_index);                  }                  int value_index = value.LastIndexOf("::"' StringComparison.Ordinal);                  if (value_index > 0)                    value = value.Substring(value_index + 2);                  // Only add to dictionary if the value has been translated                  if (0 != String.CompareOrdinal(value' english_value) && !m_dialog_list.ContainsKey(key))                    m_dialog_list.Add(key' value);                }              }            }          }        }  #if RHINO_SDK        catch(Exception exception)        {          Rhino.Runtime.HostUtils.ExceptionReport(exception);          rc = false;        }  #else        catch(Exception)        {          rc = false;        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The following statement contains a magic number: try        {          XmlTextReader reader = TextReaderFromFile(a' languageId) ?? LoadFromAssemblyEmbeddedResource(a' languageId);          if (null == reader)            return false; // External or embedded XML file not found          var doc = new XmlDocument();          doc.Load(reader);          reader.Close();            XmlNode root = doc.DocumentElement;          XmlNodeList command_list = null == root ? null : root.SelectNodes("RMACOMMANDNAME");          XmlNodeList string_list = null == root ? null : root.SelectNodes("RMASTRING");          XmlNodeList dialog_list = null == root ? null : root.SelectNodes("DIALOG");            if (null != command_list)          {            const string prefix = "Command::";            int prefix_length = prefix.Length;            int count = command_list.Count;            for (int i = 0; i < count; i++)            {              if (command_list[i].Attributes == null)                continue;                var en = command_list[i].Attributes["English"];              if (en == null)                continue;                string key = en.Value;              key = key.Substring(prefix_length);              var loc = command_list[i].Attributes["Localized"];              if (loc == null)                continue;                string value = command_list[i].Attributes["Localized"].Value;              int last_index = value.LastIndexOf("::"' StringComparison.Ordinal);              if (last_index > 0)                value = value.Substring(last_index + 2);                // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value) && !m_command_list.ContainsKey(key))                m_command_list.Add(key' StripTrailingSquareBrackets(value));            }          }            if (null != string_list)          {            int count = string_list.Count;            for (int i = 0; i < count; i++)            {              if (string_list[i].Attributes == null)                continue;                string key = string_list[i].Attributes["English"].Value;              string value = string_list[i].Attributes["Localized"].Value;              // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value)&& !m_string_list.ContainsKey(key))                m_string_list.Add(key' StripTrailingSquareBrackets(value));            }          }                    if (null != dialog_list)          {            int dialog_count = dialog_list.Count;            for (int current_dialog = 0; current_dialog < dialog_count; current_dialog++)            {              XmlNode dialog_node = dialog_list[current_dialog];              if (dialog_node.Attributes == null)                continue;                XmlAttribute attrib = dialog_node.Attributes["English"];              if (null != attrib)              {                string dialog_name = dialog_node.Attributes["English"].Value;                string english_text_value = dialog_name;                int last_index = dialog_name.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                {                  english_text_value = dialog_name.Substring(last_index + 2);                  dialog_name = dialog_name.Substring(0' last_index);                }                string dialog_text_value = dialog_node.Attributes["Localized"].Value;                last_index = dialog_text_value.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                  dialog_text_value = dialog_text_value.Substring(last_index + 2);                // Only add to dictionary if the dialog text item has been translated                if (!string.IsNullOrEmpty(dialog_text_value) && 0 != String.CompareOrdinal(english_text_value' dialog_text_value) && !m_dialog_list.ContainsKey(dialog_text_value))                {                  if (m_dialog_list.ContainsKey(dialog_name))                    System.Diagnostics.Debug.WriteLine("Dialog key exists in localization dictionary:: " + dialog_name);                  else                    m_dialog_list.Add(dialog_name' dialog_text_value);                }              }                            XmlNodeList control_list = dialog_node.SelectNodes("CONTROL");              if (null != control_list)              {                int control_count = control_list.Count;                for (int current_control = 0; current_control < control_count; current_control++)                {                  XmlNode control_node = control_list[current_control];                  if (control_node.Attributes == null)                    continue;                    String key = control_node.Attributes["English"].Value;                  String value = control_node.Attributes["Localized"].Value;                  String english_value = key;                  int key_index = key.LastIndexOf("::"' StringComparison.Ordinal);                  if (key_index > 0)                  {                    english_value = key.Substring(key_index + 2);                    key = key.Substring(0'key_index);                  }                  int value_index = value.LastIndexOf("::"' StringComparison.Ordinal);                  if (value_index > 0)                    value = value.Substring(value_index + 2);                  // Only add to dictionary if the value has been translated                  if (0 != String.CompareOrdinal(value' english_value) && !m_dialog_list.ContainsKey(key))                    m_dialog_list.Add(key' value);                }              }            }          }        }  #if RHINO_SDK        catch(Exception exception)        {          Rhino.Runtime.HostUtils.ExceptionReport(exception);          rc = false;        }  #else        catch(Exception)        {          rc = false;        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LoadFromFile,The following statement contains a magic number: try        {          XmlTextReader reader = TextReaderFromFile(a' languageId) ?? LoadFromAssemblyEmbeddedResource(a' languageId);          if (null == reader)            return false; // External or embedded XML file not found          var doc = new XmlDocument();          doc.Load(reader);          reader.Close();            XmlNode root = doc.DocumentElement;          XmlNodeList command_list = null == root ? null : root.SelectNodes("RMACOMMANDNAME");          XmlNodeList string_list = null == root ? null : root.SelectNodes("RMASTRING");          XmlNodeList dialog_list = null == root ? null : root.SelectNodes("DIALOG");            if (null != command_list)          {            const string prefix = "Command::";            int prefix_length = prefix.Length;            int count = command_list.Count;            for (int i = 0; i < count; i++)            {              if (command_list[i].Attributes == null)                continue;                var en = command_list[i].Attributes["English"];              if (en == null)                continue;                string key = en.Value;              key = key.Substring(prefix_length);              var loc = command_list[i].Attributes["Localized"];              if (loc == null)                continue;                string value = command_list[i].Attributes["Localized"].Value;              int last_index = value.LastIndexOf("::"' StringComparison.Ordinal);              if (last_index > 0)                value = value.Substring(last_index + 2);                // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value) && !m_command_list.ContainsKey(key))                m_command_list.Add(key' StripTrailingSquareBrackets(value));            }          }            if (null != string_list)          {            int count = string_list.Count;            for (int i = 0; i < count; i++)            {              if (string_list[i].Attributes == null)                continue;                string key = string_list[i].Attributes["English"].Value;              string value = string_list[i].Attributes["Localized"].Value;              // Only add to dictionary if the value has been translated              if (0 != String.CompareOrdinal(key' value)&& !m_string_list.ContainsKey(key))                m_string_list.Add(key' StripTrailingSquareBrackets(value));            }          }                    if (null != dialog_list)          {            int dialog_count = dialog_list.Count;            for (int current_dialog = 0; current_dialog < dialog_count; current_dialog++)            {              XmlNode dialog_node = dialog_list[current_dialog];              if (dialog_node.Attributes == null)                continue;                XmlAttribute attrib = dialog_node.Attributes["English"];              if (null != attrib)              {                string dialog_name = dialog_node.Attributes["English"].Value;                string english_text_value = dialog_name;                int last_index = dialog_name.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                {                  english_text_value = dialog_name.Substring(last_index + 2);                  dialog_name = dialog_name.Substring(0' last_index);                }                string dialog_text_value = dialog_node.Attributes["Localized"].Value;                last_index = dialog_text_value.LastIndexOf("::"' StringComparison.Ordinal);                if (last_index > 0)                  dialog_text_value = dialog_text_value.Substring(last_index + 2);                // Only add to dictionary if the dialog text item has been translated                if (!string.IsNullOrEmpty(dialog_text_value) && 0 != String.CompareOrdinal(english_text_value' dialog_text_value) && !m_dialog_list.ContainsKey(dialog_text_value))                {                  if (m_dialog_list.ContainsKey(dialog_name))                    System.Diagnostics.Debug.WriteLine("Dialog key exists in localization dictionary:: " + dialog_name);                  else                    m_dialog_list.Add(dialog_name' dialog_text_value);                }              }                            XmlNodeList control_list = dialog_node.SelectNodes("CONTROL");              if (null != control_list)              {                int control_count = control_list.Count;                for (int current_control = 0; current_control < control_count; current_control++)                {                  XmlNode control_node = control_list[current_control];                  if (control_node.Attributes == null)                    continue;                    String key = control_node.Attributes["English"].Value;                  String value = control_node.Attributes["Localized"].Value;                  String english_value = key;                  int key_index = key.LastIndexOf("::"' StringComparison.Ordinal);                  if (key_index > 0)                  {                    english_value = key.Substring(key_index + 2);                    key = key.Substring(0'key_index);                  }                  int value_index = value.LastIndexOf("::"' StringComparison.Ordinal);                  if (value_index > 0)                    value = value.Substring(value_index + 2);                  // Only add to dictionary if the value has been translated                  if (0 != String.CompareOrdinal(value' english_value) && !m_dialog_list.ContainsKey(key))                    m_dialog_list.Add(key' value);                }              }            }          }        }  #if RHINO_SDK        catch(Exception exception)        {          Rhino.Runtime.HostUtils.ExceptionReport(exception);          rc = false;        }  #else        catch(Exception)        {          rc = false;        }
Magic Number,Rhino.UI,LocalizationStringTable,C:\repos\mcneel_rhinocommon\dotnet\UI\LocalizationStringTable.cs,LocalizeListView,The following statement contains a magic number: for (int i = 0; i < 2; i++)        {          // First look at this control' in case this is a derived class' then get list view parent so we have a place to look for ControlHeader variables          Control ctrl = i < 1 ? lv : lv.Parent;          if (null != ctrl)          {            // Get list of fields (variables) that the ctrl class includes            FieldInfo[] fields = ctrl.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);            {              // Find all the ColumnHeader fields in the ctrl class and build a dictionary of the field value and its field name              var header_fields = new Dictionary<ColumnHeader'string>();              for (int j = 0' length = fields.Length; j < length; j++)              {                FieldInfo fi = fields[j];                if (null != fi)                {                  var ch = fi.GetValue(ctrl) as ColumnHeader;                  if (null != ch)                    header_fields.Add(ch' fi.Name);                }              }              if (header_fields.Count > 0)              {                // Iterate column header list                for (int j = 0' count = lv.Columns.Count; j < count; j++)                {                  ColumnHeader header = lv.Columns[j];                  // If this header item is not null and the text is not empty and the header object is in the control dictionary                  string control_field_name;                  if (null != header && !string.IsNullOrEmpty(header.Text) && header_fields.TryGetValue(header' out control_field_name) && !string.IsNullOrEmpty(control_field_name))                  {                    // Look up the localized string for this column header item                    string key = formName + "::" + control_field_name + "::Text";                    string value;                    if (m_dialog_list.TryGetValue(key' out value))                      header.Text = value;                    else if (!string.IsNullOrEmpty(formClassName))                    {                      key= formName + "::" + formClassName + "::" + control_field_name + "::Text";                      if (m_dialog_list.TryGetValue(key' out value))                      {                        header.Text = value;                      }                      else                      {                        key = formClassName + "::" + control_field_name + "::Text";                        if (m_dialog_list.TryGetValue(key' out value))                          header.Text = value;                      }                    }                  }                }              }            }          }        }
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Location = new System.Drawing.Point(116' 55);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Location = new System.Drawing.Point(116' 55);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Location = new System.Drawing.Point(197' 55);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Location = new System.Drawing.Point(197' 55);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.TabIndex = 2;
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Location = new System.Drawing.Point(13' 29);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Location = new System.Drawing.Point(13' 29);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Size = new System.Drawing.Size(259' 20);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Size = new System.Drawing.Size(259' 20);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(10' 9);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(10' 9);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(80' 13);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(80' 13);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.TabIndex = 3;
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 88);
Magic Number,Rhino.UI,StringBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\StringBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 88);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Location = new System.Drawing.Point(197' 227);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Location = new System.Drawing.Point(197' 227);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.TabIndex = 2;
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Location = new System.Drawing.Point(116' 227);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Location = new System.Drawing.Point(116' 227);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Location = new System.Drawing.Point(13' 29);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Location = new System.Drawing.Point(13' 29);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Size = new System.Drawing.Size(259' 192);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_txtbox.Size = new System.Drawing.Size(259' 192);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(10' 9);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(10' 9);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(80' 13);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(80' 13);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.TabIndex = 3;
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,Rhino.UI,EditBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\EditBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,ListBoxForm,The following statement contains a magic number: if (items != null)        {          object[] list = new object[items.Count];          items.CopyTo(list' 0);          m_list.Items.AddRange(list);          m_list.DoubleClick += OnDoubleClickList;            if (selectedItem != null)            m_list.SelectedItem = selectedItem;            var graphics = CreateGraphics();          int max_width = 0;          foreach (var item in items)          {            string s = item.ToString();            var width = (int)(graphics.MeasureString(s' this.Font).Width+0.5F);            if (width > max_width)              max_width = width;          }          max_width += 12; //padding          if (max_width > m_list.ClientSize.Width)          {            int increase_amount = max_width - m_list.ClientSize.Width;            this.Width += increase_amount;          }        }
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Location = new System.Drawing.Point(143' 234);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Location = new System.Drawing.Point(143' 234);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnCancel.TabIndex = 7;
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Location = new System.Drawing.Point(62' 234);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Location = new System.Drawing.Point(62' 234);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: m_btnOk.TabIndex = 6;
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(10' 6);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(10' 6);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(60' 13);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(60' 13);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.TabIndex = 5;
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_list.Location = new System.Drawing.Point(13' 26);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_list.Location = new System.Drawing.Point(13' 26);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_list.Size = new System.Drawing.Size(205' 199);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_list.Size = new System.Drawing.Size(205' 199);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_list.TabIndex = 4;
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_checkedListBox.Location = new System.Drawing.Point(13' 26);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_checkedListBox.Location = new System.Drawing.Point(13' 26);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_checkedListBox.Size = new System.Drawing.Size(205' 199);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_checkedListBox.Size = new System.Drawing.Size(205' 199);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.m_checkedListBox.TabIndex = 8;
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(228' 262);
Magic Number,Rhino.UI,ListBoxForm,C:\repos\mcneel_rhinocommon\dotnet\UI\ListBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(228' 262);
Missing Default,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following switch statement is missing a default case: switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }
Missing Default,Rhino.Geometry,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following switch statement is missing a default case: switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }
Missing Default,Rhino.Geometry,Circle,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_circle.cs,DerivativeAt,The following switch statement is missing a default case: switch (Math.Abs(derivative) % 4)        {          case 0:            r0 *= Math.Cos(t);            r1 *= Math.Sin(t);            break;          case 1:            r0 *= -Math.Sin(t);            r1 *= Math.Cos(t);            break;          case 2:            r0 *= -Math.Cos(t);            r1 *= -Math.Sin(t);            break;          case 3:            r0 *= Math.Sin(t);            r1 *= -Math.Cos(t);            break;        }
Missing Default,Rhino.Render,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following switch statement is missing a default case: switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }
Missing Default,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadAndSetItemType,The following switch statement is missing a default case: switch(it)        {          case ItemType.Bool: //1            {              bool val = archive.ReadBool();              rc = Set(key' val);            }            break;          case ItemType.Byte: //2            {              byte val = archive.ReadByte();              rc = Set(key' val);            }            break;            case ItemType.SByte: //3            {              sbyte val = archive.ReadSByte();              rc = Set(key' val);            }            break;          case ItemType.Short: //4            {              short val = archive.ReadShort();              rc = Set(key' val);            }            break;          case ItemType.UShort: //5            {              ushort val = archive.ReadUShort();              rc = Set(key' val);            }            break;          case ItemType.Int32: //6            {              int val = archive.ReadInt();              rc = Set(key' val);            }            break;          case ItemType.UInt32: //7            {              uint val = archive.ReadUInt();              rc = Set(key' val);            }            break;          case ItemType.Int64: //8            {              Int64 val=archive.ReadInt64();              rc = Set(key' val);            }            break;          case ItemType.Single: //9            {              float val = archive.ReadSingle();              rc = Set(key' val);            }            break;          case ItemType.Double: //10            {              double val = archive.ReadDouble();              rc = Set(key' val);            }            break;          case ItemType.Guid: //11            {              Guid val = archive.ReadGuid();              rc = Set(key' val);            }            break;          case ItemType.String: //12            {              string val = archive.ReadString();              rc = Set(key' val);            }            break;          case ItemType.ArrayBool: //13            {              bool[] arr = archive.ReadBoolArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayByte: //14            {              byte[] arr = archive.ReadByteArray();              rc = Set(key' arr);            }            break;          case ItemType.ArraySByte: //15            {              sbyte[] arr = archive.ReadSByteArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayShort: //16            {              short[] arr = archive.ReadShortArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayInt32: //17            {              int[] arr = archive.ReadIntArray();              rc = Set(key' arr);            }            break;          case ItemType.ArraySingle: //18            {              float[] arr = archive.ReadSingleArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayDouble: //19            {              double[] arr = archive.ReadDoubleArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayGuid: //20            {              Guid[] arr = archive.ReadGuidArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayString: //21            {              string[] arr = archive.ReadStringArray();              rc = Set(key' arr);            }            break;          case ItemType.Color: //22            {              System.Drawing.Color val = archive.ReadColor();              rc = Set(key' val);            }            break;          case ItemType.Point: //23            {              System.Drawing.Point val = archive.ReadPoint();              rc = Set(key' val);            }            break;          case ItemType.PointF: //24            {              System.Drawing.PointF val = archive.ReadPointF();              rc = Set(key' val);            }            break;          case ItemType.Rectangle: //25            {              System.Drawing.Rectangle val = archive.ReadRectangle();              rc = Set(key' val);            }            break;          case ItemType.RectangleF: //26            {              System.Drawing.RectangleF val = archive.ReadRectangleF();              rc = Set(key' val);            }            break;          case ItemType.Size: //27            {              System.Drawing.Size val = archive.ReadSize();              rc = Set(key' val);            }            break;          case ItemType.SizeF: //28            {              System.Drawing.SizeF val = archive.ReadSizeF();              rc = Set(key' val);            }            break;          case ItemType.Font: //29            {  #if !MOBILE_BUILD              System.Drawing.Font val = archive.ReadFont();              rc = Set(key' val);  #endif            }            break;          case ItemType.Interval: //30            {              Geometry.Interval val = archive.ReadInterval();              rc = Set(key' val);            }            break;          case ItemType.Point2d: //31            {              Geometry.Point2d val = archive.ReadPoint2d();              rc = Set(key' val);            }            break;          case ItemType.Point3d: //32            {              Geometry.Point3d val = archive.ReadPoint3d();              rc = Set(key' val);            }            break;          case ItemType.Point4d: //33            {              Geometry.Point4d val = archive.ReadPoint4d();              rc = Set(key' val);            }            break;          case ItemType.Vector2d: //34            {              Geometry.Vector2d val = archive.ReadVector2d();              rc = Set(key' val);            }            break;          case ItemType.Vector3d: //35            {              Geometry.Vector3d val = archive.ReadVector3d();              rc = Set(key' val);            }            break;          case ItemType.BoundingBox: //36            {              Geometry.BoundingBox val = archive.ReadBoundingBox();                rc = Set(key' val);            }            break;          case ItemType.Ray3d: //37            {              Geometry.Ray3d val = archive.ReadRay3d();              rc = Set(key' val);            }            break;          case ItemType.PlaneEquation: //38            {              double[] val = archive.ReadPlaneEquation();              rc = SetPlaneEquation(key' val);            }            break;          case ItemType.Xform: //39            {              Geometry.Transform val = archive.ReadTransform();              rc = Set(key' val);            }            break;          case ItemType.Plane: //40            {              Geometry.Plane val = archive.ReadPlane();              rc = Set(key' val);            }            break;          case ItemType.Line: //41            {              Geometry.Line val = archive.ReadLine();              rc = Set(key' val);            }            break;          case ItemType.Point3f: //42            {              Geometry.Point3f val = archive.ReadPoint3f();              rc = Set(key' val);            }            break;          case ItemType.Vector3f: //43            {              Geometry.Vector3f val = archive.ReadVector3f();              rc = Set(key' val);            }            break;          case ItemType.OnBinaryArchiveDictionary: //44            {              ArchivableDictionary dict = Read(archive);              if( dict != null )                rc = Set(key' dict);            }            break;          case ItemType.OnObject: //45          case ItemType.OnGeometry: //47            {              int read_rc = 0;              IntPtr pObject = UnsafeNativeMethods.ON_BinaryArchive_ReadObject(archive.NonConstPointer()' ref read_rc);              Geometry.GeometryBase geom = Geometry.GeometryBase.CreateGeometryHelper(pObject' null);              if( geom!=null )              {                rc = Set(key' geom);              }              else              {                // some other ON_Object                UnsafeNativeMethods.ON_Object_Delete(pObject);              }            }            break;          case ItemType.OnMeshParameters: //46            {              Geometry.MeshingParameters val = archive.ReadMeshingParameters();              rc = Set(key' val);            }            break;          case ItemType.OnObjRef: //48            {  #if RHINO_SDK              DocObjects.ObjRef val = archive.ReadObjRef();              rc = Set(key' val);  #endif            }            break;          case ItemType.ArrayObjRef: //49            {  #if RHINO_SDK              DocObjects.ObjRef[] val = archive.ReadObjRefArray();              rc = Set(key' val);  #endif            }            break;        }
Missing Default,Rhino.FileIO,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteItem,The following switch statement is missing a default case: switch (it)        {          case ItemType.Bool: // 1            archive.WriteBool((bool)val);            break;          case ItemType.Byte: // 2            archive.WriteByte((byte)val);            break;          case ItemType.SByte: // 3            archive.WriteSByte((sbyte)val);            break;          case ItemType.Short: // 4            archive.WriteShort((short)val);            break;          case ItemType.UShort: // 5            archive.WriteUShort((ushort)val);            break;          case ItemType.Int32: // 6            archive.WriteInt((int)val);            break;          case ItemType.UInt32: // 7            archive.WriteUInt((uint)val);            break;          case ItemType.Int64: // 8            archive.WriteInt64((Int64)val);            break;          case ItemType.Single: // 9            archive.WriteSingle((float)val);            break;          case ItemType.Double: // 10            archive.WriteDouble((double)val);            break;          case ItemType.Guid: // 11            archive.WriteGuid((Guid)val);            break;          case ItemType.String: // 12            archive.WriteString((String)val);            break;          case ItemType.ArrayBool: // 13            archive.WriteBoolArray((IEnumerable<bool>)val);            break;          case ItemType.ArrayByte: // 14            archive.WriteByteArray((IEnumerable<byte>)val);            break;          case ItemType.ArraySByte: // 15            archive.WriteSByteArray((IEnumerable<sbyte>)val);            break;          case ItemType.ArrayShort: // 16            archive.WriteShortArray((IEnumerable<short>)val);            break;          case ItemType.ArrayInt32: // 17            archive.WriteIntArray((IEnumerable<int>)val);            break;          case ItemType.ArraySingle: // 18            archive.WriteSingleArray((IEnumerable<float>)val);            break;          case ItemType.ArrayDouble: // 19            archive.WriteDoubleArray((IEnumerable<double>)val);            break;          case ItemType.ArrayGuid: // 20            archive.WriteGuidArray((IEnumerable<Guid>)val);            break;          case ItemType.ArrayString: // 21            archive.WriteStringArray((IEnumerable<string>)val);            break;          case ItemType.Color: // 22            archive.WriteColor((System.Drawing.Color)val);            break;          case ItemType.Point: // 23            archive.WritePoint((System.Drawing.Point)val);            break;          case ItemType.PointF: // 24            archive.WritePointF((System.Drawing.PointF)val);            break;          case ItemType.Rectangle: // 25            archive.WriteRectangle((System.Drawing.Rectangle)val);            break;          case ItemType.RectangleF: // 26            archive.WriteRectangleF((System.Drawing.RectangleF)val);            break;          case ItemType.Size: // 27            archive.WriteSize((System.Drawing.Size)val);            break;          case ItemType.SizeF: // 28            archive.WriteSizeF((System.Drawing.SizeF)val);            break;          case ItemType.Font: // 29  #if !MOBILE_BUILD            archive.WriteFont((System.Drawing.Font)val);  #endif            break;          case ItemType.Interval: // 30            archive.WriteInterval((Geometry.Interval)val);            break;          case ItemType.Point2d: // 31            archive.WritePoint2d((Geometry.Point2d)val);            break;          case ItemType.Point3d: // 32            archive.WritePoint3d((Geometry.Point3d)val);            break;          case ItemType.Point4d: // 33            archive.WritePoint4d((Geometry.Point4d)val);            break;          case ItemType.Vector2d: // 34            archive.WriteVector2d((Geometry.Vector2d)val);            break;          case ItemType.Vector3d: // 35            archive.WriteVector3d((Geometry.Vector3d)val);            break;          case ItemType.BoundingBox: // 36            archive.WriteBoundingBox((Geometry.BoundingBox)val);            break;          case ItemType.Ray3d: // 37            archive.WriteRay3d((Geometry.Ray3d)val);            break;          case ItemType.PlaneEquation: // 38            archive.WritePlaneEquation((double[])val);            break;          case ItemType.Xform: // 39            archive.WriteTransform((Geometry.Transform)val);            break;          case ItemType.Plane: // 40            archive.WritePlane((Geometry.Plane)val);            break;          case ItemType.Line: // 41            archive.WriteLine((Geometry.Line)val);            break;          case ItemType.Point3f: // 42            archive.WritePoint3f((Geometry.Point3f)val);            break;          case ItemType.Vector3f: // 43            archive.WriteVector3f((Geometry.Vector3f)val);            break;          case ItemType.OnBinaryArchiveDictionary: // 44            ArchivableDictionary dict = (ArchivableDictionary)val;            dict.Write(archive);            break;          case ItemType.OnObject: // 45            break; // skip          case ItemType.OnMeshParameters: // 46            archive.WriteMeshingParameters((Geometry.MeshingParameters)val);            break;          case ItemType.OnGeometry: // 47            archive.WriteGeometry((Geometry.GeometryBase)val);            break;          case ItemType.OnObjRef: //48  #if RHINO_SDK            archive.WriteObjRef((DocObjects.ObjRef)val);  #endif            break;          case ItemType.ArrayObjRef: //49  #if RHINO_SDK            archive.WriteObjRefArray((IEnumerable<DocObjects.ObjRef>)val);  #endif            break;        }
Missing Default,Rhino.Geometry.Collections,MeshVertexList,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_mesh.cs,Remove,The following switch statement is missing a default case: switch (k)          {            case 0:              face.A = face.B;              face.B = face.C;              face.C = face.D;              break;              case 1:              face.B = face.C;              face.C = face.D;              break;              case 2:              face.C = face.D;              break;              case 3:              face.D = face.C;              break;          }
Missing Default,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,ReadAndSetItemType,The following switch statement is missing a default case: switch(it)        {          case ItemType.Bool: //1            {              bool val = archive.ReadBool();              rc = Set(key' val);            }            break;          case ItemType.Byte: //2            {              byte val = archive.ReadByte();              rc = Set(key' val);            }            break;            case ItemType.SByte: //3            {              sbyte val = archive.ReadSByte();              rc = Set(key' val);            }            break;          case ItemType.Short: //4            {              short val = archive.ReadShort();              rc = Set(key' val);            }            break;          case ItemType.UShort: //5            {              ushort val = archive.ReadUShort();              rc = Set(key' val);            }            break;          case ItemType.Int32: //6            {              int val = archive.ReadInt();              rc = Set(key' val);            }            break;          case ItemType.UInt32: //7            {              uint val = archive.ReadUInt();              rc = Set(key' val);            }            break;          case ItemType.Int64: //8            {              Int64 val=archive.ReadInt64();              rc = Set(key' val);            }            break;          case ItemType.Single: //9            {              float val = archive.ReadSingle();              rc = Set(key' val);            }            break;          case ItemType.Double: //10            {              double val = archive.ReadDouble();              rc = Set(key' val);            }            break;          case ItemType.Guid: //11            {              Guid val = archive.ReadGuid();              rc = Set(key' val);            }            break;          case ItemType.String: //12            {              string val = archive.ReadString();              rc = Set(key' val);            }            break;          case ItemType.ArrayBool: //13            {              bool[] arr = archive.ReadBoolArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayByte: //14            {              byte[] arr = archive.ReadByteArray();              rc = Set(key' arr);            }            break;          case ItemType.ArraySByte: //15            {              sbyte[] arr = archive.ReadSByteArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayShort: //16            {              short[] arr = archive.ReadShortArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayInt32: //17            {              int[] arr = archive.ReadIntArray();              rc = Set(key' arr);            }            break;          case ItemType.ArraySingle: //18            {              float[] arr = archive.ReadSingleArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayDouble: //19            {              double[] arr = archive.ReadDoubleArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayGuid: //20            {              Guid[] arr = archive.ReadGuidArray();              rc = Set(key' arr);            }            break;          case ItemType.ArrayString: //21            {              string[] arr = archive.ReadStringArray();              rc = Set(key' arr);            }            break;          case ItemType.Color: //22            {              System.Drawing.Color val = archive.ReadColor();              rc = Set(key' val);            }            break;          case ItemType.Point: //23            {              System.Drawing.Point val = archive.ReadPoint();              rc = Set(key' val);            }            break;          case ItemType.PointF: //24            {              System.Drawing.PointF val = archive.ReadPointF();              rc = Set(key' val);            }            break;          case ItemType.Rectangle: //25            {              System.Drawing.Rectangle val = archive.ReadRectangle();              rc = Set(key' val);            }            break;          case ItemType.RectangleF: //26            {              System.Drawing.RectangleF val = archive.ReadRectangleF();              rc = Set(key' val);            }            break;          case ItemType.Size: //27            {              System.Drawing.Size val = archive.ReadSize();              rc = Set(key' val);            }            break;          case ItemType.SizeF: //28            {              System.Drawing.SizeF val = archive.ReadSizeF();              rc = Set(key' val);            }            break;          case ItemType.Font: //29            {  #if !MOBILE_BUILD              System.Drawing.Font val = archive.ReadFont();              rc = Set(key' val);  #endif            }            break;          case ItemType.Interval: //30            {              Geometry.Interval val = archive.ReadInterval();              rc = Set(key' val);            }            break;          case ItemType.Point2d: //31            {              Geometry.Point2d val = archive.ReadPoint2d();              rc = Set(key' val);            }            break;          case ItemType.Point3d: //32            {              Geometry.Point3d val = archive.ReadPoint3d();              rc = Set(key' val);            }            break;          case ItemType.Point4d: //33            {              Geometry.Point4d val = archive.ReadPoint4d();              rc = Set(key' val);            }            break;          case ItemType.Vector2d: //34            {              Geometry.Vector2d val = archive.ReadVector2d();              rc = Set(key' val);            }            break;          case ItemType.Vector3d: //35            {              Geometry.Vector3d val = archive.ReadVector3d();              rc = Set(key' val);            }            break;          case ItemType.BoundingBox: //36            {              Geometry.BoundingBox val = archive.ReadBoundingBox();                rc = Set(key' val);            }            break;          case ItemType.Ray3d: //37            {              Geometry.Ray3d val = archive.ReadRay3d();              rc = Set(key' val);            }            break;          case ItemType.PlaneEquation: //38            {              double[] val = archive.ReadPlaneEquation();              rc = SetPlaneEquation(key' val);            }            break;          case ItemType.Xform: //39            {              Geometry.Transform val = archive.ReadTransform();              rc = Set(key' val);            }            break;          case ItemType.Plane: //40            {              Geometry.Plane val = archive.ReadPlane();              rc = Set(key' val);            }            break;          case ItemType.Line: //41            {              Geometry.Line val = archive.ReadLine();              rc = Set(key' val);            }            break;          case ItemType.Point3f: //42            {              Geometry.Point3f val = archive.ReadPoint3f();              rc = Set(key' val);            }            break;          case ItemType.Vector3f: //43            {              Geometry.Vector3f val = archive.ReadVector3f();              rc = Set(key' val);            }            break;          case ItemType.OnBinaryArchiveDictionary: //44            {              ArchivableDictionary dict = Read(archive);              if( dict != null )                rc = Set(key' dict);            }            break;          case ItemType.OnObject: //45          case ItemType.OnGeometry: //47            {              int read_rc = 0;              IntPtr pObject = UnsafeNativeMethods.ON_BinaryArchive_ReadObject(archive.NonConstPointer()' ref read_rc);              Geometry.GeometryBase geom = Geometry.GeometryBase.CreateGeometryHelper(pObject' null);              if( geom!=null )              {                rc = Set(key' geom);              }              else              {                // some other ON_Object                UnsafeNativeMethods.ON_Object_Delete(pObject);              }            }            break;          case ItemType.OnMeshParameters: //46            {              Geometry.MeshingParameters val = archive.ReadMeshingParameters();              rc = Set(key' val);            }            break;          case ItemType.OnObjRef: //48            {  #if RHINO_SDK              DocObjects.ObjRef val = archive.ReadObjRef();              rc = Set(key' val);  #endif            }            break;          case ItemType.ArrayObjRef: //49            {  #if RHINO_SDK              DocObjects.ObjRef[] val = archive.ReadObjRefArray();              rc = Set(key' val);  #endif            }            break;        }
Missing Default,Rhino.Collections,ArchivableDictionary,C:\repos\mcneel_rhinocommon\dotnet\opennurbs\opennurbs_archive.cs,WriteItem,The following switch statement is missing a default case: switch (it)        {          case ItemType.Bool: // 1            archive.WriteBool((bool)val);            break;          case ItemType.Byte: // 2            archive.WriteByte((byte)val);            break;          case ItemType.SByte: // 3            archive.WriteSByte((sbyte)val);            break;          case ItemType.Short: // 4            archive.WriteShort((short)val);            break;          case ItemType.UShort: // 5            archive.WriteUShort((ushort)val);            break;          case ItemType.Int32: // 6            archive.WriteInt((int)val);            break;          case ItemType.UInt32: // 7            archive.WriteUInt((uint)val);            break;          case ItemType.Int64: // 8            archive.WriteInt64((Int64)val);            break;          case ItemType.Single: // 9            archive.WriteSingle((float)val);            break;          case ItemType.Double: // 10            archive.WriteDouble((double)val);            break;          case ItemType.Guid: // 11            archive.WriteGuid((Guid)val);            break;          case ItemType.String: // 12            archive.WriteString((String)val);            break;          case ItemType.ArrayBool: // 13            archive.WriteBoolArray((IEnumerable<bool>)val);            break;          case ItemType.ArrayByte: // 14            archive.WriteByteArray((IEnumerable<byte>)val);            break;          case ItemType.ArraySByte: // 15            archive.WriteSByteArray((IEnumerable<sbyte>)val);            break;          case ItemType.ArrayShort: // 16            archive.WriteShortArray((IEnumerable<short>)val);            break;          case ItemType.ArrayInt32: // 17            archive.WriteIntArray((IEnumerable<int>)val);            break;          case ItemType.ArraySingle: // 18            archive.WriteSingleArray((IEnumerable<float>)val);            break;          case ItemType.ArrayDouble: // 19            archive.WriteDoubleArray((IEnumerable<double>)val);            break;          case ItemType.ArrayGuid: // 20            archive.WriteGuidArray((IEnumerable<Guid>)val);            break;          case ItemType.ArrayString: // 21            archive.WriteStringArray((IEnumerable<string>)val);            break;          case ItemType.Color: // 22            archive.WriteColor((System.Drawing.Color)val);            break;          case ItemType.Point: // 23            archive.WritePoint((System.Drawing.Point)val);            break;          case ItemType.PointF: // 24            archive.WritePointF((System.Drawing.PointF)val);            break;          case ItemType.Rectangle: // 25            archive.WriteRectangle((System.Drawing.Rectangle)val);            break;          case ItemType.RectangleF: // 26            archive.WriteRectangleF((System.Drawing.RectangleF)val);            break;          case ItemType.Size: // 27            archive.WriteSize((System.Drawing.Size)val);            break;          case ItemType.SizeF: // 28            archive.WriteSizeF((System.Drawing.SizeF)val);            break;          case ItemType.Font: // 29  #if !MOBILE_BUILD            archive.WriteFont((System.Drawing.Font)val);  #endif            break;          case ItemType.Interval: // 30            archive.WriteInterval((Geometry.Interval)val);            break;          case ItemType.Point2d: // 31            archive.WritePoint2d((Geometry.Point2d)val);            break;          case ItemType.Point3d: // 32            archive.WritePoint3d((Geometry.Point3d)val);            break;          case ItemType.Point4d: // 33            archive.WritePoint4d((Geometry.Point4d)val);            break;          case ItemType.Vector2d: // 34            archive.WriteVector2d((Geometry.Vector2d)val);            break;          case ItemType.Vector3d: // 35            archive.WriteVector3d((Geometry.Vector3d)val);            break;          case ItemType.BoundingBox: // 36            archive.WriteBoundingBox((Geometry.BoundingBox)val);            break;          case ItemType.Ray3d: // 37            archive.WriteRay3d((Geometry.Ray3d)val);            break;          case ItemType.PlaneEquation: // 38            archive.WritePlaneEquation((double[])val);            break;          case ItemType.Xform: // 39            archive.WriteTransform((Geometry.Transform)val);            break;          case ItemType.Plane: // 40            archive.WritePlane((Geometry.Plane)val);            break;          case ItemType.Line: // 41            archive.WriteLine((Geometry.Line)val);            break;          case ItemType.Point3f: // 42            archive.WritePoint3f((Geometry.Point3f)val);            break;          case ItemType.Vector3f: // 43            archive.WriteVector3f((Geometry.Vector3f)val);            break;          case ItemType.OnBinaryArchiveDictionary: // 44            ArchivableDictionary dict = (ArchivableDictionary)val;            dict.Write(archive);            break;          case ItemType.OnObject: // 45            break; // skip          case ItemType.OnMeshParameters: // 46            archive.WriteMeshingParameters((Geometry.MeshingParameters)val);            break;          case ItemType.OnGeometry: // 47            archive.WriteGeometry((Geometry.GeometryBase)val);            break;          case ItemType.OnObjRef: //48  #if RHINO_SDK            archive.WriteObjRef((DocObjects.ObjRef)val);  #endif            break;          case ItemType.ArrayObjRef: //49  #if RHINO_SDK            archive.WriteObjRefArray((IEnumerable<DocObjects.ObjRef>)val);  #endif            break;        }
