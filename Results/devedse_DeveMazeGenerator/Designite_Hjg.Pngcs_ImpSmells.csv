Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,Cyclomatic complexity of the method is 8
Complex Method,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,Cyclomatic complexity of the method is 42
Complex Method,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,Cyclomatic complexity of the method is 17
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,UnfilterRow,Cyclomatic complexity of the method is 18
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,Cyclomatic complexity of the method is 9
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,Cyclomatic complexity of the method is 8
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadChunk,Cyclomatic complexity of the method is 10
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowsInt,Cyclomatic complexity of the method is 9
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowsByte,Cyclomatic complexity of the method is 9
Complex Method,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,Cyclomatic complexity of the method is 10
Complex Method,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,Cyclomatic complexity of the method is 9
Complex Method,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,Cyclomatic complexity of the method is 9
Complex Method,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,FilterRow,Cyclomatic complexity of the method is 18
Complex Method,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,CopyChunks,Cyclomatic complexity of the method is 16
Long Parameter List,Hjg.Pngcs.Chunks,PngMetadata,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngMetadata.cs,SetTimeYMDHMS,The method has 6 parameters.
Long Parameter List,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,SetChromaticities,The method has 8 parameters.
Long Parameter List,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,SetYMDHMS,The method has 6 parameters.
Long Parameter List,Hjg.Pngcs,ImageLines,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLines.cs,ImageLines,The method has 6 parameters.
Long Parameter List,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,setPreference,The method has 5 parameters.
Long Parameter List,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The method has 5 parameters.
Long Parameter List,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The method has 6 parameters.
Long Parameter List,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,ImageLine,The method has 5 parameters.
Long Parameter List,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,SetPixel,The method has 6 parameters.
Long Parameter List,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,SetPixel,The method has 5 parameters.
Long Parameter List,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Interpol,The method has 6 parameters.
Long Statement,Hjg.Pngcs.Chunks,PngChunk,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunk.cs,mustGoBeforeIDAT,The length of the statement  "	return oc == ChunkOrderingConstraint.BEFORE_IDAT || oc == ChunkOrderingConstraint.BEFORE_PLTE_AND_IDAT || oc == ChunkOrderingConstraint.AFTER_PLTE_BEFORE_IDAT; " is 159.
Long Statement,Hjg.Pngcs.Chunks,PngChunkICCP,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkICCP.cs,CreateRawChunk,The length of the statement  "	System.Array.Copy ((Array)(Hjg.Pngcs.Chunks.ChunkHelper.ToBytes (profileName))' 0' (Array)(c.Data)' 0' profileName.Length); " is 123.
Long Statement,Hjg.Pngcs,ImageLines,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLines.cs,GetImageLineAtMatrixRow,The length of the statement  "	ImageLine imline = sampleType == ImageLine.ESampleType.INT ? new ImageLine (ImgInfo' sampleType' SamplesUnpacked' Scanlines [mrow]' null) : new ImageLine (ImgInfo' sampleType' SamplesUnpacked' null' ScanlinesB [mrow]); " is 218.
Long Statement,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ToString,The length of the statement  "	return "ImageInfo [cols=" + Cols + "' rows=" + Rows + "' bitDepth=" + BitDepth + "' channels=" + Channels + "' bitspPixel=" + BitspPixel + "' bytesPixel=" + BytesPixel + "' bytesPerRow=" + BytesPerRow + "' samplesPerRow=" + SamplesPerRow + "' samplesPerRowP=" + SamplesPerRowPacked + "' alpha=" + Alpha + "' greyscale=" + Greyscale + "' indexed=" + Indexed + "' packed=" + Packed + "]"; " is 386.
Long Statement,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The length of the statement  "	return alpha ? ToARGB8 (buff [offset++]' buff [offset++]' buff [offset++]' buff [offset]) : ToARGB8 (buff [offset++]' buff [offset++]' buff [offset]); " is 150.
Long Statement,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The length of the statement  "	return alpha ? ToARGB8 (buff [offset++]' buff [offset++]' buff [offset++]' buff [offset]) : ToARGB8 (buff [offset++]' buff [offset++]' buff [offset]); " is 150.
Long Statement,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4fromBytes,The length of the statement  "	return ((b [offset] & 0xff) << 24) | ((b [offset + 1] & 0xff) << 16) | ((b [offset + 2] & 0xff) << 8) | (b [offset + 3] & 0xff); " is 128.
Long Statement,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt4,The length of the statement  "	//Console.WriteLine("writing int " + n + " b=" + (sbyte)temp[0] + "'" + (sbyte)temp[1] + "'" + (sbyte)temp[2] + "'" + (sbyte)temp[3]); " is 134.
Long Statement,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadChunk,The length of the statement  "		throw new PngjInputException ("Maximum total bytes to read exceeeded: " + MaxTotalBytesRead + " offset:" + offset + " clen=" + clen); " is 133.
Long Statement,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadChunk,The length of the statement  "		skip = skip || (SkipChunkMaxSize > 0 && clen >= SkipChunkMaxSize) || skipChunkIdsSet.ContainsKey (chunkidstr) || (MaxBytesMetadata > 0 && clen > MaxBytesMetadata - bytesChunksLoaded) || !ChunkHelper.ShouldLoad (chunkidstr' ChunkLoadBehaviour); " is 243.
Long Statement,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowInt,The length of the statement  "		Array.Copy (deinterlacer.getImageInt () [nrow]' 0' buffer' 0' unpackedMode ? ImgInfo.SamplesPerRow : ImgInfo.SamplesPerRowPacked); " is 130.
Long Statement,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowByte,The length of the statement  "		Array.Copy (deinterlacer.getImageByte () [nrow]' 0' buffer' 0' unpackedMode ? ImgInfo.SamplesPerRow : ImgInfo.SamplesPerRowPacked); " is 131.
Long Statement,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The length of the statement  "		throw new PngjInputException ("Reading IDAT: Maximum total bytes to read exceeeded: " + MaxTotalBytesRead + " offset:" + offset); " is 129.
Long Statement,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadSkippingAllRows,The length of the statement  "		throw new PngjInputException ("Reading IDAT: Maximum total bytes to read exceeeded: " + MaxTotalBytesRead + " offset:" + offset); " is 129.
Long Statement,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,init,The length of the statement  "	datStreamDeflated = ZlibStreamFactory.createZlibOutputStream (datStream' this.CompLevel' this.CompressionStrategy' true); " is 121.
Long Statement,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,FilterRowPaeth,The length of the statement  "		rowbfilter [i] = (byte)(rowb [i] - PngHelperInternal.FilterPaethPredictor (j > 0 ? rowb [j] : (byte)0' rowbprev [i]' j > 0 ? rowbprev [j] : (byte)0)); " is 150.
Long Statement,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,CopyChunks,The length of the statement  "			if (ChunkHelper.maskMatch (copy_mask' ChunkCopyBehaviour.COPY_ALMOSTALL) && !(ChunkHelper.IsUnknown (chunk) || text || chunk.Id.Equals (ChunkHelper.hIST) || chunk.Id.Equals (ChunkHelper.tIME))) " is 193.
Complex Conditional,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The conditional expression  "(imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8"  is complex.
Complex Conditional,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The conditional expression  "b1 == -1 || b2 == -1 || b3 == -1 || b4 == -1"  is complex.
Complex Conditional,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The conditional expression  "ihdr.Colormodel < 0 || ihdr.Colormodel > 6 || ihdr.Colormodel == 1 || ihdr.Colormodel == 5"  is complex.
Complex Conditional,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The conditional expression  "ihdr.Bitspc != 1 && ihdr.Bitspc != 2 && ihdr.Bitspc != 4 && ihdr.Bitspc != 8 && ihdr.Bitspc != 16"  is complex.
Complex Conditional,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The conditional expression  "nrow < 0 || nrow > deinterlacer.getRows () || (nrow != 0 && nrow != deinterlacer.getCurrRowSubimg () + 1)"  is complex.
Complex Conditional,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The conditional expression  "(rowNum == ImgInfo.Rows - 1 && !interlaced) || (interlaced && deinterlacer.isAtLastRow ())"  is complex.
Complex Conditional,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,CopyChunks,The conditional expression  "ChunkHelper.maskMatch (copy_mask' ChunkCopyBehaviour.COPY_ALMOSTALL) && !(ChunkHelper.IsUnknown (chunk) || text || chunk.Id.Equals (ChunkHelper.hIST) || chunk.Id.Equals (ChunkHelper.tIME))"  is complex.
Empty Catch Block,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastAndClose,The method has an empty catch block.
Empty Catch Block,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,Close,The method has an empty catch block.
Magic Number,Ar.Com.Hjg.Pngcs,ChunkReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ChunkReader.cs,ChunkReader,The following statement contains a magic number: if (mode == null || id.Length != 4 || clen < 0)  	throw new PngjExceptionInternal ("Bad chunk paramenters: " + mode);  
Magic Number,Hjg.Pngcs.Chunks,ChunkHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunkHelper.cs,IsSafeToCopy,The following statement contains a magic number: return (!Char.IsUpper (id [3]));  
Magic Number,Hjg.Pngcs.Chunks,ChunkHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunkHelper.cs,shovelInToOut,The following statement contains a magic number: while ((len = inx.Read (buffer' 0' 1024)) > 0) {  	outx.Write (buffer' 0' len);  }  
Magic Number,Hjg.Pngcs.Chunks,ChunkRaw,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunkRaw.cs,ComputeCrc,The following statement contains a magic number: crcengine.Update (IdBytes' 0' 4);  
Magic Number,Hjg.Pngcs.Chunks,ChunkRaw,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunkRaw.cs,WriteChunk,The following statement contains a magic number: if (IdBytes.Length != 4)  	throw new PngjOutputException ("bad chunkid [" + Hjg.Pngcs.Chunks.ChunkHelper.ToString (IdBytes) + "]");  
Magic Number,Hjg.Pngcs.Chunks,ChunkRaw,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunkRaw.cs,ReadChunkData,The following statement contains a magic number: return Len + 4;  
Magic Number,Hjg.Pngcs.Chunks,ChunksListForWrite,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunksListForWrite.cs,shouldWrite,The following statement contains a magic number: if (currentGroup % 2 == 0)  	throw new PngjOutputException ("bad chunk group?");  
Magic Number,Hjg.Pngcs.Chunks,PngChunkOFFS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkOFFS.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes ((int)posY' c.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkOFFS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkOFFS.cs,CreateRawChunk,The following statement contains a magic number: c.Data [8] = (byte)units;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkOFFS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkOFFS.cs,ParseFromRaw,The following statement contains a magic number: if (chunk.Len != 9)  	throw new PngjException ("bad chunk length " + chunk);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkOFFS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkOFFS.cs,ParseFromRaw,The following statement contains a magic number: posY = PngHelperInternal.ReadInt4fromBytes (chunk.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkOFFS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkOFFS.cs,ParseFromRaw,The following statement contains a magic number: units = PngHelperInternal.ReadInt1fromByte (chunk.Data' 8);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0; n < nentries; n++) {  	for (int i = 0; i < 4; i++) {  		if (SampleDepth == 8)  			PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  		else  			PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  	}  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0; n < nentries; n++) {  	for (int i = 0; i < 4; i++) {  		if (SampleDepth == 8)  			PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  		else  			PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  	}  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0; n < nentries; n++) {  	for (int i = 0; i < 4; i++) {  		if (SampleDepth == 8)  			PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  		else  			PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  	}  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0; n < nentries; n++) {  	for (int i = 0; i < 4; i++) {  		if (SampleDepth == 8)  			PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  		else  			PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  	}  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0; n < nentries; n++) {  	for (int i = 0; i < 4; i++) {  		if (SampleDepth == 8)  			PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  		else  			PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  	}  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0; n < nentries; n++) {  	for (int i = 0; i < 4; i++) {  		if (SampleDepth == 8)  			PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  		else  			PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  	}  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (SampleDepth == 8)  		PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  	else  		PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (SampleDepth == 8)  		PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  	else  		PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (SampleDepth == 8)  		PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  	else  		PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (SampleDepth == 8)  		PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  	else  		PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: if (SampleDepth == 8)  	PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  else  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: if (SampleDepth == 8)  	PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  else  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: if (SampleDepth == 8)  	PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  else  	PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteByte (ba' (byte)Palette [n * 5 + i]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + i]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt2 (ba' Palette [n * 5 + 4]);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: if (t <= 0 || t > c.Data.Length - 2)  	throw new PngjException ("bad sPLT chunk: no separator found");  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: t += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: Palette = new int[nentries * 5];  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < nentries; i++) {  	if (SampleDepth == 8) {  		r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	} else {  		r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  	}  	f = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	Palette [ne++] = r;  	Palette [ne++] = g;  	Palette [ne++] = b;  	Palette [ne++] = a;  	Palette [ne++] = f;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < nentries; i++) {  	if (SampleDepth == 8) {  		r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	} else {  		r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  	}  	f = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	Palette [ne++] = r;  	Palette [ne++] = g;  	Palette [ne++] = b;  	Palette [ne++] = a;  	Palette [ne++] = f;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < nentries; i++) {  	if (SampleDepth == 8) {  		r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	} else {  		r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  	}  	f = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	Palette [ne++] = r;  	Palette [ne++] = g;  	Palette [ne++] = b;  	Palette [ne++] = a;  	Palette [ne++] = f;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < nentries; i++) {  	if (SampleDepth == 8) {  		r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	} else {  		r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  	}  	f = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	Palette [ne++] = r;  	Palette [ne++] = g;  	Palette [ne++] = b;  	Palette [ne++] = a;  	Palette [ne++] = f;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < nentries; i++) {  	if (SampleDepth == 8) {  		r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	} else {  		r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  	}  	f = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	Palette [ne++] = r;  	Palette [ne++] = g;  	Palette [ne++] = b;  	Palette [ne++] = a;  	Palette [ne++] = f;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < nentries; i++) {  	if (SampleDepth == 8) {  		r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  		a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	} else {  		r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  		a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  		t += 2;  	}  	f = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	Palette [ne++] = r;  	Palette [ne++] = g;  	Palette [ne++] = b;  	Palette [ne++] = a;  	Palette [ne++] = f;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: if (SampleDepth == 8) {  	r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  } else {  	r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: if (SampleDepth == 8) {  	r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  } else {  	r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: if (SampleDepth == 8) {  	r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  } else {  	r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: if (SampleDepth == 8) {  	r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  } else {  	r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: if (SampleDepth == 8) {  	r = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	g = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	b = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  	a = PngHelperInternal.ReadInt1fromByte (c.Data' t++);  } else {  	r = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	g = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	b = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  	a = PngHelperInternal.ReadInt2fromBytes (c.Data' t);  	t += 2;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: t += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: t += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: t += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: t += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,ParseFromRaw,The following statement contains a magic number: t += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSPLT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSPLT.cs,GetNentries,The following statement contains a magic number: return Palette.Length / 5;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkHIST,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkHIST.cs,CreateRawChunk,The following statement contains a magic number: c = createEmptyChunk (hist.Length * 2' true);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkHIST,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkHIST.cs,CreateRawChunk,The following statement contains a magic number: for (int i = 0; i < hist.Length; i++) {  	PngHelperInternal.WriteInt2tobytes (hist [i]' c.Data' i * 2);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkHIST,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkHIST.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt2tobytes (hist [i]' c.Data' i * 2);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkHIST,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkHIST.cs,ParseFromRaw,The following statement contains a magic number: for (int i = 0; i < hist.Length; i++) {  	hist [i] = PngHelperInternal.ReadInt2fromBytes (c.Data' i * 2);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkHIST,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkHIST.cs,ParseFromRaw,The following statement contains a magic number: hist [i] = PngHelperInternal.ReadInt2fromBytes (c.Data' i * 2);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: c = createEmptyChunk (32' true);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (whitey)' c.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (redx)' c.Data' 8);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (redy)' c.Data' 12);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (greenx)' c.Data' 16);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (greeny)' c.Data' 20);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (bluex)' c.Data' 24);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,CreateRawChunk,The following statement contains a magic number: PngHelperInternal.WriteInt4tobytes (PngHelperInternal.DoubleToInt100000 (bluey)' c.Data' 28);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: if (c.Len != 32)  	throw new PngjException ("bad chunk " + c);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: whitey = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 4));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: redx = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 8));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: redy = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 12));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: greenx = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 16));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: greeny = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 20));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: bluex = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 24));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkCHRM,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkCHRM.cs,ParseFromRaw,The following statement contains a magic number: bluey = PngHelperInternal.IntToDouble100000 (PngHelperInternal.ReadInt4fromBytes (c.Data' 28));  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	Graysb = PngHelperInternal.ReadInt1fromByte (c.Data' 0);  	if (ImgInfo.Alpha)  		Alphasb = PngHelperInternal.ReadInt1fromByte (c.Data' 1);  } else {  	Redsb = PngHelperInternal.ReadInt1fromByte (c.Data' 0);  	Greensb = PngHelperInternal.ReadInt1fromByte (c.Data' 1);  	Bluesb = PngHelperInternal.ReadInt1fromByte (c.Data' 2);  	if (ImgInfo.Alpha)  		Alphasb = PngHelperInternal.ReadInt1fromByte (c.Data' 3);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	Graysb = PngHelperInternal.ReadInt1fromByte (c.Data' 0);  	if (ImgInfo.Alpha)  		Alphasb = PngHelperInternal.ReadInt1fromByte (c.Data' 1);  } else {  	Redsb = PngHelperInternal.ReadInt1fromByte (c.Data' 0);  	Greensb = PngHelperInternal.ReadInt1fromByte (c.Data' 1);  	Bluesb = PngHelperInternal.ReadInt1fromByte (c.Data' 2);  	if (ImgInfo.Alpha)  		Alphasb = PngHelperInternal.ReadInt1fromByte (c.Data' 3);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,ParseFromRaw,The following statement contains a magic number: Bluesb = PngHelperInternal.ReadInt1fromByte (c.Data' 2);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Alpha)  	Alphasb = PngHelperInternal.ReadInt1fromByte (c.Data' 3);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,ParseFromRaw,The following statement contains a magic number: Alphasb = PngHelperInternal.ReadInt1fromByte (c.Data' 3);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	c.Data [0] = (byte)Graysb;  	if (ImgInfo.Alpha)  		c.Data [1] = (byte)Alphasb;  } else {  	c.Data [0] = (byte)Redsb;  	c.Data [1] = (byte)Greensb;  	c.Data [2] = (byte)Bluesb;  	if (ImgInfo.Alpha)  		c.Data [3] = (byte)Alphasb;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	c.Data [0] = (byte)Graysb;  	if (ImgInfo.Alpha)  		c.Data [1] = (byte)Alphasb;  } else {  	c.Data [0] = (byte)Redsb;  	c.Data [1] = (byte)Greensb;  	c.Data [2] = (byte)Bluesb;  	if (ImgInfo.Alpha)  		c.Data [3] = (byte)Alphasb;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,CreateRawChunk,The following statement contains a magic number: c.Data [2] = (byte)Bluesb;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Alpha)  	c.Data [3] = (byte)Alphasb;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkSBIT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkSBIT.cs,CreateRawChunk,The following statement contains a magic number: c.Data [3] = (byte)Alphasb;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	c = createEmptyChunk (2' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (gray' c.Data' 0);  } else if (ImgInfo.Indexed) {  	c = createEmptyChunk (1' true);  	c.Data [0] = (byte)paletteIndex;  } else {  	c = createEmptyChunk (6' true);  	PngHelperInternal.WriteInt2tobytes (red' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (green' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (blue' c.Data' 0);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	c = createEmptyChunk (2' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (gray' c.Data' 0);  } else if (ImgInfo.Indexed) {  	c = createEmptyChunk (1' true);  	c.Data [0] = (byte)paletteIndex;  } else {  	c = createEmptyChunk (6' true);  	PngHelperInternal.WriteInt2tobytes (red' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (green' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (blue' c.Data' 0);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,CreateRawChunk,The following statement contains a magic number: c = createEmptyChunk (2' true);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Indexed) {  	c = createEmptyChunk (1' true);  	c.Data [0] = (byte)paletteIndex;  } else {  	c = createEmptyChunk (6' true);  	PngHelperInternal.WriteInt2tobytes (red' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (green' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (blue' c.Data' 0);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,CreateRawChunk,The following statement contains a magic number: c = createEmptyChunk (6' true);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	gray = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  } else if (ImgInfo.Indexed) {  	paletteIndex = (int)(c.Data [0] & 0xff);  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	gray = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  } else if (ImgInfo.Indexed) {  	paletteIndex = (int)(c.Data [0] & 0xff);  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Indexed) {  	paletteIndex = (int)(c.Data [0] & 0xff);  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Indexed) {  	paletteIndex = (int)(c.Data [0] & 0xff);  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,ParseFromRaw,The following statement contains a magic number: green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkBKGD,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkBKGD.cs,ParseFromRaw,The following statement contains a magic number: blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkGAMA,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkGAMA.cs,ParseFromRaw,The following statement contains a magic number: if (chunk.Len != 4)  	throw new PngjException ("bad chunk " + chunk);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkICCP,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkICCP.cs,CreateRawChunk,The following statement contains a magic number: System.Array.Copy ((Array)(compressedProfile)' 0' (Array)(c.Data)' profileName.Length + 2' compressedProfile.Length);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkICCP,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkICCP.cs,ParseFromRaw,The following statement contains a magic number: System.Array.Copy ((Array)(chunk.Data)' pos0 + 2' (Array)(compressedProfile)' 0' compdatasize);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkIHDR,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkIHDR.cs,CreateRawChunk,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkIHDR,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkIHDR.cs,CreateRawChunk,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkIHDR,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkIHDR.cs,ParseFromRaw,The following statement contains a magic number: if (c.Len != 13)  	throw new PngjException ("Bad IDHR len " + c.Len);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: for (int k = 0; k < c.Data.Length; k++) {  	if (c.Data [k] != 0)  		continue;  	nullsIdx [nullsFound] = k;  	nullsFound++;  	if (nullsFound == 1)  		k += 2;  	if (nullsFound == 3)  		break;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: for (int k = 0; k < c.Data.Length; k++) {  	if (c.Data [k] != 0)  		continue;  	nullsIdx [nullsFound] = k;  	nullsFound++;  	if (nullsFound == 1)  		k += 2;  	if (nullsFound == 3)  		break;  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: if (nullsFound == 1)  	k += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: k += 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: if (nullsFound == 3)  	break;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: if (nullsFound != 3)  	throw new PngjException ("Bad formed PngChunkITXT chunk");  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: translatedTag = ChunkHelper.ToStringUTF8 (c.Data' nullsIdx [1] + 1' nullsIdx [2] - nullsIdx [1] - 1);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkITXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkITXT.cs,ParseFromRaw,The following statement contains a magic number: i = nullsIdx [2] + 1;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,CreateRawChunk,The following statement contains a magic number: Hjg.Pngcs.PngHelperInternal.WriteInt4tobytes ((int)PixelsxUnitY' c.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,CreateRawChunk,The following statement contains a magic number: c.Data [8] = (byte)Units;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,ParseFromRaw,The following statement contains a magic number: if (chunk.Len != 9)  	throw new PngjException ("bad chunk length " + chunk);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,ParseFromRaw,The following statement contains a magic number: PixelsxUnitY = Hjg.Pngcs.PngHelperInternal.ReadInt4fromBytes (chunk.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,ParseFromRaw,The following statement contains a magic number: Units = Hjg.Pngcs.PngHelperInternal.ReadInt1fromByte (chunk.Data' 8);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,GetAsDpi2,The following statement contains a magic number: return new double[] {  	((double)PixelsxUnitX) * 0.0254'  	((double)PixelsxUnitY) * 0.0254  };  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,GetAsDpi2,The following statement contains a magic number: return new double[] {  	((double)PixelsxUnitX) * 0.0254'  	((double)PixelsxUnitY) * 0.0254  };  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,SetAsDpi2,The following statement contains a magic number: PixelsxUnitX = (long)(dpix / 0.0254 + 0.5);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,SetAsDpi2,The following statement contains a magic number: PixelsxUnitX = (long)(dpix / 0.0254 + 0.5);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,SetAsDpi2,The following statement contains a magic number: PixelsxUnitY = (long)(dpiy / 0.0254 + 0.5);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPHYS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPHYS.cs,SetAsDpi2,The following statement contains a magic number: PixelsxUnitY = (long)(dpiy / 0.0254 + 0.5);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,CreateRawChunk,The following statement contains a magic number: for (int n = 0' i = 0; n < nentries; n++) {  	GetEntryRgb (n' rgb);  	c.Data [i++] = (byte)rgb [0];  	c.Data [i++] = (byte)rgb [1];  	c.Data [i++] = (byte)rgb [2];  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,CreateRawChunk,The following statement contains a magic number: c.Data [i++] = (byte)rgb [2];  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,ParseFromRaw,The following statement contains a magic number: SetNentries (chunk.Len / 3);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,SetNentries,The following statement contains a magic number: if (nentries < 1 || nentries > 256)  	throw new PngjException ("invalid pallette - nentries=" + nentries);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,SetEntry,The following statement contains a magic number: entries [n] = ((r << 16) | (g << 8) | b);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,SetEntry,The following statement contains a magic number: entries [n] = ((r << 16) | (g << 8) | b);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,GetEntryRgb,The following statement contains a magic number: rgb [offset] = ((v & 0xff0000) >> 16);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,GetEntryRgb,The following statement contains a magic number: rgb [offset + 1] = ((v & 0xff00) >> 8);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,GetEntryRgb,The following statement contains a magic number: rgb [offset + 2] = (v & 0xff);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 2)  	return 1;  else if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 2)  	return 1;  else if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 2)  	return 1;  else if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 2)  	return 1;  else if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 2)  	return 1;  else if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 2)  	return 1;  else if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 4)  	return 2;  else if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: return 2;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: if (nentries <= 16)  	return 4;  else  	return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: return 4;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkPLTE,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkPLTE.cs,MinBitDepth,The following statement contains a magic number: return 8;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,CreateRawChunk,The following statement contains a magic number: c.Data [2] = (byte)mon;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,CreateRawChunk,The following statement contains a magic number: c.Data [3] = (byte)day;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,CreateRawChunk,The following statement contains a magic number: c.Data [4] = (byte)hour;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,CreateRawChunk,The following statement contains a magic number: c.Data [5] = (byte)min;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,CreateRawChunk,The following statement contains a magic number: c.Data [6] = (byte)sec;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,ParseFromRaw,The following statement contains a magic number: if (chunk.Len != 7)  	throw new PngjException ("bad chunk " + chunk);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,ParseFromRaw,The following statement contains a magic number: mon = Hjg.Pngcs.PngHelperInternal.ReadInt1fromByte (chunk.Data' 2);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,ParseFromRaw,The following statement contains a magic number: day = Hjg.Pngcs.PngHelperInternal.ReadInt1fromByte (chunk.Data' 3);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,ParseFromRaw,The following statement contains a magic number: hour = Hjg.Pngcs.PngHelperInternal.ReadInt1fromByte (chunk.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,ParseFromRaw,The following statement contains a magic number: min = Hjg.Pngcs.PngHelperInternal.ReadInt1fromByte (chunk.Data' 5);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTIME,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTIME.cs,ParseFromRaw,The following statement contains a magic number: sec = Hjg.Pngcs.PngHelperInternal.ReadInt1fromByte (chunk.Data' 6);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	c = createEmptyChunk (2' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (gray' c.Data' 0);  } else if (ImgInfo.Indexed) {  	c = createEmptyChunk (paletteAlpha.Length' true);  	for (int n = 0; n < c.Len; n++) {  		c.Data [n] = (byte)paletteAlpha [n];  	}  } else {  	c = createEmptyChunk (6' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (red' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (green' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (blue' c.Data' 0);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	c = createEmptyChunk (2' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (gray' c.Data' 0);  } else if (ImgInfo.Indexed) {  	c = createEmptyChunk (paletteAlpha.Length' true);  	for (int n = 0; n < c.Len; n++) {  		c.Data [n] = (byte)paletteAlpha [n];  	}  } else {  	c = createEmptyChunk (6' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (red' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (green' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (blue' c.Data' 0);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,CreateRawChunk,The following statement contains a magic number: c = createEmptyChunk (2' true);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,CreateRawChunk,The following statement contains a magic number: if (ImgInfo.Indexed) {  	c = createEmptyChunk (paletteAlpha.Length' true);  	for (int n = 0; n < c.Len; n++) {  		c.Data [n] = (byte)paletteAlpha [n];  	}  } else {  	c = createEmptyChunk (6' true);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (red' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (green' c.Data' 0);  	Hjg.Pngcs.PngHelperInternal.WriteInt2tobytes (blue' c.Data' 0);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,CreateRawChunk,The following statement contains a magic number: c = createEmptyChunk (6' true);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	gray = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  } else if (ImgInfo.Indexed) {  	int nentries = c.Data.Length;  	paletteAlpha = new int[nentries];  	for (int n = 0; n < nentries; n++) {  		paletteAlpha [n] = (int)(c.Data [n] & 0xff);  	}  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Greyscale) {  	gray = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  } else if (ImgInfo.Indexed) {  	int nentries = c.Data.Length;  	paletteAlpha = new int[nentries];  	for (int n = 0; n < nentries; n++) {  		paletteAlpha [n] = (int)(c.Data [n] & 0xff);  	}  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Indexed) {  	int nentries = c.Data.Length;  	paletteAlpha = new int[nentries];  	for (int n = 0; n < nentries; n++) {  		paletteAlpha [n] = (int)(c.Data [n] & 0xff);  	}  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,ParseFromRaw,The following statement contains a magic number: if (ImgInfo.Indexed) {  	int nentries = c.Data.Length;  	paletteAlpha = new int[nentries];  	for (int n = 0; n < nentries; n++) {  		paletteAlpha [n] = (int)(c.Data [n] & 0xff);  	}  } else {  	red = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 0);  	green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  	blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  }  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,ParseFromRaw,The following statement contains a magic number: green = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 2);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,ParseFromRaw,The following statement contains a magic number: blue = Hjg.Pngcs.PngHelperInternal.ReadInt2fromBytes (c.Data' 4);  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,setIndexEntryAsTransparent,The following statement contains a magic number: for (int i = 0; i < palAlphaIndex; i++)  	paletteAlpha [i] = 255;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkTRNS,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkTRNS.cs,setIndexEntryAsTransparent,The following statement contains a magic number: paletteAlpha [i] = 255;  
Magic Number,Hjg.Pngcs.Chunks,PngChunkZTXT,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\PngChunkZTXT.cs,ParseFromRaw,The following statement contains a magic number: if (nullsep < 0 || nullsep > c.Data.Length - 2)  	throw new PngjException ("bad zTXt chunk: no separator found");  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,PngDeinterlacer,The following statement contains a magic number: if (imi.Packed) {  	packedValsPerPixel = 8 / imi.BitDepth;  	packedShift = imi.BitDepth;  	if (imi.BitDepth == 1)  		packedMask = 0x80;  	else if (imi.BitDepth == 2)  		packedMask = 0xc0;  	else  		packedMask = 0xf0;  } else {  	packedMask = packedShift = packedValsPerPixel = 1;  	// dont care  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,PngDeinterlacer,The following statement contains a magic number: if (imi.Packed) {  	packedValsPerPixel = 8 / imi.BitDepth;  	packedShift = imi.BitDepth;  	if (imi.BitDepth == 1)  		packedMask = 0x80;  	else if (imi.BitDepth == 2)  		packedMask = 0xc0;  	else  		packedMask = 0xf0;  } else {  	packedMask = packedShift = packedValsPerPixel = 1;  	// dont care  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,PngDeinterlacer,The following statement contains a magic number: packedValsPerPixel = 8 / imi.BitDepth;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,PngDeinterlacer,The following statement contains a magic number: if (imi.BitDepth == 1)  	packedMask = 0x80;  else if (imi.BitDepth == 2)  	packedMask = 0xc0;  else  	packedMask = 0xf0;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,PngDeinterlacer,The following statement contains a magic number: if (imi.BitDepth == 2)  	packedMask = 0xc0;  else  	packedMask = 0xf0;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: switch (pass) {  case 1:  	dY = dX = 8;  	oX = oY = 0;  	break;  case 2:  	dY = dX = 8;  	oX = 4;  	oY = 0;  	break;  case 3:  	dX = 4;  	dY = 8;  	oX = 0;  	oY = 4;  	break;  case 4:  	dX = dY = 4;  	oX = 2;  	oY = 0;  	break;  case 5:  	dX = 2;  	dY = 4;  	oX = 0;  	oY = 2;  	break;  case 6:  	dX = dY = 2;  	oX = 1;  	oY = 0;  	break;  case 7:  	dX = 1;  	dY = 2;  	oX = 0;  	oY = 1;  	break;  default:  	throw new PngjExceptionInternal ("bad interlace pass" + pass);  }  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dY = dX = 8;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dY = dX = 8;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: oX = 4;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dX = 4;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dY = 8;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: oY = 4;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dX = dY = 4;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: oX = 2;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dX = 2;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dY = 4;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: oY = 2;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dX = dY = 2;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,setPass,The following statement contains a magic number: dY = 2;  
Magic Number,Hjg.Pngcs,PngDeinterlacer,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngDeinterlacer.cs,isAtLastRow,The following statement contains a magic number: return pass == 7 && currRowSubimg == rows - 1;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The following statement contains a magic number: if (configuredType < 0) {  	// first guess  	if ((imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8)  		currentType = FilterType.FILTER_NONE;  	else  		currentType = FilterType.FILTER_PAETH;  } else {  	currentType = configuredType;  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The following statement contains a magic number: if (configuredType < 0) {  	// first guess  	if ((imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8)  		currentType = FilterType.FILTER_NONE;  	else  		currentType = FilterType.FILTER_PAETH;  } else {  	currentType = configuredType;  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The following statement contains a magic number: if (configuredType < 0) {  	// first guess  	if ((imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8)  		currentType = FilterType.FILTER_NONE;  	else  		currentType = FilterType.FILTER_PAETH;  } else {  	currentType = configuredType;  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The following statement contains a magic number: if ((imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8)  	currentType = FilterType.FILTER_NONE;  else  	currentType = FilterType.FILTER_PAETH;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The following statement contains a magic number: if ((imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8)  	currentType = FilterType.FILTER_NONE;  else  	currentType = FilterType.FILTER_PAETH;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,FilterWriteStrategy,The following statement contains a magic number: if ((imgInfo.Rows < 8 && imgInfo.Cols < 8) || imgInfo.Indexed || imgInfo.BitDepth < 8)  	currentType = FilterType.FILTER_NONE;  else  	currentType = FilterType.FILTER_PAETH;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: if (histo != null) {  	double v' alfa' beta' e;  	alfa = rown == 0 ? 0.0 : 0.3;  	beta = 1 - alfa;  	e = 0.0;  	for (int i = 0; i < 256; i++) {  		v = ((double)histo [i]) / imgInfo.Cols;  		v = histogram1 [i] * alfa + v * beta;  		if (tentative)  			e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  		else  			histogram1 [i] = v;  	}  	lastEntropies [(int)type] = (-e);  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: if (histo != null) {  	double v' alfa' beta' e;  	alfa = rown == 0 ? 0.0 : 0.3;  	beta = 1 - alfa;  	e = 0.0;  	for (int i = 0; i < 256; i++) {  		v = ((double)histo [i]) / imgInfo.Cols;  		v = histogram1 [i] * alfa + v * beta;  		if (tentative)  			e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  		else  			histogram1 [i] = v;  	}  	lastEntropies [(int)type] = (-e);  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: if (histo != null) {  	double v' alfa' beta' e;  	alfa = rown == 0 ? 0.0 : 0.3;  	beta = 1 - alfa;  	e = 0.0;  	for (int i = 0; i < 256; i++) {  		v = ((double)histo [i]) / imgInfo.Cols;  		v = histogram1 [i] * alfa + v * beta;  		if (tentative)  			e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  		else  			histogram1 [i] = v;  	}  	lastEntropies [(int)type] = (-e);  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: alfa = rown == 0 ? 0.0 : 0.3;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	v = ((double)histo [i]) / imgInfo.Cols;  	v = histogram1 [i] * alfa + v * beta;  	if (tentative)  		e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  	else  		histogram1 [i] = v;  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	v = ((double)histo [i]) / imgInfo.Cols;  	v = histogram1 [i] * alfa + v * beta;  	if (tentative)  		e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  	else  		histogram1 [i] = v;  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: if (tentative)  	e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  else  	histogram1 [i] = v;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,fillResultsForFilter,The following statement contains a magic number: e += v > 0.00000001 ? v * Math.Log (v) : 0.0;  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,gimmeFilterType,The following statement contains a magic number: if (currentType == FilterType.FILTER_UNKNOWN) {  	// get better  	if (rown == 0)  		currentType = FilterType.FILTER_SUB;  	else {  		double bestval = Double.MaxValue;  		double val;  		for (int i = 0; i < 5; i++) {  			val = useEntropy ? lastEntropies [i] : lastSums [i];  			val /= preference [i];  			if (val <= bestval) {  				bestval = val;  				currentType = (FilterType)i;  			}  		}  	}  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,gimmeFilterType,The following statement contains a magic number: if (rown == 0)  	currentType = FilterType.FILTER_SUB;  else {  	double bestval = Double.MaxValue;  	double val;  	for (int i = 0; i < 5; i++) {  		val = useEntropy ? lastEntropies [i] : lastSums [i];  		val /= preference [i];  		if (val <= bestval) {  			bestval = val;  			currentType = (FilterType)i;  		}  	}  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,gimmeFilterType,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	val = useEntropy ? lastEntropies [i] : lastSums [i];  	val /= preference [i];  	if (val <= bestval) {  		bestval = val;  		currentType = (FilterType)i;  	}  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,gimmeFilterType,The following statement contains a magic number: if (configuredType == FilterType.FILTER_CYCLIC) {  	currentType = (FilterType)(((int)currentType + 1) % 5);  }  
Magic Number,Hjg.Pngcs,FilterWriteStrategy,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\FilterWriteStrategy.cs,gimmeFilterType,The following statement contains a magic number: currentType = (FilterType)(((int)currentType + 1) % 5);  
Magic Number,Hjg.Pngcs,PngCsUtils,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngCsUtils.cs,arraysEqual4,The following statement contains a magic number: return (ar1 [0] == ar2 [0]) && (ar1 [1] == ar2 [1]) && (ar1 [2] == ar2 [2]) && (ar1 [3] == ar2 [3]);  
Magic Number,Hjg.Pngcs,PngCsUtils,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngCsUtils.cs,arraysEqual4,The following statement contains a magic number: return (ar1 [0] == ar2 [0]) && (ar1 [1] == ar2 [1]) && (ar1 [2] == ar2 [2]) && (ar1 [3] == ar2 [3]);  
Magic Number,Hjg.Pngcs,PngCsUtils,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngCsUtils.cs,arraysEqual4,The following statement contains a magic number: return (ar1 [0] == ar2 [0]) && (ar1 [1] == ar2 [1]) && (ar1 [2] == ar2 [2]) && (ar1 [3] == ar2 [3]);  
Magic Number,Hjg.Pngcs,PngCsUtils,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngCsUtils.cs,arraysEqual4,The following statement contains a magic number: return (ar1 [0] == ar2 [0]) && (ar1 [1] == ar2 [1]) && (ar1 [2] == ar2 [2]) && (ar1 [3] == ar2 [3]);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.Channels = (grayscale || palette) ? ((alpha) ? 2 : 1) : ((alpha) ? 4 : 3);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.Channels = (grayscale || palette) ? ((alpha) ? 2 : 1) : ((alpha) ? 4 : 3);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.Channels = (grayscale || palette) ? ((alpha) ? 2 : 1) : ((alpha) ? 4 : 3);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.Packed = bitdepth < 8;  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.BytesPixel = (BitspPixel + 7) / 8;  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.BytesPixel = (BitspPixel + 7) / 8;  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.BytesPerRow = (BitspPixel * cols + 7) / 8;  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: this.BytesPerRow = (BitspPixel * cols + 7) / 8;  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: switch (this.BitDepth) {  case 1:  case 2:  case 4:  	if (!(this.Indexed || this.Greyscale))  		throw new PngjException ("only indexed or grayscale can have bitdepth=" + this.BitDepth);  	break;  case 8:  	break;  case 16:  	if (this.Indexed)  		throw new PngjException ("indexed can't have bitdepth=" + this.BitDepth);  	break;  default:  	throw new PngjException ("invalid bitdepth=" + this.BitDepth);  }  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: switch (this.BitDepth) {  case 1:  case 2:  case 4:  	if (!(this.Indexed || this.Greyscale))  		throw new PngjException ("only indexed or grayscale can have bitdepth=" + this.BitDepth);  	break;  case 8:  	break;  case 16:  	if (this.Indexed)  		throw new PngjException ("indexed can't have bitdepth=" + this.BitDepth);  	break;  default:  	throw new PngjException ("invalid bitdepth=" + this.BitDepth);  }  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: switch (this.BitDepth) {  case 1:  case 2:  case 4:  	if (!(this.Indexed || this.Greyscale))  		throw new PngjException ("only indexed or grayscale can have bitdepth=" + this.BitDepth);  	break;  case 8:  	break;  case 16:  	if (this.Indexed)  		throw new PngjException ("indexed can't have bitdepth=" + this.BitDepth);  	break;  default:  	throw new PngjException ("invalid bitdepth=" + this.BitDepth);  }  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,ImageInfo,The following statement contains a magic number: switch (this.BitDepth) {  case 1:  case 2:  case 4:  	if (!(this.Indexed || this.Greyscale))  		throw new PngjException ("only indexed or grayscale can have bitdepth=" + this.BitDepth);  	break;  case 8:  	break;  case 16:  	if (this.Indexed)  		throw new PngjException ("indexed can't have bitdepth=" + this.BitDepth);  	break;  default:  	throw new PngjException ("invalid bitdepth=" + this.BitDepth);  }  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,GetHashCode,The following statement contains a magic number: result = prime * result + ((Alpha) ? 1231 : 1237);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,GetHashCode,The following statement contains a magic number: result = prime * result + ((Alpha) ? 1231 : 1237);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,GetHashCode,The following statement contains a magic number: result = prime * result + ((Greyscale) ? 1231 : 1237);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,GetHashCode,The following statement contains a magic number: result = prime * result + ((Greyscale) ? 1231 : 1237);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,GetHashCode,The following statement contains a magic number: result = prime * result + ((Indexed) ? 1231 : 1237);  
Magic Number,Hjg.Pngcs,ImageInfo,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageInfo.cs,GetHashCode,The following statement contains a magic number: result = prime * result + ((Indexed) ? 1231 : 1237);  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,ImageLine,The following statement contains a magic number: if (stype == ESampleType.INT) {  	Scanline = sci != null ? sci : new int[ElementsPerRow];  	ScanlineB = null;  	maxSampleVal = bitDepth == 16 ? 0xFFFF : GetMaskForPackedFormatsLs (bitDepth);  } else if (stype == ESampleType.BYTE) {  	ScanlineB = scb != null ? scb : new byte[ElementsPerRow];  	Scanline = null;  	maxSampleVal = bitDepth == 16 ? 0xFF : GetMaskForPackedFormatsLs (bitDepth);  } else  	throw new PngjExceptionInternal ("bad ImageLine initialization");  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,ImageLine,The following statement contains a magic number: if (stype == ESampleType.INT) {  	Scanline = sci != null ? sci : new int[ElementsPerRow];  	ScanlineB = null;  	maxSampleVal = bitDepth == 16 ? 0xFFFF : GetMaskForPackedFormatsLs (bitDepth);  } else if (stype == ESampleType.BYTE) {  	ScanlineB = scb != null ? scb : new byte[ElementsPerRow];  	Scanline = null;  	maxSampleVal = bitDepth == 16 ? 0xFF : GetMaskForPackedFormatsLs (bitDepth);  } else  	throw new PngjExceptionInternal ("bad ImageLine initialization");  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,ImageLine,The following statement contains a magic number: maxSampleVal = bitDepth == 16 ? 0xFFFF : GetMaskForPackedFormatsLs (bitDepth);  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,ImageLine,The following statement contains a magic number: if (stype == ESampleType.BYTE) {  	ScanlineB = scb != null ? scb : new byte[ElementsPerRow];  	Scanline = null;  	maxSampleVal = bitDepth == 16 ? 0xFF : GetMaskForPackedFormatsLs (bitDepth);  } else  	throw new PngjExceptionInternal ("bad ImageLine initialization");  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,ImageLine,The following statement contains a magic number: maxSampleVal = bitDepth == 16 ? 0xFF : GetMaskForPackedFormatsLs (bitDepth);  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceInt,The following statement contains a magic number: if (bitDepth >= 8)  	return;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceInt,The following statement contains a magic number: if (offset0 != 8) {  	mask = mask0 << offset0;  	offset = offset0;  	// how many bits to shift the mask to the right to recover mask0  } else {  	mask = mask0;  	offset = 0;  }  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceInt,The following statement contains a magic number: for (int j = iminfo.SamplesPerRow - 1' i = iminfo.SamplesPerRowPacked - 1; j >= 0; j--) {  	v = (src [i] & mask) >> offset;  	if (Scale)  		v <<= scalefactor;  	dst [j] = v;  	mask <<= bitDepth;  	offset += bitDepth;  	if (offset == 8) {  		mask = mask0;  		offset = 0;  		i--;  	}  }  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceInt,The following statement contains a magic number: if (offset == 8) {  	mask = mask0;  	offset = 0;  	i--;  }  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,packInplaceInt,The following statement contains a magic number: if (bitDepth >= 8)  	return;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceByte,The following statement contains a magic number: if (bitDepth >= 8)  	return;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceByte,The following statement contains a magic number: if (offset0 != 8) {  	mask = mask0 << offset0;  	offset = offset0;  	// how many bits to shift the mask to the right to recover mask0  } else {  	mask = mask0;  	offset = 0;  }  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceByte,The following statement contains a magic number: for (int j = iminfo.SamplesPerRow - 1' i = iminfo.SamplesPerRowPacked - 1; j >= 0; j--) {  	v = (src [i] & mask) >> offset;  	if (scale)  		v <<= scalefactor;  	dst [j] = (byte)v;  	mask <<= bitDepth;  	offset += bitDepth;  	if (offset == 8) {  		mask = mask0;  		offset = 0;  		i--;  	}  }  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,unpackInplaceByte,The following statement contains a magic number: if (offset == 8) {  	mask = mask0;  	offset = 0;  	i--;  }  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,packInplaceByte,The following statement contains a magic number: if (bitDepth >= 8)  	return;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,GetMaskForPackedFormats,The following statement contains a magic number: if (bitDepth == 4)  	return 0xf0;  else if (bitDepth == 2)  	return 0xc0;  else if (bitDepth == 1)  	return 0x80;  else  	return 0xff;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,GetMaskForPackedFormats,The following statement contains a magic number: if (bitDepth == 4)  	return 0xf0;  else if (bitDepth == 2)  	return 0xc0;  else if (bitDepth == 1)  	return 0x80;  else  	return 0xff;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,GetMaskForPackedFormats,The following statement contains a magic number: if (bitDepth == 2)  	return 0xc0;  else if (bitDepth == 1)  	return 0x80;  else  	return 0xff;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,GetMaskForPackedFormatsLs,The following statement contains a magic number: if (bitDepth == 4)  	return 0x0f;  else if (bitDepth == 2)  	return 0x03;  else if (bitDepth == 1)  	return 0x01;  else  	return 0xff;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,GetMaskForPackedFormatsLs,The following statement contains a magic number: if (bitDepth == 4)  	return 0x0f;  else if (bitDepth == 2)  	return 0x03;  else if (bitDepth == 1)  	return 0x01;  else  	return 0xff;  
Magic Number,Hjg.Pngcs,ImageLine,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLine.cs,GetMaskForPackedFormatsLs,The following statement contains a magic number: if (bitDepth == 2)  	return 0x03;  else if (bitDepth == 1)  	return 0x01;  else  	return 0xff;  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Palette2rgb,The following statement contains a magic number: for (int c = 0; c < line.ImgInfo.Cols; c++) {  	int index = isbyte ? (line.ScanlineB [c] & 0xFF) : line.Scanline [c];  	pal.GetEntryRgb (index' buf' c * channels);  	if (isalpha) {  		int alpha = index < nindexesWithAlpha ? trns.GetPalletteAlpha () [index] : 255;  		buf [c * channels + 3] = alpha;  	}  }  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Palette2rgb,The following statement contains a magic number: for (int c = 0; c < line.ImgInfo.Cols; c++) {  	int index = isbyte ? (line.ScanlineB [c] & 0xFF) : line.Scanline [c];  	pal.GetEntryRgb (index' buf' c * channels);  	if (isalpha) {  		int alpha = index < nindexesWithAlpha ? trns.GetPalletteAlpha () [index] : 255;  		buf [c * channels + 3] = alpha;  	}  }  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Palette2rgb,The following statement contains a magic number: if (isalpha) {  	int alpha = index < nindexesWithAlpha ? trns.GetPalletteAlpha () [index] : 255;  	buf [c * channels + 3] = alpha;  }  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Palette2rgb,The following statement contains a magic number: if (isalpha) {  	int alpha = index < nindexesWithAlpha ? trns.GetPalletteAlpha () [index] : 255;  	buf [c * channels + 3] = alpha;  }  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Palette2rgb,The following statement contains a magic number: buf [c * channels + 3] = alpha;  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: unchecked {  	return ((int)(0xFF000000)) | ((r) << 16) | ((g) << 8) | (b);  }  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: unchecked {  	return ((int)(0xFF000000)) | ((r) << 16) | ((g) << 8) | (b);  }  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: return ((int)(0xFF000000)) | ((r) << 16) | ((g) << 8) | (b);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: return ((int)(0xFF000000)) | ((r) << 16) | ((g) << 8) | (b);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: return ((a) << 24) | ((r) << 16) | ((g) << 8) | (b);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: return ((a) << 24) | ((r) << 16) | ((g) << 8) | (b);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ToARGB8,The following statement contains a magic number: return ((a) << 24) | ((r) << 16) | ((g) << 8) | (b);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: buff [offset++] = ((val >> 16) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: buff [offset++] = ((val >> 8) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: if (alpha)  	buff [offset + 1] = ((val >> 24) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: buff [offset + 1] = ((val >> 24) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: buff [offset++] = (byte)((val >> 16) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: buff [offset++] = (byte)((val >> 8) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: if (alpha)  	buff [offset + 1] = (byte)((val >> 24) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,FromARGB8,The following statement contains a magic number: buff [offset + 1] = (byte)((val >> 24) & 0xFF);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ReadDouble,The following statement contains a magic number: if (line.IsInt ())  	return line.Scanline [pos] / (line.maxSampleVal + 0.9);  else  	return (line.ScanlineB [pos]) / (line.maxSampleVal + 0.9);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ReadDouble,The following statement contains a magic number: if (line.IsInt ())  	return line.Scanline [pos] / (line.maxSampleVal + 0.9);  else  	return (line.ScanlineB [pos]) / (line.maxSampleVal + 0.9);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ReadDouble,The following statement contains a magic number: return line.Scanline [pos] / (line.maxSampleVal + 0.9);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ReadDouble,The following statement contains a magic number: return (line.ScanlineB [pos]) / (line.maxSampleVal + 0.9);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,WriteDouble,The following statement contains a magic number: if (line.IsInt ())  	line.Scanline [pos] = (int)(d * (line.maxSampleVal + 0.99));  else  	line.ScanlineB [pos] = (byte)(d * (line.maxSampleVal + 0.99));  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,WriteDouble,The following statement contains a magic number: if (line.IsInt ())  	line.Scanline [pos] = (int)(d * (line.maxSampleVal + 0.99));  else  	line.ScanlineB [pos] = (byte)(d * (line.maxSampleVal + 0.99));  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,WriteDouble,The following statement contains a magic number: line.Scanline [pos] = (int)(d * (line.maxSampleVal + 0.99));  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,WriteDouble,The following statement contains a magic number: line.ScanlineB [pos] = (byte)(d * (line.maxSampleVal + 0.99));  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,Interpol,The following statement contains a magic number: return (int)(e * (1 - dy) + f * dy + 0.5);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_0_255,The following statement contains a magic number: return i > 255 ? 255 : (i < 0 ? 0 : i);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_0_255,The following statement contains a magic number: return i > 255 ? 255 : (i < 0 ? 0 : i);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampDouble,The following statement contains a magic number: return i < 0 ? 0 : (i >= 1 ? 0.999999 : i);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_0_65535,The following statement contains a magic number: return i > 65535 ? 65535 : (i < 0 ? 0 : i);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_0_65535,The following statement contains a magic number: return i > 65535 ? 65535 : (i < 0 ? 0 : i);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_128_127,The following statement contains a magic number: return x > 127 ? 127 : (x < -128 ? -128 : x);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_128_127,The following statement contains a magic number: return x > 127 ? 127 : (x < -128 ? -128 : x);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_128_127,The following statement contains a magic number: return x > 127 ? 127 : (x < -128 ? -128 : x);  
Magic Number,Hjg.Pngcs,ImageLineHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ImageLineHelper.cs,ClampTo_128_127,The following statement contains a magic number: return x > 127 ? 127 : (x < -128 ? -128 : x);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,DoubleToInt100000,The following statement contains a magic number: return (int)(d * 100000.0 + 0.5);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,DoubleToInt100000,The following statement contains a magic number: return (int)(d * 100000.0 + 0.5);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,IntToDouble100000,The following statement contains a magic number: return i / 100000.0;  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt2,The following statement contains a magic number: try {  	int b1 = mask0.ReadByte ();  	int b2 = mask0.ReadByte ();  	if (b1 == -1 || b2 == -1)  		return -1;  	return (b1 << 8) + b2;  } catch (IOException e) {  	throw new PngjInputException ("error reading readInt2"' e);  }  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt2,The following statement contains a magic number: return (b1 << 8) + b2;  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The following statement contains a magic number: try {  	int b1 = mask0.ReadByte ();  	int b2 = mask0.ReadByte ();  	int b3 = mask0.ReadByte ();  	int b4 = mask0.ReadByte ();  	if (b1 == -1 || b2 == -1 || b3 == -1 || b4 == -1)  		return -1;  	return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;  } catch (IOException e) {  	throw new PngjInputException ("error reading readInt4"' e);  }  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The following statement contains a magic number: try {  	int b1 = mask0.ReadByte ();  	int b2 = mask0.ReadByte ();  	int b3 = mask0.ReadByte ();  	int b4 = mask0.ReadByte ();  	if (b1 == -1 || b2 == -1 || b3 == -1 || b4 == -1)  		return -1;  	return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;  } catch (IOException e) {  	throw new PngjInputException ("error reading readInt4"' e);  }  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The following statement contains a magic number: try {  	int b1 = mask0.ReadByte ();  	int b2 = mask0.ReadByte ();  	int b3 = mask0.ReadByte ();  	int b4 = mask0.ReadByte ();  	if (b1 == -1 || b2 == -1 || b3 == -1 || b4 == -1)  		return -1;  	return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;  } catch (IOException e) {  	throw new PngjInputException ("error reading readInt4"' e);  }  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The following statement contains a magic number: return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The following statement contains a magic number: return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4,The following statement contains a magic number: return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt2fromBytes,The following statement contains a magic number: return ((b [offset] & 0xff) << 16) | ((b [offset + 1] & 0xff));  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4fromBytes,The following statement contains a magic number: return ((b [offset] & 0xff) << 24) | ((b [offset + 1] & 0xff) << 16) | ((b [offset + 2] & 0xff) << 8) | (b [offset + 3] & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4fromBytes,The following statement contains a magic number: return ((b [offset] & 0xff) << 24) | ((b [offset + 1] & 0xff) << 16) | ((b [offset + 2] & 0xff) << 8) | (b [offset + 3] & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4fromBytes,The following statement contains a magic number: return ((b [offset] & 0xff) << 24) | ((b [offset + 1] & 0xff) << 16) | ((b [offset + 2] & 0xff) << 8) | (b [offset + 3] & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4fromBytes,The following statement contains a magic number: return ((b [offset] & 0xff) << 24) | ((b [offset + 1] & 0xff) << 16) | ((b [offset + 2] & 0xff) << 8) | (b [offset + 3] & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,ReadInt4fromBytes,The following statement contains a magic number: return ((b [offset] & 0xff) << 24) | ((b [offset + 1] & 0xff) << 16) | ((b [offset + 2] & 0xff) << 8) | (b [offset + 3] & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt2tobytes,The following statement contains a magic number: b [offset] = (byte)((n >> 8) & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt4tobytes,The following statement contains a magic number: b [offset] = (byte)((n >> 24) & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt4tobytes,The following statement contains a magic number: b [offset + 1] = (byte)((n >> 16) & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt4tobytes,The following statement contains a magic number: b [offset + 2] = (byte)((n >> 8) & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt4tobytes,The following statement contains a magic number: b [offset + 2] = (byte)((n >> 8) & 0xff);  
Magic Number,Hjg.Pngcs,PngHelperInternal,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngHelperInternal.cs,WriteInt4tobytes,The following statement contains a magic number: b [offset + 3] = (byte)(n & 0xff);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,PngIDatChunkInputStream,The following statement contains a magic number: this.idLastChunk = new byte[4];  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,PngIDatChunkInputStream,The following statement contains a magic number: System.Array.Copy ((Array)(Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT)' 0' (Array)(idLastChunk)' 0' 4);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,PngIDatChunkInputStream,The following statement contains a magic number: crcEngine.Update (idLastChunk' 0' 4);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,PngIDatChunkInputStream,The following statement contains a magic number: foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' offset_0 - 8));  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: do {  	int crc = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	//  	offset += 4;  	if (checkCrc) {  		int crccalc = (int)crcEngine.GetValue ();  		if (lenLastChunk > 0 && crc != crccalc)  			throw new PngjBadCrcException ("error reading idat; offset: " + offset);  		crcEngine.Reset ();  	}  	lenLastChunk = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	if (lenLastChunk < 0)  		throw new PngjInputException ("invalid len for chunk: " + lenLastChunk);  	toReadThisChunk = lenLastChunk;  	Hjg.Pngcs.PngHelperInternal.ReadBytes (inputStream' idLastChunk' 0' 4);  	offset += 8;  	ended = !PngCsUtils.arraysEqual4 (idLastChunk' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT);  	if (!ended) {  		foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  		if (checkCrc)  			crcEngine.Update (idLastChunk' 0' 4);  	}  	// PngHelper.logdebug("IDAT ended. next len= " + lenLastChunk + " idat?" +  	// (!ended));  } while (lenLastChunk == 0 && !ended);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: do {  	int crc = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	//  	offset += 4;  	if (checkCrc) {  		int crccalc = (int)crcEngine.GetValue ();  		if (lenLastChunk > 0 && crc != crccalc)  			throw new PngjBadCrcException ("error reading idat; offset: " + offset);  		crcEngine.Reset ();  	}  	lenLastChunk = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	if (lenLastChunk < 0)  		throw new PngjInputException ("invalid len for chunk: " + lenLastChunk);  	toReadThisChunk = lenLastChunk;  	Hjg.Pngcs.PngHelperInternal.ReadBytes (inputStream' idLastChunk' 0' 4);  	offset += 8;  	ended = !PngCsUtils.arraysEqual4 (idLastChunk' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT);  	if (!ended) {  		foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  		if (checkCrc)  			crcEngine.Update (idLastChunk' 0' 4);  	}  	// PngHelper.logdebug("IDAT ended. next len= " + lenLastChunk + " idat?" +  	// (!ended));  } while (lenLastChunk == 0 && !ended);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: do {  	int crc = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	//  	offset += 4;  	if (checkCrc) {  		int crccalc = (int)crcEngine.GetValue ();  		if (lenLastChunk > 0 && crc != crccalc)  			throw new PngjBadCrcException ("error reading idat; offset: " + offset);  		crcEngine.Reset ();  	}  	lenLastChunk = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	if (lenLastChunk < 0)  		throw new PngjInputException ("invalid len for chunk: " + lenLastChunk);  	toReadThisChunk = lenLastChunk;  	Hjg.Pngcs.PngHelperInternal.ReadBytes (inputStream' idLastChunk' 0' 4);  	offset += 8;  	ended = !PngCsUtils.arraysEqual4 (idLastChunk' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT);  	if (!ended) {  		foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  		if (checkCrc)  			crcEngine.Update (idLastChunk' 0' 4);  	}  	// PngHelper.logdebug("IDAT ended. next len= " + lenLastChunk + " idat?" +  	// (!ended));  } while (lenLastChunk == 0 && !ended);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: do {  	int crc = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	//  	offset += 4;  	if (checkCrc) {  		int crccalc = (int)crcEngine.GetValue ();  		if (lenLastChunk > 0 && crc != crccalc)  			throw new PngjBadCrcException ("error reading idat; offset: " + offset);  		crcEngine.Reset ();  	}  	lenLastChunk = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	if (lenLastChunk < 0)  		throw new PngjInputException ("invalid len for chunk: " + lenLastChunk);  	toReadThisChunk = lenLastChunk;  	Hjg.Pngcs.PngHelperInternal.ReadBytes (inputStream' idLastChunk' 0' 4);  	offset += 8;  	ended = !PngCsUtils.arraysEqual4 (idLastChunk' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT);  	if (!ended) {  		foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  		if (checkCrc)  			crcEngine.Update (idLastChunk' 0' 4);  	}  	// PngHelper.logdebug("IDAT ended. next len= " + lenLastChunk + " idat?" +  	// (!ended));  } while (lenLastChunk == 0 && !ended);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: do {  	int crc = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	//  	offset += 4;  	if (checkCrc) {  		int crccalc = (int)crcEngine.GetValue ();  		if (lenLastChunk > 0 && crc != crccalc)  			throw new PngjBadCrcException ("error reading idat; offset: " + offset);  		crcEngine.Reset ();  	}  	lenLastChunk = Hjg.Pngcs.PngHelperInternal.ReadInt4 (inputStream);  	if (lenLastChunk < 0)  		throw new PngjInputException ("invalid len for chunk: " + lenLastChunk);  	toReadThisChunk = lenLastChunk;  	Hjg.Pngcs.PngHelperInternal.ReadBytes (inputStream' idLastChunk' 0' 4);  	offset += 8;  	ended = !PngCsUtils.arraysEqual4 (idLastChunk' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT);  	if (!ended) {  		foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  		if (checkCrc)  			crcEngine.Update (idLastChunk' 0' 4);  	}  	// PngHelper.logdebug("IDAT ended. next len= " + lenLastChunk + " idat?" +  	// (!ended));  } while (lenLastChunk == 0 && !ended);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: Hjg.Pngcs.PngHelperInternal.ReadBytes (inputStream' idLastChunk' 0' 4);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: offset += 8;  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: if (!ended) {  	foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  	if (checkCrc)  		crcEngine.Update (idLastChunk' 0' 4);  }  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: if (!ended) {  	foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  	if (checkCrc)  		crcEngine.Update (idLastChunk' 0' 4);  }  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: foundChunksInfo.Add (new PngIDatChunkInputStream.IdatChunkInfo (lenLastChunk' (offset - 8)));  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: if (checkCrc)  	crcEngine.Update (idLastChunk' 0' 4);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,EndChunkGoForNext,The following statement contains a magic number: crcEngine.Update (idLastChunk' 0' 4);  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,Read,The following statement contains a magic number: if (n == -1)  	n = -2;  
Magic Number,Hjg.Pngcs,PngIDatChunkInputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngIDatChunkInputStream.cs,Read,The following statement contains a magic number: n = -2;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.MaxBytesMetadata = 5 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.MaxBytesMetadata = 5 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.MaxBytesMetadata = 5 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.MaxTotalBytesRead = 200 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.MaxTotalBytesRead = 200 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.MaxTotalBytesRead = 200 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.SkipChunkMaxSize = 2 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.SkipChunkMaxSize = 2 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: this.SkipChunkMaxSize = 2 * 1024 * 1024;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (clen != 13)  	throw new Exception ("IDHR chunk len != 13 ?? " + clen);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (ihdr.Colormodel < 0 || ihdr.Colormodel > 6 || ihdr.Colormodel == 1 || ihdr.Colormodel == 5)  	throw new PngjInputException ("Invalid colormodel " + ihdr.Colormodel);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (ihdr.Colormodel < 0 || ihdr.Colormodel > 6 || ihdr.Colormodel == 1 || ihdr.Colormodel == 5)  	throw new PngjInputException ("Invalid colormodel " + ihdr.Colormodel);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (ihdr.Bitspc != 1 && ihdr.Bitspc != 2 && ihdr.Bitspc != 4 && ihdr.Bitspc != 8 && ihdr.Bitspc != 16)  	throw new PngjInputException ("Invalid bit depth " + ihdr.Bitspc);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (ihdr.Bitspc != 1 && ihdr.Bitspc != 2 && ihdr.Bitspc != 4 && ihdr.Bitspc != 8 && ihdr.Bitspc != 16)  	throw new PngjInputException ("Invalid bit depth " + ihdr.Bitspc);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (ihdr.Bitspc != 1 && ihdr.Bitspc != 2 && ihdr.Bitspc != 4 && ihdr.Bitspc != 8 && ihdr.Bitspc != 16)  	throw new PngjInputException ("Invalid bit depth " + ihdr.Bitspc);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,PngReader,The following statement contains a magic number: if (ihdr.Bitspc != 1 && ihdr.Bitspc != 2 && ihdr.Bitspc != 4 && ihdr.Bitspc != 8 && ihdr.Bitspc != 16)  	throw new PngjInputException ("Invalid bit depth " + ihdr.Bitspc);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,UnfilterRowAverage,The following statement contains a magic number: for (j = 1 - ImgInfo.BytesPixel' i = 1; i <= nbytes; i++' j++) {  	x = (j > 0) ? rowb [j] : (byte)0;  	rowb [i] = (byte)(rowbfilter [i] + (x + (rowbprev [i] & 0xFF)) / 2);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,UnfilterRowAverage,The following statement contains a magic number: rowb [i] = (byte)(rowbfilter [i] + (x + (rowbprev [i] & 0xFF)) / 2);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: while (!found) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		break;  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  	if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT)) {  		found = true;  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_4_IDAT;  		// add dummy idat chunk to list  		chunksList.AppendReadChunk (new PngChunkIDAT (ImgInfo' clen' offset - 8)' CurrentChunkGroup);  		break;  	} else if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IEND)) {  		throw new PngjInputException ("END chunk found before image data (IDAT) at offset=" + offset);  	}  	String chunkids = ChunkHelper.ToString (chunkid);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_2_PLTE;  	ReadChunk (chunkid' clen' false);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_3_AFTERPLTE;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: while (!found) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		break;  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  	if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT)) {  		found = true;  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_4_IDAT;  		// add dummy idat chunk to list  		chunksList.AppendReadChunk (new PngChunkIDAT (ImgInfo' clen' offset - 8)' CurrentChunkGroup);  		break;  	} else if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IEND)) {  		throw new PngjInputException ("END chunk found before image data (IDAT) at offset=" + offset);  	}  	String chunkids = ChunkHelper.ToString (chunkid);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_2_PLTE;  	ReadChunk (chunkid' clen' false);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_3_AFTERPLTE;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: while (!found) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		break;  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  	if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT)) {  		found = true;  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_4_IDAT;  		// add dummy idat chunk to list  		chunksList.AppendReadChunk (new PngChunkIDAT (ImgInfo' clen' offset - 8)' CurrentChunkGroup);  		break;  	} else if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IEND)) {  		throw new PngjInputException ("END chunk found before image data (IDAT) at offset=" + offset);  	}  	String chunkids = ChunkHelper.ToString (chunkid);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_2_PLTE;  	ReadChunk (chunkid' clen' false);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_3_AFTERPLTE;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: while (!found) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		break;  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  	if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT)) {  		found = true;  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_4_IDAT;  		// add dummy idat chunk to list  		chunksList.AppendReadChunk (new PngChunkIDAT (ImgInfo' clen' offset - 8)' CurrentChunkGroup);  		break;  	} else if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IEND)) {  		throw new PngjInputException ("END chunk found before image data (IDAT) at offset=" + offset);  	}  	String chunkids = ChunkHelper.ToString (chunkid);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_2_PLTE;  	ReadChunk (chunkid' clen' false);  	if (chunkids.Equals (ChunkHelper.PLTE))  		this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_3_AFTERPLTE;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IDAT)) {  	found = true;  	this.CurrentChunkGroup = ChunksList.CHUNK_GROUP_4_IDAT;  	// add dummy idat chunk to list  	chunksList.AppendReadChunk (new PngChunkIDAT (ImgInfo' clen' offset - 8)' CurrentChunkGroup);  	break;  } else if (PngCsUtils.arraysEqual4 (chunkid' Hjg.Pngcs.Chunks.ChunkHelper.b_IEND)) {  	throw new PngjInputException ("END chunk found before image data (IDAT) at offset=" + offset);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadFirstChunks,The following statement contains a magic number: chunksList.AppendReadChunk (new PngChunkIDAT (ImgInfo' clen' offset - 8)' CurrentChunkGroup);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: while (!endfound) {  	skip = false;  	if (!first) {  		clen = PngHelperInternal.ReadInt4 (inputStream);  		offset += 4;  		if (clen < 0)  			throw new PngjInputException ("bad len " + clen);  		PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  		offset += 4;  	}  	first = false;  	if (PngCsUtils.arraysEqual4 (chunkid' ChunkHelper.b_IDAT)) {  		skip = true;  		// extra dummy (empty?) idat chunk' it can happen' ignore it  	} else if (PngCsUtils.arraysEqual4 (chunkid' ChunkHelper.b_IEND)) {  		CurrentChunkGroup = ChunksList.CHUNK_GROUP_6_END;  		endfound = true;  	}  	ReadChunk (chunkid' clen' skip);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: while (!endfound) {  	skip = false;  	if (!first) {  		clen = PngHelperInternal.ReadInt4 (inputStream);  		offset += 4;  		if (clen < 0)  			throw new PngjInputException ("bad len " + clen);  		PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  		offset += 4;  	}  	first = false;  	if (PngCsUtils.arraysEqual4 (chunkid' ChunkHelper.b_IDAT)) {  		skip = true;  		// extra dummy (empty?) idat chunk' it can happen' ignore it  	} else if (PngCsUtils.arraysEqual4 (chunkid' ChunkHelper.b_IEND)) {  		CurrentChunkGroup = ChunksList.CHUNK_GROUP_6_END;  		endfound = true;  	}  	ReadChunk (chunkid' clen' skip);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: while (!endfound) {  	skip = false;  	if (!first) {  		clen = PngHelperInternal.ReadInt4 (inputStream);  		offset += 4;  		if (clen < 0)  			throw new PngjInputException ("bad len " + clen);  		PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  		offset += 4;  	}  	first = false;  	if (PngCsUtils.arraysEqual4 (chunkid' ChunkHelper.b_IDAT)) {  		skip = true;  		// extra dummy (empty?) idat chunk' it can happen' ignore it  	} else if (PngCsUtils.arraysEqual4 (chunkid' ChunkHelper.b_IEND)) {  		CurrentChunkGroup = ChunksList.CHUNK_GROUP_6_END;  		endfound = true;  	}  	ReadChunk (chunkid' clen' skip);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: if (!first) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		throw new PngjInputException ("bad len " + clen);  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: if (!first) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		throw new PngjInputException ("bad len " + clen);  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: if (!first) {  	clen = PngHelperInternal.ReadInt4 (inputStream);  	offset += 4;  	if (clen < 0)  		throw new PngjInputException ("bad len " + clen);  	PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  	offset += 4;  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: PngHelperInternal.ReadBytes (inputStream' chunkid' 0' 4);  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadLastChunks,The following statement contains a magic number: offset += 4;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToInt,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	for (int i = 0' j = 1; i < bytesRead; i++)  		buffer [i] = (rowb [j++]);  } else {  	// 16 bitspc  	for (int i = 0' j = 1; j < bytesRead; i++)  		buffer [i] = (rowb [j++] << 8) + rowb [j++];  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToInt,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	for (int i = 0' j = 1; i < bytesRead; i++)  		buffer [i] = (rowb [j++]);  } else {  	// 16 bitspc  	for (int i = 0' j = 1; j < bytesRead; i++)  		buffer [i] = (rowb [j++] << 8) + rowb [j++];  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToInt,The following statement contains a magic number: for (int i = 0' j = 1; j < bytesRead; i++)  	buffer [i] = (rowb [j++] << 8) + rowb [j++];  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToInt,The following statement contains a magic number: buffer [i] = (rowb [j++] << 8) + rowb [j++];  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToByte,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	Array.Copy (rowb' 1' buffer' 0' bytesRead);  } else {  	// 16 bitspc  	for (int i = 0' j = 1; j < bytesRead; i++' j += 2)  		buffer [i] = rowb [j];  	// 16 bits in 1 byte: this discards the LSB!!!  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToByte,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	Array.Copy (rowb' 1' buffer' 0' bytesRead);  } else {  	// 16 bitspc  	for (int i = 0' j = 1; j < bytesRead; i++' j += 2)  		buffer [i] = rowb [j];  	// 16 bits in 1 byte: this discards the LSB!!!  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToByte,The following statement contains a magic number: for (int i = 0' j = 1; j < bytesRead; i++' j += 2)  	buffer [i] = rowb [j];  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,decodeLastReadRowToByte,The following statement contains a magic number: j += 2
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowsInt,The following statement contains a magic number: if (!interlaced) {  	for (int j = 0; j < ImgInfo.Rows; j++) {  		int bytesread = ReadRowRaw (j);  		// read and perhaps discards  		int mrow = imlines.ImageRowToMatrixRowStrict (j);  		if (mrow >= 0)  			decodeLastReadRowToInt (imlines.Scanlines [mrow]' bytesread);  	}  } else {  	// and now' for something completely different (interlaced)  	int[] buf = new int[unpackedMode ? ImgInfo.SamplesPerRow : ImgInfo.SamplesPerRowPacked];  	for (int p = 1; p <= 7; p++) {  		deinterlacer.setPass (p);  		for (int i = 0; i < deinterlacer.getRows (); i++) {  			int bytesread = ReadRowRaw (i);  			int j = deinterlacer.getCurrRowReal ();  			int mrow = imlines.ImageRowToMatrixRowStrict (j);  			if (mrow >= 0) {  				decodeLastReadRowToInt (buf' bytesread);  				deinterlacer.deinterlaceInt (buf' imlines.Scanlines [mrow]' !unpackedMode);  			}  		}  	}  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowsInt,The following statement contains a magic number: for (int p = 1; p <= 7; p++) {  	deinterlacer.setPass (p);  	for (int i = 0; i < deinterlacer.getRows (); i++) {  		int bytesread = ReadRowRaw (i);  		int j = deinterlacer.getCurrRowReal ();  		int mrow = imlines.ImageRowToMatrixRowStrict (j);  		if (mrow >= 0) {  			decodeLastReadRowToInt (buf' bytesread);  			deinterlacer.deinterlaceInt (buf' imlines.Scanlines [mrow]' !unpackedMode);  		}  	}  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowsByte,The following statement contains a magic number: if (!interlaced) {  	for (int j = 0; j < ImgInfo.Rows; j++) {  		int bytesread = ReadRowRaw (j);  		// read and perhaps discards  		int mrow = imlines.ImageRowToMatrixRowStrict (j);  		if (mrow >= 0)  			decodeLastReadRowToByte (imlines.ScanlinesB [mrow]' bytesread);  	}  } else {  	// and now' for something completely different (interlaced)  	byte[] buf = new byte[unpackedMode ? ImgInfo.SamplesPerRow : ImgInfo.SamplesPerRowPacked];  	for (int p = 1; p <= 7; p++) {  		deinterlacer.setPass (p);  		for (int i = 0; i < deinterlacer.getRows (); i++) {  			int bytesread = ReadRowRaw (i);  			int j = deinterlacer.getCurrRowReal ();  			int mrow = imlines.ImageRowToMatrixRowStrict (j);  			if (mrow >= 0) {  				decodeLastReadRowToByte (buf' bytesread);  				deinterlacer.deinterlaceByte (buf' imlines.ScanlinesB [mrow]' !unpackedMode);  			}  		}  	}  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowsByte,The following statement contains a magic number: for (int p = 1; p <= 7; p++) {  	deinterlacer.setPass (p);  	for (int i = 0; i < deinterlacer.getRows (); i++) {  		int bytesread = ReadRowRaw (i);  		int j = deinterlacer.getCurrRowReal ();  		int mrow = imlines.ImageRowToMatrixRowStrict (j);  		if (mrow >= 0) {  			decodeLastReadRowToByte (buf' bytesread);  			deinterlacer.deinterlaceByte (buf' imlines.ScanlinesB [mrow]' !unpackedMode);  		}  	}  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The following statement contains a magic number: if (interlaced) {  	if (nrow < 0 || nrow > deinterlacer.getRows () || (nrow != 0 && nrow != deinterlacer.getCurrRowSubimg () + 1))  		throw new PngjInputException ("invalid row in interlaced mode: " + nrow);  	deinterlacer.setRow (nrow);  	bytesRead = (ImgInfo.BitspPixel * deinterlacer.getPixelsToRead () + 7) / 8;  	if (bytesRead < 1)  		throw new PngjExceptionInternal ("wtf??");  } else {  	// check for non interlaced  	if (nrow < 0 || nrow >= ImgInfo.Rows || nrow != rowNum + 1)  		throw new PngjInputException ("invalid row: " + nrow);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The following statement contains a magic number: if (interlaced) {  	if (nrow < 0 || nrow > deinterlacer.getRows () || (nrow != 0 && nrow != deinterlacer.getCurrRowSubimg () + 1))  		throw new PngjInputException ("invalid row in interlaced mode: " + nrow);  	deinterlacer.setRow (nrow);  	bytesRead = (ImgInfo.BitspPixel * deinterlacer.getPixelsToRead () + 7) / 8;  	if (bytesRead < 1)  		throw new PngjExceptionInternal ("wtf??");  } else {  	// check for non interlaced  	if (nrow < 0 || nrow >= ImgInfo.Rows || nrow != rowNum + 1)  		throw new PngjInputException ("invalid row: " + nrow);  }  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The following statement contains a magic number: bytesRead = (ImgInfo.BitspPixel * deinterlacer.getPixelsToRead () + 7) / 8;  
Magic Number,Hjg.Pngcs,PngReader,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngReader.cs,ReadRowRaw,The following statement contains a magic number: bytesRead = (ImgInfo.BitspPixel * deinterlacer.getPixelsToRead () + 7) / 8;  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,PngWriter,The following statement contains a magic number: this.CompLevel = 6;  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (byte x in row) {  			// optimized  			rowb [j++] = x;  		}  	} else {  		// 16 bitspc  		foreach (byte x in row) {  			// optimized  			rowb [j] = x;  			j += 2;  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceByte (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = row [i];  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = row [i];  			rowb [j++] = 0;  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (byte x in row) {  			// optimized  			rowb [j++] = x;  		}  	} else {  		// 16 bitspc  		foreach (byte x in row) {  			// optimized  			rowb [j] = x;  			j += 2;  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceByte (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = row [i];  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = row [i];  			rowb [j++] = 0;  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (byte x in row) {  			// optimized  			rowb [j++] = x;  		}  	} else {  		// 16 bitspc  		foreach (byte x in row) {  			// optimized  			rowb [j] = x;  			j += 2;  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceByte (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = row [i];  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = row [i];  			rowb [j++] = 0;  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	foreach (byte x in row) {  		// optimized  		rowb [j++] = x;  	}  } else {  	// 16 bitspc  	foreach (byte x in row) {  		// optimized  		rowb [j] = x;  		j += 2;  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	foreach (byte x in row) {  		// optimized  		rowb [j++] = x;  	}  } else {  	// 16 bitspc  	foreach (byte x in row) {  		// optimized  		rowb [j] = x;  		j += 2;  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: foreach (byte x in row) {  	// optimized  	rowb [j] = x;  	j += 2;  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: j += 2;  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromByte,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  		rowb [j++] = row [i];  	}  } else {  	// 16 bitspc  	for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  		rowb [j++] = row [i];  		rowb [j++] = 0;  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)x;  		}  	} else {  		// 16 bitspc  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)(x >> 8);  			rowb [j++] = (byte)(x);  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceInt (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i]);  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i] >> 8);  			rowb [j++] = (byte)(row [i]);  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)x;  		}  	} else {  		// 16 bitspc  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)(x >> 8);  			rowb [j++] = (byte)(x);  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceInt (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i]);  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i] >> 8);  			rowb [j++] = (byte)(row [i]);  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)x;  		}  	} else {  		// 16 bitspc  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)(x >> 8);  			rowb [j++] = (byte)(x);  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceInt (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i]);  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i] >> 8);  			rowb [j++] = (byte)(row [i]);  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (row.Length == ImgInfo.SamplesPerRowPacked && !needsPack) {  	// some duplication of code - because this case is typical and it works faster this way  	int j = 1;  	if (ImgInfo.BitDepth <= 8) {  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)x;  		}  	} else {  		// 16 bitspc  		foreach (int x in row) {  			// optimized  			rowb [j++] = (byte)(x >> 8);  			rowb [j++] = (byte)(x);  		}  	}  } else {  	// perhaps we need to pack?  	if (row.Length >= ImgInfo.SamplesPerRow && needsPack)  		ImageLine.packInplaceInt (ImgInfo' row' row' false);  	// row is packed in place!  	if (ImgInfo.BitDepth <= 8) {  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i]);  		}  	} else {  		// 16 bitspc  		for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  			rowb [j++] = (byte)(row [i] >> 8);  			rowb [j++] = (byte)(row [i]);  		}  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	foreach (int x in row) {  		// optimized  		rowb [j++] = (byte)x;  	}  } else {  	// 16 bitspc  	foreach (int x in row) {  		// optimized  		rowb [j++] = (byte)(x >> 8);  		rowb [j++] = (byte)(x);  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	foreach (int x in row) {  		// optimized  		rowb [j++] = (byte)x;  	}  } else {  	// 16 bitspc  	foreach (int x in row) {  		// optimized  		rowb [j++] = (byte)(x >> 8);  		rowb [j++] = (byte)(x);  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: foreach (int x in row) {  	// optimized  	rowb [j++] = (byte)(x >> 8);  	rowb [j++] = (byte)(x);  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: rowb [j++] = (byte)(x >> 8);  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  		rowb [j++] = (byte)(row [i]);  	}  } else {  	// 16 bitspc  	for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  		rowb [j++] = (byte)(row [i] >> 8);  		rowb [j++] = (byte)(row [i]);  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: if (ImgInfo.BitDepth <= 8) {  	for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  		rowb [j++] = (byte)(row [i]);  	}  } else {  	// 16 bitspc  	for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  		rowb [j++] = (byte)(row [i] >> 8);  		rowb [j++] = (byte)(row [i]);  	}  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: for (int i = 0' j = 1; i < ImgInfo.SamplesPerRowPacked; i++) {  	rowb [j++] = (byte)(row [i] >> 8);  	rowb [j++] = (byte)(row [i]);  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,encodeRowFromInt,The following statement contains a magic number: rowb [j++] = (byte)(row [i] >> 8);  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,FilterRowAverage,The following statement contains a magic number: for (j = 1 - ImgInfo.BytesPixel' i = 1; i <= imax; i++' j++) {  	rowbfilter [i] = (byte)(rowb [i] - ((rowbprev [i]) + (j > 0 ? rowb [j] : (byte)0)) / 2);  }  
Magic Number,Hjg.Pngcs,PngWriter,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\PngWriter.cs,FilterRowAverage,The following statement contains a magic number: rowbfilter [i] = (byte)(rowb [i] - ((rowbprev [i]) + (j > 0 ? rowb [j] : (byte)0)) / 2);  
Magic Number,Hjg.Pngcs,ProgressiveOutputStream,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\ProgressiveOutputStream.cs,ProgressiveOutputStream,The following statement contains a magic number: if (size < 8)  	throw new PngjException ("bad size for ProgressiveOutputStream: " + size);  
Magic Number,Hjg.Pngcs.Zlib,Adler32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\Adler32.cs,GetValue,The following statement contains a magic number: return (b << 16) | a;  
Magic Number,Hjg.Pngcs.Zlib,CRC32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\CRC32.cs,Update,The following statement contains a magic number: for (int i = 0' j = start; i < length; i++' j++) {  	unchecked {  		hash = (hash >> 8) ^ table [buffer [j] ^ hash & 0xff];  	}  }  
Magic Number,Hjg.Pngcs.Zlib,CRC32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\CRC32.cs,Update,The following statement contains a magic number: unchecked {  	hash = (hash >> 8) ^ table [buffer [j] ^ hash & 0xff];  }  
Magic Number,Hjg.Pngcs.Zlib,CRC32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\CRC32.cs,Update,The following statement contains a magic number: hash = (hash >> 8) ^ table [buffer [j] ^ hash & 0xff];  
Magic Number,Hjg.Pngcs.Zlib,CRC32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\CRC32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	UInt32 entry = (UInt32)i;  	for (int j = 0; j < 8; j++)  		if ((entry & 1) == 1)  			entry = (entry >> 1) ^ polynomial;  		else  			entry = entry >> 1;  	createTable [i] = entry;  }  
Magic Number,Hjg.Pngcs.Zlib,CRC32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\CRC32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	UInt32 entry = (UInt32)i;  	for (int j = 0; j < 8; j++)  		if ((entry & 1) == 1)  			entry = (entry >> 1) ^ polynomial;  		else  			entry = entry >> 1;  	createTable [i] = entry;  }  
Magic Number,Hjg.Pngcs.Zlib,CRC32,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Zlib\CRC32.cs,InitializeTable,The following statement contains a magic number: for (int j = 0; j < 8; j++)  	if ((entry & 1) == 1)  		entry = (entry >> 1) ^ polynomial;  	else  		entry = entry >> 1;  
Missing Default,Hjg.Pngcs.Chunks,ChunkHelper,F:\newReposMay17\devedse_DeveMazeGenerator\Hjg.Pngcs\Chunks\ChunkHelper.cs,ShouldLoad,The following switch statement is missing a default case: switch (behav) {  case ChunkLoadBehaviour.LOAD_CHUNK_ALWAYS:  	return true;  case ChunkLoadBehaviour.LOAD_CHUNK_IF_SAFE:  	return kwown || IsSafeToCopy (id);  case ChunkLoadBehaviour.LOAD_CHUNK_KNOWN:  	return kwown;  case ChunkLoadBehaviour.LOAD_CHUNK_NEVER:  	return false;  }  
