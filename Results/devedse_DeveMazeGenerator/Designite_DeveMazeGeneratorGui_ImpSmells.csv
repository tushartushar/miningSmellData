Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The method has 115 lines of code.
Long Method,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The method has 973 lines of code.
Complex Method,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,PrintQuatroList,Cyclomatic complexity of the method is 19
Long Identifier,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the parameter ienumerablePathBasedOnDirections is 32.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The length of the statement  "		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null); " is 124.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The length of the statement  "			var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null); " is 124.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The length of the statement  "			var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null); " is 124.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button11_Click,The length of the statement  "		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (width - 3' height - 3)' maze.InnerMap' null); " is 127.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button13_Click,The length of the statement  "							m.SaveMazeAsImage ("longestpath\\" + path.Count.ToString () + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits); " is 123.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button14_Click,The length of the statement  "							m.SaveMazeAsImage ("shortestpath\\" + path.Count.ToString () + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits); " is 124.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,GenerateMazeInPanel1,The length of the statement  "	Maze m = new AlgorithmBacktrack ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => { " is 131.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,timer1_Tick,The length of the statement  "	long perSecond = (long)Math.Max ((1.0 / stopwatchTimeSinceLastTimerTick.Elapsed.TotalSeconds * (double)(currentStepsToCalcPercentage - lastSteps))' 0.0); " is 153.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,timer1_Tick,The length of the statement  "	label8.Text = ConvertNumberToNiceString (currentStepsToCalcPercentage) + " / " + ConvertNumberToNiceString (totalStepsToCalcPercentage); " is 136.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The length of the statement  "		Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => { " is 123.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The length of the statement  "			walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList (); " is 125.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The length of the statement  "			walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList (); " is 171.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The length of the statement  "			walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList (); " is 236.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The length of the statement  "			maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits); " is 163.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button33_Click,The length of the statement  "		Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' randomnow' (x' y' cur' tot) => { " is 129.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button36_Click,The length of the statement  "				lastMegaTerrorMaze.SaveMazeAsImage ("megaterrormaze-" + DateTime.Now.Ticks + ".png"' ImageFormat.Png' lastMegaTerrorMazePath' MazeSaveType.ColorDepth4Bits); " is 156.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The length of the statement  "		AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 curalg = new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 (); " is 158.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The length of the statement  "		Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => { " is 134.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button42_Click,The length of the statement  "		lastMegaTerrorMazeQuatroDirections = PathFinderDepthFirstSmartAndSmartMemory.GoFind (lastMegaTerrorMaze.InnerMap' null); " is 120.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button42_Click,The length of the statement  "		DebugMSG ("Directions found in " + w.Elapsed.TotalSeconds + " seconds' length: " + lastMegaTerrorMazeQuatroDirections.Count); " is 125.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button43_Click,The length of the statement  "		var generatedPathCount = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (lastMegaTerrorMazeQuatroDirections' lastMegaTerrorMaze.InnerMap).LongCount (); " is 172.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button44_Click,The length of the statement  "		var ienumerablePath = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (lastMegaTerrorMazeQuatroDirections' lastMegaTerrorMaze.InnerMap); " is 156.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button44_Click,The length of the statement  "		DebugMSG ("Path based on directions found and filtered in " + w.Elapsed.TotalSeconds + " seconds' length of the first '" + Maze.LineChunks + "' Y lines: " + longCount); " is 168.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the statement  "			var formattedFileName = string.Format ("MegaTerrorMaze-{0}-{1}-{2}.{3}"' "{0}"' useTiles ? "WithTiles" : "NoTiles"' useColorMap ? "WithColorMap" : "NoColorMap"' mazeSaveFileType.ToString ().ToLower ()); " is 202.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the statement  "				var ienumerablePathBasedOnDirections = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (lastMegaTerrorMazeQuatroDirections' lastMegaTerrorMaze.InnerMap); " is 173.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the statement  "				saveResult = lastMegaTerrorMaze.SaveMazeAsImageDeluxeWithDynamicallyGeneratedPath (mazeSaveFileType' formattedFileName' ienumerablePathBasedOnDirections' callback' useTiles' useColorMap' useSplittedImages' x => DebugMSG ("MazeDbg: " + x)); " is 239.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the statement  "				saveResult = lastMegaTerrorMaze.SaveMazeAsImageDeluxe (mazeSaveFileType' formattedFileName' lastMegaTerrorMazePathPos' callback' useTiles' useColorMap); " is 152.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the statement  "				saveResult = lastMegaTerrorMaze.SaveMazeAsImageDeluxe (mazeSaveFileType' formattedFileName' lastMegaTerrorMazePath' callback' useTiles' useColorMap); " is 149.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,buttonSaveMazeAsImageDeluxe_Click,The length of the statement  "				saveResult = lastMegaTerrorMaze.SaveMazeAsImageDeluxe (mazeSaveFileType' formattedFileName' new List<MazePointPos> ()' callback' useTiles' useColorMap); " is 152.
Long Statement,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button45_Click,The length of the statement  "		//This is just a mocked maze that is not actually being read by the Testje function. That's why the size doesn't matter. " is 120.
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,Form1,The following statement contains a magic number: for (int i = 10; i < 30; i++) {  	comboBox4.Items.Add (ConvertNumberToNiceString ((long)Math.Pow (2' i)));  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,Form1,The following statement contains a magic number: for (int i = 10; i < 30; i++) {  	comboBox4.Items.Add (ConvertNumberToNiceString ((long)Math.Pow (2' i)));  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,Form1,The following statement contains a magic number: for (int i = 10; i < 30; i++) {  	comboBox4.Items.Add (ConvertNumberToNiceString ((long)Math.Pow (2' i)));  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,Form1,The following statement contains a magic number: comboBox4.Items.Add (ConvertNumberToNiceString ((long)Math.Pow (2' i)));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,Form1,The following statement contains a magic number: comboBox4.SelectedIndex = 9;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: Task.Run (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 10.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("zzzzzzzzzzz2.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button1_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("bigmazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	Parallel.For (0' 1000' options' new Action<int> (i => {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 1024;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}));  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("bigmazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	Parallel.For (0' 1000' options' new Action<int> (i => {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 1024;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}));  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("bigmazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	Parallel.For (0' 1000' options' new Action<int> (i => {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 1024;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}));  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("bigmazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	Parallel.For (0' 1000' options' new Action<int> (i => {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 1024;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}));  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("bigmazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	Parallel.For (0' 1000' options' new Action<int> (i => {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 1024;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}));  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("bigmazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	Parallel.For (0' 1000' options' new Action<int> (i => {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 1024;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}));  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Parallel.For (0' 1000' options' new Action<int> (i => {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 1024;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Parallel.For (0' 1000' options' new Action<int> (i => {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 1024;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Parallel.For (0' 1000' options' new Action<int> (i => {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 1024;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Parallel.For (0' 1000' options' new Action<int> (i => {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 1024;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Parallel.For (0' 1000' options' new Action<int> (i => {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 1024;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: Parallel.For (0' 1000' options' new Action<int> (i => {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 1024;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("bigmazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: if (i % 50 == 0) {  	DebugMSG (i / 10 + "%");  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: if (i % 50 == 0) {  	DebugMSG (i / 10 + "%");  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button3_Click,The following statement contains a magic number: DebugMSG (i / 10 + "%");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("mazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	for (int i = 0; i < 1000; i++) {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}  	;  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("mazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	for (int i = 0; i < 1000; i++) {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}  	;  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("mazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	for (int i = 0; i < 1000; i++) {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}  	;  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("mazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	for (int i = 0; i < 1000; i++) {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}  	;  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("mazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	for (int i = 0; i < 1000; i++) {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}  	;  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: Task.Run (() => {  	Directory.CreateDirectory ("mazes");  	Stopwatch w = new Stopwatch ();  	w.Start ();  	Algorithm alg = new AlgorithmBacktrack ();  	ParallelOptions options = new ParallelOptions ();  	//options.MaxDegreeOfParallelism = 8;  	for (int i = 0; i < 1000; i++) {  		if (i % 50 == 0) {  			DebugMSG (i / 10 + "%");  		}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  		maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	}  	;  	w.Stop ();  	DebugMSG ("Done: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	if (i % 50 == 0) {  		DebugMSG (i / 10 + "%");  	}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (size - 3' size - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazes\\" + i + ".bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: if (i % 50 == 0) {  	DebugMSG (i / 10 + "%");  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: if (i % 50 == 0) {  	DebugMSG (i / 10 + "%");  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button4_Click,The following statement contains a magic number: DebugMSG (i / 10 + "%");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	w.Start ();  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' null);  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("Time it took to find path: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Path length: " + path.Count);  	GC.Collect ();  	DebugMSG ("Saving...");  	w.Reset ();  	w.Start ();  	maze.SaveMazeAsImage ("bigmazeetc.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("bigmazeetc.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("Done saving' saving time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Location: " + System.IO.Directory.GetCurrentDirectory ());  	maze = null;  	path = null;  	GC.Collect ();  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button5_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: Task.Run (() => {  	Stopwatch w = new Stopwatch ();  	for (int y = 0; y < 10; y++) {  		DebugMSG ("----------------------");  		AlgorithmBacktrack alg = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  		w.Reset ();  		AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  		w.Reset ();  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: Task.Run (() => {  	Stopwatch w = new Stopwatch ();  	for (int y = 0; y < 10; y++) {  		DebugMSG ("----------------------");  		AlgorithmBacktrack alg = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  		w.Reset ();  		AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  		w.Reset ();  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: Task.Run (() => {  	Stopwatch w = new Stopwatch ();  	for (int y = 0; y < 10; y++) {  		DebugMSG ("----------------------");  		AlgorithmBacktrack alg = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  		w.Reset ();  		AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  		w.Reset ();  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: Task.Run (() => {  	Stopwatch w = new Stopwatch ();  	for (int y = 0; y < 10; y++) {  		DebugMSG ("----------------------");  		AlgorithmBacktrack alg = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  		w.Reset ();  		AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  		w.Reset ();  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: Task.Run (() => {  	Stopwatch w = new Stopwatch ();  	for (int y = 0; y < 10; y++) {  		DebugMSG ("----------------------");  		AlgorithmBacktrack alg = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  		w.Reset ();  		AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  		w.Start ();  		for (int i = 0; i < 800; i++) {  			//if (i % 50 == 0)  			//{  			//    DebugMSG(i / 10 + "%");  			//}  			int size = 256;  			Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  			//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  			//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  		}  		w.Stop ();  		DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  		w.Reset ();  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	DebugMSG ("----------------------");  	AlgorithmBacktrack alg = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  	w.Reset ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	DebugMSG ("----------------------");  	AlgorithmBacktrack alg = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  	w.Reset ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	DebugMSG ("----------------------");  	AlgorithmBacktrack alg = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  	w.Reset ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	DebugMSG ("----------------------");  	AlgorithmBacktrack alg = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  	w.Reset ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	DebugMSG ("----------------------");  	AlgorithmBacktrack alg = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack1: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	AlgorithmBacktrack alg2 = new AlgorithmBacktrack ();  	w.Start ();  	for (int i = 0; i < 800; i++) {  		//if (i % 50 == 0)  		//{  		//    DebugMSG(i / 10 + "%");  		//}  		int size = 256;  		Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  		//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  		//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  	}  	w.Stop ();  	DebugMSG ("Time AlgorithmBacktrack2: " + w.Elapsed.TotalSeconds);  	w.Reset ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int i = 0; i < 800; i++) {  	//if (i % 50 == 0)  	//{  	//    DebugMSG(i / 10 + "%");  	//}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  	//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int i = 0; i < 800; i++) {  	//if (i % 50 == 0)  	//{  	//    DebugMSG(i / 10 + "%");  	//}  	int size = 256;  	Maze maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  	//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int i = 0; i < 800; i++) {  	//if (i % 50 == 0)  	//{  	//    DebugMSG(i / 10 + "%");  	//}  	int size = 256;  	Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  	//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button9_Click,The following statement contains a magic number: for (int i = 0; i < 800; i++) {  	//if (i % 50 == 0)  	//{  	//    DebugMSG(i / 10 + "%");  	//}  	int size = 256;  	Maze maze = alg2.Generate (size' size' InnerMapType.BitArreintjeFast' i' null);  	//var path = PathFinderDepthFirstSmart.GoFind(new MazePoint(1' 1)' new MazePoint(size - 3' size - 3)' maze.InnerMap);  	//maze.SaveMazeAsBmpWithPath2("mazes\\" + i + ".bmp"' path);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button10_Click,The following statement contains a magic number: Task.Run (() => {  	DebugMSG ("Generating...");  	Stopwatch w = new Stopwatch ();  	AlgorithmBacktrack algje = new AlgorithmBacktrack ();  	w.Start ();  	algje.Generate (20000' 20000' InnerMapType.BitArreintjeFast' null);  	w.Stop ();  	DebugMSG ("Seconds it took: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button10_Click,The following statement contains a magic number: Task.Run (() => {  	DebugMSG ("Generating...");  	Stopwatch w = new Stopwatch ();  	AlgorithmBacktrack algje = new AlgorithmBacktrack ();  	w.Start ();  	algje.Generate (20000' 20000' InnerMapType.BitArreintjeFast' null);  	w.Stop ();  	DebugMSG ("Seconds it took: " + w.Elapsed.TotalSeconds);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button10_Click,The following statement contains a magic number: algje.Generate (20000' 20000' InnerMapType.BitArreintjeFast' null);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button10_Click,The following statement contains a magic number: algje.Generate (20000' 20000' InnerMapType.BitArreintjeFast' null);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button11_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 16;  	int height = 16;  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (width - 3' height - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazePath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("maze1.bmp"' ImageFormat.Bmp);  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	var walls = maze.GenerateListOfMazeWalls ();  	foreach (var wall in walls) {  		DebugMSG ("New wall found: " + wall.xstart + ":" + wall.ystart + "  " + wall.xend + ":" + wall.yend);  	}  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	loadedfromwall.SaveMazeAsImage ("maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button11_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 16;  	int height = 16;  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (width - 3' height - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazePath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("maze1.bmp"' ImageFormat.Bmp);  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	var walls = maze.GenerateListOfMazeWalls ();  	foreach (var wall in walls) {  		DebugMSG ("New wall found: " + wall.xstart + ":" + wall.ystart + "  " + wall.xend + ":" + wall.yend);  	}  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	loadedfromwall.SaveMazeAsImage ("maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button11_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 16;  	int height = 16;  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (width - 3' height - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazePath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("maze1.bmp"' ImageFormat.Bmp);  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	var walls = maze.GenerateListOfMazeWalls ();  	foreach (var wall in walls) {  		DebugMSG ("New wall found: " + wall.xstart + ":" + wall.ystart + "  " + wall.xend + ":" + wall.yend);  	}  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	loadedfromwall.SaveMazeAsImage ("maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button11_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 16;  	int height = 16;  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	var path = PathFinderDepthFirstSmart.GoFind (new MazePoint (1' 1)' new MazePoint (width - 3' height - 3)' maze.InnerMap' null);  	maze.SaveMazeAsImage ("mazePath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	maze.SaveMazeAsImage ("maze1.bmp"' ImageFormat.Bmp);  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	var walls = maze.GenerateListOfMazeWalls ();  	foreach (var wall in walls) {  		DebugMSG ("New wall found: " + wall.xstart + ":" + wall.ystart + "  " + wall.xend + ":" + wall.yend);  	}  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	loadedfromwall.SaveMazeAsImage ("maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button12_Click,The following statement contains a magic number: try {  	DebugMSG ("---------------");  	int size = 2048;  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BitArrayMappedOnHardDisk' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BitArreintjeFast' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BooleanArray' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.DotNetBitArray' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.Hybrid' size);  } catch (Exception eee) {  	DebugMSG (eee.ToString ());  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 2500;  	int height = 600;  	List<InnerMapType> mapTypes = ((InnerMapType[])Enum.GetValues (typeof(InnerMapType))).ToList ();  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmBacktrackSmartMemory ());  	algjes.Add (new AlgorithmBacktrackFastWithoutAction ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMaze ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackList ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray3 ());  	DebugMSG ("Comparing all backtrack algorithms + all InnerMaps...");  	DebugMSG ("Generating reference maze...");  	Maze referenceMaze = back.Generate (width' height' InnerMapType.BooleanArray' 500' null);  	DebugMSG ("Generating reference done' generating all the other stuff...");  	foreach (var algje in algjes) {  		foreach (var innerMapType in mapTypes) {  			Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  			Boolean theyarethesame = true;  			try {  				for (int xx = 0; xx < width; xx++) {  					for (int yy = 0; yy < height; yy++) {  						if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  							theyarethesame = false;  						}  					}  				}  			} catch (Exception) {  				theyarethesame = false;  			}  			if (!theyarethesame) {  				DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  			} else {  				DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  			}  			Thread.Sleep (50);  			//Just in case random filenames are the same  		}  	}  	DebugMSG ("Done comparing algorithms + innermaps");  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArrayMappedOnHardDisk' null);  	DebugMSG ("Generating done :)");  	maze.SaveMazeAsImage ("test-maze1.bmp"' ImageFormat.Bmp);  	DebugMSG ("Maze saved");  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	DebugMSG ("Finding walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Walls found");  	DebugMSG ("Creating new Maze from walls...");  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	DebugMSG ("Created :)' saving this maze...");  	loadedfromwall.SaveMazeAsImage ("test-maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Done saving' creating path for this maze...");  	var path = PathFinderDepthFirst.GoFind (loadedfromwall.InnerMap' null);  	var path2 = PathFinderDepthFirstSmart.GoFind (loadedfromwall.InnerMap' null);  	DebugMSG ("Path found' comparing path from 2 different path finders...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	}  	DebugMSG ("Pathfinding done' saving this maze + path...");  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls from this thing again...");  	var walls2 = loadedfromwall.GenerateListOfMazeWalls ();  	DebugMSG ("Done with walls2");  	DebugMSG ("Creating and saving new maze for this...");  	Maze mmmmmm = Maze.LoadMazeFromWalls (walls2' width' height);  	mmmmmm.SaveMazeAsImage ("test-maze3.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done :)' comparing maze 1 and 3...");  	Boolean thesame = true;  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			if (maze.InnerMap [x' y] != mmmmmm.InnerMap [x' y]) {  				thesame = false;  			}  		}  	}  	if (thesame == false) {  		DebugMSG ("ERRORRRRRRR: Mazes are not the same...");  	} else {  		DebugMSG ("Mazes are the same :)");  		DebugMSG ("Check out if the generated files look correct (all files with test-....)");  		DebugMSG ("if they are (and no errors were displayed here)' all tests succeeded");  		DebugMSG ("and the base of the framework should work :>");  	}  	//Do a garbage collection afterwards  	new Thread (() => {  		Thread.Sleep (5000);  		GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  	}) {  		IsBackground = true  	}.Start ();  	DebugMSG ("Ok done :D");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 2500;  	int height = 600;  	List<InnerMapType> mapTypes = ((InnerMapType[])Enum.GetValues (typeof(InnerMapType))).ToList ();  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmBacktrackSmartMemory ());  	algjes.Add (new AlgorithmBacktrackFastWithoutAction ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMaze ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackList ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray3 ());  	DebugMSG ("Comparing all backtrack algorithms + all InnerMaps...");  	DebugMSG ("Generating reference maze...");  	Maze referenceMaze = back.Generate (width' height' InnerMapType.BooleanArray' 500' null);  	DebugMSG ("Generating reference done' generating all the other stuff...");  	foreach (var algje in algjes) {  		foreach (var innerMapType in mapTypes) {  			Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  			Boolean theyarethesame = true;  			try {  				for (int xx = 0; xx < width; xx++) {  					for (int yy = 0; yy < height; yy++) {  						if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  							theyarethesame = false;  						}  					}  				}  			} catch (Exception) {  				theyarethesame = false;  			}  			if (!theyarethesame) {  				DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  			} else {  				DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  			}  			Thread.Sleep (50);  			//Just in case random filenames are the same  		}  	}  	DebugMSG ("Done comparing algorithms + innermaps");  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArrayMappedOnHardDisk' null);  	DebugMSG ("Generating done :)");  	maze.SaveMazeAsImage ("test-maze1.bmp"' ImageFormat.Bmp);  	DebugMSG ("Maze saved");  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	DebugMSG ("Finding walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Walls found");  	DebugMSG ("Creating new Maze from walls...");  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	DebugMSG ("Created :)' saving this maze...");  	loadedfromwall.SaveMazeAsImage ("test-maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Done saving' creating path for this maze...");  	var path = PathFinderDepthFirst.GoFind (loadedfromwall.InnerMap' null);  	var path2 = PathFinderDepthFirstSmart.GoFind (loadedfromwall.InnerMap' null);  	DebugMSG ("Path found' comparing path from 2 different path finders...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	}  	DebugMSG ("Pathfinding done' saving this maze + path...");  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls from this thing again...");  	var walls2 = loadedfromwall.GenerateListOfMazeWalls ();  	DebugMSG ("Done with walls2");  	DebugMSG ("Creating and saving new maze for this...");  	Maze mmmmmm = Maze.LoadMazeFromWalls (walls2' width' height);  	mmmmmm.SaveMazeAsImage ("test-maze3.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done :)' comparing maze 1 and 3...");  	Boolean thesame = true;  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			if (maze.InnerMap [x' y] != mmmmmm.InnerMap [x' y]) {  				thesame = false;  			}  		}  	}  	if (thesame == false) {  		DebugMSG ("ERRORRRRRRR: Mazes are not the same...");  	} else {  		DebugMSG ("Mazes are the same :)");  		DebugMSG ("Check out if the generated files look correct (all files with test-....)");  		DebugMSG ("if they are (and no errors were displayed here)' all tests succeeded");  		DebugMSG ("and the base of the framework should work :>");  	}  	//Do a garbage collection afterwards  	new Thread (() => {  		Thread.Sleep (5000);  		GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  	}) {  		IsBackground = true  	}.Start ();  	DebugMSG ("Ok done :D");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 2500;  	int height = 600;  	List<InnerMapType> mapTypes = ((InnerMapType[])Enum.GetValues (typeof(InnerMapType))).ToList ();  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmBacktrackSmartMemory ());  	algjes.Add (new AlgorithmBacktrackFastWithoutAction ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMaze ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackList ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray3 ());  	DebugMSG ("Comparing all backtrack algorithms + all InnerMaps...");  	DebugMSG ("Generating reference maze...");  	Maze referenceMaze = back.Generate (width' height' InnerMapType.BooleanArray' 500' null);  	DebugMSG ("Generating reference done' generating all the other stuff...");  	foreach (var algje in algjes) {  		foreach (var innerMapType in mapTypes) {  			Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  			Boolean theyarethesame = true;  			try {  				for (int xx = 0; xx < width; xx++) {  					for (int yy = 0; yy < height; yy++) {  						if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  							theyarethesame = false;  						}  					}  				}  			} catch (Exception) {  				theyarethesame = false;  			}  			if (!theyarethesame) {  				DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  			} else {  				DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  			}  			Thread.Sleep (50);  			//Just in case random filenames are the same  		}  	}  	DebugMSG ("Done comparing algorithms + innermaps");  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArrayMappedOnHardDisk' null);  	DebugMSG ("Generating done :)");  	maze.SaveMazeAsImage ("test-maze1.bmp"' ImageFormat.Bmp);  	DebugMSG ("Maze saved");  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	DebugMSG ("Finding walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Walls found");  	DebugMSG ("Creating new Maze from walls...");  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	DebugMSG ("Created :)' saving this maze...");  	loadedfromwall.SaveMazeAsImage ("test-maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Done saving' creating path for this maze...");  	var path = PathFinderDepthFirst.GoFind (loadedfromwall.InnerMap' null);  	var path2 = PathFinderDepthFirstSmart.GoFind (loadedfromwall.InnerMap' null);  	DebugMSG ("Path found' comparing path from 2 different path finders...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	}  	DebugMSG ("Pathfinding done' saving this maze + path...");  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls from this thing again...");  	var walls2 = loadedfromwall.GenerateListOfMazeWalls ();  	DebugMSG ("Done with walls2");  	DebugMSG ("Creating and saving new maze for this...");  	Maze mmmmmm = Maze.LoadMazeFromWalls (walls2' width' height);  	mmmmmm.SaveMazeAsImage ("test-maze3.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done :)' comparing maze 1 and 3...");  	Boolean thesame = true;  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			if (maze.InnerMap [x' y] != mmmmmm.InnerMap [x' y]) {  				thesame = false;  			}  		}  	}  	if (thesame == false) {  		DebugMSG ("ERRORRRRRRR: Mazes are not the same...");  	} else {  		DebugMSG ("Mazes are the same :)");  		DebugMSG ("Check out if the generated files look correct (all files with test-....)");  		DebugMSG ("if they are (and no errors were displayed here)' all tests succeeded");  		DebugMSG ("and the base of the framework should work :>");  	}  	//Do a garbage collection afterwards  	new Thread (() => {  		Thread.Sleep (5000);  		GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  	}) {  		IsBackground = true  	}.Start ();  	DebugMSG ("Ok done :D");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 2500;  	int height = 600;  	List<InnerMapType> mapTypes = ((InnerMapType[])Enum.GetValues (typeof(InnerMapType))).ToList ();  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmBacktrackSmartMemory ());  	algjes.Add (new AlgorithmBacktrackFastWithoutAction ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMaze ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackList ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray3 ());  	DebugMSG ("Comparing all backtrack algorithms + all InnerMaps...");  	DebugMSG ("Generating reference maze...");  	Maze referenceMaze = back.Generate (width' height' InnerMapType.BooleanArray' 500' null);  	DebugMSG ("Generating reference done' generating all the other stuff...");  	foreach (var algje in algjes) {  		foreach (var innerMapType in mapTypes) {  			Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  			Boolean theyarethesame = true;  			try {  				for (int xx = 0; xx < width; xx++) {  					for (int yy = 0; yy < height; yy++) {  						if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  							theyarethesame = false;  						}  					}  				}  			} catch (Exception) {  				theyarethesame = false;  			}  			if (!theyarethesame) {  				DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  			} else {  				DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  			}  			Thread.Sleep (50);  			//Just in case random filenames are the same  		}  	}  	DebugMSG ("Done comparing algorithms + innermaps");  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArrayMappedOnHardDisk' null);  	DebugMSG ("Generating done :)");  	maze.SaveMazeAsImage ("test-maze1.bmp"' ImageFormat.Bmp);  	DebugMSG ("Maze saved");  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	DebugMSG ("Finding walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Walls found");  	DebugMSG ("Creating new Maze from walls...");  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	DebugMSG ("Created :)' saving this maze...");  	loadedfromwall.SaveMazeAsImage ("test-maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Done saving' creating path for this maze...");  	var path = PathFinderDepthFirst.GoFind (loadedfromwall.InnerMap' null);  	var path2 = PathFinderDepthFirstSmart.GoFind (loadedfromwall.InnerMap' null);  	DebugMSG ("Path found' comparing path from 2 different path finders...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	}  	DebugMSG ("Pathfinding done' saving this maze + path...");  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls from this thing again...");  	var walls2 = loadedfromwall.GenerateListOfMazeWalls ();  	DebugMSG ("Done with walls2");  	DebugMSG ("Creating and saving new maze for this...");  	Maze mmmmmm = Maze.LoadMazeFromWalls (walls2' width' height);  	mmmmmm.SaveMazeAsImage ("test-maze3.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done :)' comparing maze 1 and 3...");  	Boolean thesame = true;  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			if (maze.InnerMap [x' y] != mmmmmm.InnerMap [x' y]) {  				thesame = false;  			}  		}  	}  	if (thesame == false) {  		DebugMSG ("ERRORRRRRRR: Mazes are not the same...");  	} else {  		DebugMSG ("Mazes are the same :)");  		DebugMSG ("Check out if the generated files look correct (all files with test-....)");  		DebugMSG ("if they are (and no errors were displayed here)' all tests succeeded");  		DebugMSG ("and the base of the framework should work :>");  	}  	//Do a garbage collection afterwards  	new Thread (() => {  		Thread.Sleep (5000);  		GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  	}) {  		IsBackground = true  	}.Start ();  	DebugMSG ("Ok done :D");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 2500;  	int height = 600;  	List<InnerMapType> mapTypes = ((InnerMapType[])Enum.GetValues (typeof(InnerMapType))).ToList ();  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmBacktrackSmartMemory ());  	algjes.Add (new AlgorithmBacktrackFastWithoutAction ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMaze ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackList ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray3 ());  	DebugMSG ("Comparing all backtrack algorithms + all InnerMaps...");  	DebugMSG ("Generating reference maze...");  	Maze referenceMaze = back.Generate (width' height' InnerMapType.BooleanArray' 500' null);  	DebugMSG ("Generating reference done' generating all the other stuff...");  	foreach (var algje in algjes) {  		foreach (var innerMapType in mapTypes) {  			Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  			Boolean theyarethesame = true;  			try {  				for (int xx = 0; xx < width; xx++) {  					for (int yy = 0; yy < height; yy++) {  						if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  							theyarethesame = false;  						}  					}  				}  			} catch (Exception) {  				theyarethesame = false;  			}  			if (!theyarethesame) {  				DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  			} else {  				DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  			}  			Thread.Sleep (50);  			//Just in case random filenames are the same  		}  	}  	DebugMSG ("Done comparing algorithms + innermaps");  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArrayMappedOnHardDisk' null);  	DebugMSG ("Generating done :)");  	maze.SaveMazeAsImage ("test-maze1.bmp"' ImageFormat.Bmp);  	DebugMSG ("Maze saved");  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	DebugMSG ("Finding walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Walls found");  	DebugMSG ("Creating new Maze from walls...");  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	DebugMSG ("Created :)' saving this maze...");  	loadedfromwall.SaveMazeAsImage ("test-maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Done saving' creating path for this maze...");  	var path = PathFinderDepthFirst.GoFind (loadedfromwall.InnerMap' null);  	var path2 = PathFinderDepthFirstSmart.GoFind (loadedfromwall.InnerMap' null);  	DebugMSG ("Path found' comparing path from 2 different path finders...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	}  	DebugMSG ("Pathfinding done' saving this maze + path...");  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls from this thing again...");  	var walls2 = loadedfromwall.GenerateListOfMazeWalls ();  	DebugMSG ("Done with walls2");  	DebugMSG ("Creating and saving new maze for this...");  	Maze mmmmmm = Maze.LoadMazeFromWalls (walls2' width' height);  	mmmmmm.SaveMazeAsImage ("test-maze3.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done :)' comparing maze 1 and 3...");  	Boolean thesame = true;  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			if (maze.InnerMap [x' y] != mmmmmm.InnerMap [x' y]) {  				thesame = false;  			}  		}  	}  	if (thesame == false) {  		DebugMSG ("ERRORRRRRRR: Mazes are not the same...");  	} else {  		DebugMSG ("Mazes are the same :)");  		DebugMSG ("Check out if the generated files look correct (all files with test-....)");  		DebugMSG ("if they are (and no errors were displayed here)' all tests succeeded");  		DebugMSG ("and the base of the framework should work :>");  	}  	//Do a garbage collection afterwards  	new Thread (() => {  		Thread.Sleep (5000);  		GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  	}) {  		IsBackground = true  	}.Start ();  	DebugMSG ("Ok done :D");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 2500;  	int height = 600;  	List<InnerMapType> mapTypes = ((InnerMapType[])Enum.GetValues (typeof(InnerMapType))).ToList ();  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmBacktrackSmartMemory ());  	algjes.Add (new AlgorithmBacktrackFastWithoutAction ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMaze ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackList ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray2 ());  	algjes.Add (new AlgorithmBacktrackFastWithoutActionAndMazeAndFastRandomFastStackArray3 ());  	DebugMSG ("Comparing all backtrack algorithms + all InnerMaps...");  	DebugMSG ("Generating reference maze...");  	Maze referenceMaze = back.Generate (width' height' InnerMapType.BooleanArray' 500' null);  	DebugMSG ("Generating reference done' generating all the other stuff...");  	foreach (var algje in algjes) {  		foreach (var innerMapType in mapTypes) {  			Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  			Boolean theyarethesame = true;  			try {  				for (int xx = 0; xx < width; xx++) {  					for (int yy = 0; yy < height; yy++) {  						if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  							theyarethesame = false;  						}  					}  				}  			} catch (Exception) {  				theyarethesame = false;  			}  			if (!theyarethesame) {  				DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  			} else {  				DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  			}  			Thread.Sleep (50);  			//Just in case random filenames are the same  		}  	}  	DebugMSG ("Done comparing algorithms + innermaps");  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArrayMappedOnHardDisk' null);  	DebugMSG ("Generating done :)");  	maze.SaveMazeAsImage ("test-maze1.bmp"' ImageFormat.Bmp);  	DebugMSG ("Maze saved");  	//foreach (var v in maze.InnerMap)  	//{  	//    v.Print();  	//}  	DebugMSG ("Finding walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Walls found");  	DebugMSG ("Creating new Maze from walls...");  	Maze loadedfromwall = Maze.LoadMazeFromWalls (walls' width' height);  	DebugMSG ("Created :)' saving this maze...");  	loadedfromwall.SaveMazeAsImage ("test-maze2.bmp"' ImageFormat.Bmp);  	DebugMSG ("Done saving' creating path for this maze...");  	var path = PathFinderDepthFirst.GoFind (loadedfromwall.InnerMap' null);  	var path2 = PathFinderDepthFirstSmart.GoFind (loadedfromwall.InnerMap' null);  	DebugMSG ("Path found' comparing path from 2 different path finders...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	}  	DebugMSG ("Pathfinding done' saving this maze + path...");  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath4bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	loadedfromwall.SaveMazeAsImage ("test-mazePath32bpp.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls from this thing again...");  	var walls2 = loadedfromwall.GenerateListOfMazeWalls ();  	DebugMSG ("Done with walls2");  	DebugMSG ("Creating and saving new maze for this...");  	Maze mmmmmm = Maze.LoadMazeFromWalls (walls2' width' height);  	mmmmmm.SaveMazeAsImage ("test-maze3.bmp"' ImageFormat.Bmp);  	DebugMSG ("Ok done :)' comparing maze 1 and 3...");  	Boolean thesame = true;  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			if (maze.InnerMap [x' y] != mmmmmm.InnerMap [x' y]) {  				thesame = false;  			}  		}  	}  	if (thesame == false) {  		DebugMSG ("ERRORRRRRRR: Mazes are not the same...");  	} else {  		DebugMSG ("Mazes are the same :)");  		DebugMSG ("Check out if the generated files look correct (all files with test-....)");  		DebugMSG ("if they are (and no errors were displayed here)' all tests succeeded");  		DebugMSG ("and the base of the framework should work :>");  	}  	//Do a garbage collection afterwards  	new Thread (() => {  		Thread.Sleep (5000);  		GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  	}) {  		IsBackground = true  	}.Start ();  	DebugMSG ("Ok done :D");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: foreach (var algje in algjes) {  	foreach (var innerMapType in mapTypes) {  		Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  		Boolean theyarethesame = true;  		try {  			for (int xx = 0; xx < width; xx++) {  				for (int yy = 0; yy < height; yy++) {  					if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  						theyarethesame = false;  					}  				}  			}  		} catch (Exception) {  			theyarethesame = false;  		}  		if (!theyarethesame) {  			DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  		} else {  			DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  		}  		Thread.Sleep (50);  		//Just in case random filenames are the same  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: foreach (var algje in algjes) {  	foreach (var innerMapType in mapTypes) {  		Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  		Boolean theyarethesame = true;  		try {  			for (int xx = 0; xx < width; xx++) {  				for (int yy = 0; yy < height; yy++) {  					if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  						theyarethesame = false;  					}  				}  			}  		} catch (Exception) {  			theyarethesame = false;  		}  		if (!theyarethesame) {  			DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  		} else {  			DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  		}  		Thread.Sleep (50);  		//Just in case random filenames are the same  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: foreach (var innerMapType in mapTypes) {  	Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  	Boolean theyarethesame = true;  	try {  		for (int xx = 0; xx < width; xx++) {  			for (int yy = 0; yy < height; yy++) {  				if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  					theyarethesame = false;  				}  			}  		}  	} catch (Exception) {  		theyarethesame = false;  	}  	if (!theyarethesame) {  		DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  	} else {  		DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  	}  	Thread.Sleep (50);  	//Just in case random filenames are the same  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: foreach (var innerMapType in mapTypes) {  	Maze tocompare = algje.Generate (width' height' innerMapType' 500' null);  	Boolean theyarethesame = true;  	try {  		for (int xx = 0; xx < width; xx++) {  			for (int yy = 0; yy < height; yy++) {  				if (referenceMaze.InnerMap [xx' yy] != tocompare.InnerMap [xx' yy]) {  					theyarethesame = false;  				}  			}  		}  	} catch (Exception) {  		theyarethesame = false;  	}  	if (!theyarethesame) {  		DebugMSG ("ERRRROR: " + algje.GetType ().Name + "' " + innerMapType);  	} else {  		DebugMSG (algje.GetType ().Name + "' " + innerMapType + " success :)");  	}  	Thread.Sleep (50);  	//Just in case random filenames are the same  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: new Thread (() => {  	Thread.Sleep (5000);  	GC.Collect (int.MaxValue' GCCollectionMode.Forced' true);  }) {  	IsBackground = true  }.Start ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button17_Click,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button18_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 1024 * 8;  	int height = 1024 * 8;  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	DebugMSG ("Generating done");  	DebugMSG ("Saving as bmp");  	maze.SaveMazeAsImage ("mazeSavedDirectly.bmp"' ImageFormat.Bmp);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Generating walls done :)");  	DebugMSG ("Saving walls to file...");  	using (FileStream stream = new FileStream ("mazeSavedAsWalls.txt"' FileMode.Create)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			foreach (MazeWall w in walls) {  				writer.Write (w.xstart);  				writer.Write (w.xend);  				writer.Write (w.ystart);  				writer.Write (w.yend);  			}  		}  	}  	DebugMSG ("Everything done \\o/");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button18_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 1024 * 8;  	int height = 1024 * 8;  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	DebugMSG ("Generating done");  	DebugMSG ("Saving as bmp");  	maze.SaveMazeAsImage ("mazeSavedDirectly.bmp"' ImageFormat.Bmp);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Generating walls done :)");  	DebugMSG ("Saving walls to file...");  	using (FileStream stream = new FileStream ("mazeSavedAsWalls.txt"' FileMode.Create)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			foreach (MazeWall w in walls) {  				writer.Write (w.xstart);  				writer.Write (w.xend);  				writer.Write (w.ystart);  				writer.Write (w.yend);  			}  		}  	}  	DebugMSG ("Everything done \\o/");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button18_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 1024 * 8;  	int height = 1024 * 8;  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	DebugMSG ("Generating done");  	DebugMSG ("Saving as bmp");  	maze.SaveMazeAsImage ("mazeSavedDirectly.bmp"' ImageFormat.Bmp);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Generating walls done :)");  	DebugMSG ("Saving walls to file...");  	using (FileStream stream = new FileStream ("mazeSavedAsWalls.txt"' FileMode.Create)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			foreach (MazeWall w in walls) {  				writer.Write (w.xstart);  				writer.Write (w.xend);  				writer.Write (w.ystart);  				writer.Write (w.yend);  			}  		}  	}  	DebugMSG ("Everything done \\o/");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button18_Click,The following statement contains a magic number: Task.Run (() => {  	AlgorithmBacktrack back = new AlgorithmBacktrack ();  	int width = 1024 * 8;  	int height = 1024 * 8;  	DebugMSG ("Generating maze of size: " + width + " * " + height);  	Maze maze = back.Generate (width' height' InnerMapType.BitArreintjeFast' null);  	DebugMSG ("Generating done");  	DebugMSG ("Saving as bmp");  	maze.SaveMazeAsImage ("mazeSavedDirectly.bmp"' ImageFormat.Bmp);  	DebugMSG ("Saving done :)");  	DebugMSG ("Generating walls...");  	var walls = maze.GenerateListOfMazeWalls ();  	DebugMSG ("Generating walls done :)");  	DebugMSG ("Saving walls to file...");  	using (FileStream stream = new FileStream ("mazeSavedAsWalls.txt"' FileMode.Create)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			foreach (MazeWall w in walls) {  				writer.Write (w.xstart);  				writer.Write (w.xend);  				writer.Write (w.ystart);  				writer.Write (w.yend);  			}  		}  	}  	DebugMSG ("Everything done \\o/");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button19_Click,The following statement contains a magic number: try {  	DebugMSG ("---------------");  	int size = 2048 * 8;  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BitArreintjeFast' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BooleanArray' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.DotNetBitArray' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.Hybrid' size);  } catch (Exception eee) {  	DebugMSG (eee.ToString ());  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button19_Click,The following statement contains a magic number: try {  	DebugMSG ("---------------");  	int size = 2048 * 8;  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BitArreintjeFast' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.BooleanArray' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.DotNetBitArray' size);  	GenerateMazeWithThisTypeAndShowTime (InnerMapType.Hybrid' size);  } catch (Exception eee) {  	DebugMSG (eee.ToString ());  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.Black' 0' 0' this.Width + 1' this.Height + 1);  	Algorithm curalg;  	if (r.Next (2) == 0) {  		curalg = new AlgorithmBacktrack ();  	} else {  		curalg = new AlgorithmKruskal ();  	}  	Maze m = curalg.Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button20_Click,The following statement contains a magic number: if (r.Next (2) == 0) {  	curalg = new AlgorithmBacktrack ();  } else {  	curalg = new AlgorithmKruskal ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button21_Click,The following statement contains a magic number: Task.Run (() => {  	int size = 2048 * 2;  	DebugMSG ("Generating...");  	Maze m = new AlgorithmBacktrack ().Generate (size' size' InnerMapType.BitArreintjeFast' null);  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' null);  	DebugMSG ("Saving...");  	DebugMSG ("0/4");  	m.SaveMazeAsImage ("zz4bitpath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("1/4");  	m.SaveMazeAsImage ("zz32bitpath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("2/4");  	m.SaveMazeAsImage ("zz4bitpath.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("3/4");  	m.SaveMazeAsImage ("zz32bitpath.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("4/4");  	DebugMSG ("Done with images :)");  	DebugMSG ("Just saving the maze as walls...");  	var walls = m.GenerateListOfMazeWalls ();  	using (FileStream stream = new FileStream ("mazeSavedAsWalls.txt"' FileMode.Create)) {  		BinaryWriter writer = new BinaryWriter (stream);  		foreach (MazeWall w in walls) {  			writer.Write (w.xstart);  			writer.Write (w.xend);  			writer.Write (w.ystart);  			writer.Write (w.yend);  		}  	}  	DebugMSG ("Done with all :)");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button21_Click,The following statement contains a magic number: Task.Run (() => {  	int size = 2048 * 2;  	DebugMSG ("Generating...");  	Maze m = new AlgorithmBacktrack ().Generate (size' size' InnerMapType.BitArreintjeFast' null);  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' null);  	DebugMSG ("Saving...");  	DebugMSG ("0/4");  	m.SaveMazeAsImage ("zz4bitpath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("1/4");  	m.SaveMazeAsImage ("zz32bitpath.bmp"' ImageFormat.Bmp' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("2/4");  	m.SaveMazeAsImage ("zz4bitpath.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	DebugMSG ("3/4");  	m.SaveMazeAsImage ("zz32bitpath.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	DebugMSG ("4/4");  	DebugMSG ("Done with images :)");  	DebugMSG ("Just saving the maze as walls...");  	var walls = m.GenerateListOfMazeWalls ();  	using (FileStream stream = new FileStream ("mazeSavedAsWalls.txt"' FileMode.Create)) {  		BinaryWriter writer = new BinaryWriter (stream);  		foreach (MazeWall w in walls) {  			writer.Write (w.xstart);  			writer.Write (w.xend);  			writer.Write (w.ystart);  			writer.Write (w.yend);  		}  	}  	DebugMSG ("Done with all :)");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	AlgorithmBacktrack curalg = new AlgorithmBacktrack ();  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 15.0);  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button7_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,timer1_Tick,The following statement contains a magic number: label5.Text = Math.Round (percentage' 2).ToString ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,ConvertNumberToNiceString,The following statement contains a magic number: for (int i = 3; i < prelength; i += 3) {  	build.Insert (prelength - i' ".");  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,ConvertNumberToNiceString,The following statement contains a magic number: for (int i = 3; i < prelength; i += 3) {  	build.Insert (prelength - i' ".");  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,ConvertNumberToNiceString,The following statement contains a magic number: i += 3
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: Task.Run (() => {  	var g = this.CreateGraphics ();  	int width = (this.Width / size - 12 / size) / 2 * 2;  	int height = (this.Height / size - 40 / size) / 2 * 2;  	g.FillRectangle (Brushes.White' 0' 0' this.Width + 1' this.Height + 1);  	Maze m = new AlgorithmBacktrack ().Generate (width' height' InnerMapType.BitArreintjeFast' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		//g.FillRectangle(Brushes.White' x' y' 1' 1);  		//Thread.Sleep(200);  	});  	//Random sorting stuff for cool drawing effects :)  	int a = r.Next (12);  	var walls = m.GenerateListOfMazeWalls ();  	if (a == 0) {  		//Normal  	} else if (a == 1) {  		//Create diamond  		walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  	} else if (a == 2) {  		//Random stuff  		walls = walls.RandomPermutation ().ToList ();  	} else if (a == 3) {  		//Circles everywhere  		walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  	} else if (a == 4) {  		//Thingy from top left  		walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  	} else if (a == 5) {  		//Double thingy from mid  		walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 6) {  		//360 degrees thingy  		walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  	} else if (a == 7) {  		//Bezier thingy or something from left top to right bot  		walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  	} else if (a == 8) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  	} else if (a == 9) {  		//Strange behaviour  		walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  	} else if (a == 10) {  		//Random arctan stuff  		walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  	} else if (a == 11) {  		//Circle  		walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  	}  	foreach (var wall in walls) {  		if (wall.xstart == wall.xend) {  			//Verticale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' size' (wall.yend - wall.ystart + 1) * size);  		} else {  			//Horizontale wall  			g.FillRectangle (Brushes.Black' wall.xstart * size' wall.ystart * size' (wall.xend - wall.xstart + 1) * size' size);  		}  	}  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 0) {  	//Normal  } else if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 1) {  	//Create diamond  	walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  } else if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Abs (width / 2 - x.xstart) + Math.Abs (height / 2 - x.ystart)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 2) {  	//Random stuff  	walls = walls.RandomPermutation ().ToList ();  } else if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 3) {  	//Circles everywhere  	walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  } else if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Sin ((double)x.xstart * 0.03) + Math.Sin ((double)x.ystart * 0.03)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 4) {  	//Thingy from top left  	walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  } else if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => (Math.Atan2 ((double)x.xstart * 0.03' (double)x.ystart * 0.03))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 5) {  	//Double thingy from mid  	walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Abs ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 6) {  	//360 degrees thingy  	walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  } else if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => ((Math.Atan2 ((double)x.xstart - width / 2' (double)x.ystart - height / 2)))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 7) {  	//Bezier thingy or something from left top to right bot  	walls = walls.OrderBy (x => Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)).ToList ();  } else if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 8) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  } else if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 9) {  	//Strange behaviour  	walls = walls.OrderBy (x => Math.Pow (Math.E' x.xstart) + Math.Pow (x.ystart' x.xstart)).ToList ();  } else if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 10) {  	//Random arctan stuff  	walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  } else if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Atan2 (Math.Sin (Math.Atan2 (Math.Sin (Math.Log (x.xstart' Math.E) + Math.Log (x.ystart' Math.E)) * 0.01' Math.Tan (x.xstart + x.ystart)))' Math.Log (Math.E' Math.Atan2 (x.xstart' x.ystart)))).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: if (a == 11) {  	//Circle  	walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button8_Click,The following statement contains a magic number: walls = walls.OrderBy (x => Math.Pow (x.xstart - width / 2' 2) + Math.Pow (x.ystart - height / 2' 2)).ToList ();  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	List<Algorithm> algjes = new List<Algorithm> ();  	algjes.Add (new AlgorithmBacktrack ());  	algjes.Add (new AlgorithmKruskal ());  	for (int i = 0; i < algjes.Count; i++) {  		Algorithm curalg = algjes [i];  		Stopwatch w = new Stopwatch ();  		w.Start ();  		int size = (int)Math.Pow (2.0' 12.0);  		DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  		DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  		DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  		Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		w.Stop ();  		DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  	}  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: for (int i = 0; i < algjes.Count; i++) {  	Algorithm curalg = algjes [i];  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = (int)Math.Pow (2.0' 12.0);  	DebugMSG ("Generating maze of size " + curalg.GetType ().ToString () + ": " + size);  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time " + curalg.GetType ().ToString () + ": " + w.Elapsed.TotalSeconds);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button22_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Finding Path...");  	//w.Reset();  	//w.Start();  	//var path = PathFinderDepthFirstSmart.GoFind(maze.InnerMap' null);  	//w.Stop();  	//DebugMSG("Done generating path: " + w.Elapsed.TotalSeconds);  	//DebugMSG("Saving...");  	//w.Reset();  	//w.Start();  	//maze.SaveMazeAsImage("benchmark 16k single core.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  	//w.Stop();  	//DebugMSG("Done saving: " + w.Elapsed.TotalSeconds);  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button23_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: f.Size = new System.Drawing.Size (1100' 1100);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: f.Size = new System.Drawing.Size (1100' 1100);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	for (int y = 0; y < 10; y++) {  		for (int x = 0; x < 10; x++) {  			g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  		}  	}  	Algorithm curalg = new AlgorithmBacktrack ();  	Maze m = curalg.Generate (width' height' InnerMapType.Hybrid' r.Next ()' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	for (int x = 0; x < 10; x++) {  		g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	for (int x = 0; x < 10; x++) {  		g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	for (int x = 0; x < 10; x++) {  		g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	for (int x = 0; x < 10; x++) {  		g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	for (int x = 0; x < 10; x++) {  		g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int y = 0; y < 10; y++) {  	for (int x = 0; x < 10; x++) {  		g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button24_Click,The following statement contains a magic number: g.DrawRectangle (Pens.Red' x * 128' y * 128' 128' 128);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button26_Click,The following statement contains a magic number: f.Size = new System.Drawing.Size (1100' 1100);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button26_Click,The following statement contains a magic number: f.Size = new System.Drawing.Size (1100' 1100);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button26_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	//for (int y = 0; y < 10; y++)  	//{  	//    for (int x = 0; x < 10; x++)  	//    {  	//        g.DrawRectangle(Pens.Red' x * 128' y * 128' 128' 128);  	//    }  	//}  	AlgorithmBacktrackSmartMemory curalg = new AlgorithmBacktrackSmartMemory ();  	Maze m = curalg.Generate (width / size' height / size' InnerMapType.Hybrid' 5' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.Red' x * size' y * size' size' size);  		//Thread.Sleep(20);  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button26_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	//for (int y = 0; y < 10; y++)  	//{  	//    for (int x = 0; x < 10; x++)  	//    {  	//        g.DrawRectangle(Pens.Red' x * 128' y * 128' 128' 128);  	//    }  	//}  	AlgorithmBacktrackSmartMemory curalg = new AlgorithmBacktrackSmartMemory ();  	Maze m = curalg.Generate (width / size' height / size' InnerMapType.Hybrid' 5' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.Red' x * size' y * size' size' size);  		//Thread.Sleep(20);  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button26_Click,The following statement contains a magic number: Task.Run (() => {  	var g = f.CreateGraphics ();  	int width = 1024;  	int height = 1024;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	//for (int y = 0; y < 10; y++)  	//{  	//    for (int x = 0; x < 10; x++)  	//    {  	//        g.DrawRectangle(Pens.Red' x * 128' y * 128' 128' 128);  	//    }  	//}  	AlgorithmBacktrackSmartMemory curalg = new AlgorithmBacktrackSmartMemory ();  	Maze m = curalg.Generate (width / size' height / size' InnerMapType.Hybrid' 5' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  		g.FillRectangle (Brushes.Red' x * size' y * size' size' size);  		//Thread.Sleep(20);  		g.FillRectangle (Brushes.White' x * size' y * size' size' size);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * size' y * size' size' size);  		} else {  			g.FillRectangle (Brushes.Gray' x * size' y * size' size' size);  		}  	});  	m.SaveMazeAsImage ("hybridmaze.png"' ImageFormat.Png' path' MazeSaveType.ColorDepth32Bits);  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The following statement contains a magic number: Task.Run (() => {  	var alg = new AlgorithmBacktrack ();  	for (int i = 11; i < 17; i++) {  		int size = (int)Math.Pow (2' i);  		DebugMSG ("Generating maze of size: " + size);  		var maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		DebugMSG ("Finding path...");  		var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  		DebugMSG ("Saving...");  		maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	}  	DebugMSG ("Done :)");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The following statement contains a magic number: Task.Run (() => {  	var alg = new AlgorithmBacktrack ();  	for (int i = 11; i < 17; i++) {  		int size = (int)Math.Pow (2' i);  		DebugMSG ("Generating maze of size: " + size);  		var maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		DebugMSG ("Finding path...");  		var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  		DebugMSG ("Saving...");  		maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	}  	DebugMSG ("Done :)");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The following statement contains a magic number: Task.Run (() => {  	var alg = new AlgorithmBacktrack ();  	for (int i = 11; i < 17; i++) {  		int size = (int)Math.Pow (2' i);  		DebugMSG ("Generating maze of size: " + size);  		var maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' (x' y' cur' tot) => {  			curXInMaze = x;  			curYInMaze = y;  			currentStepsToCalcPercentage = cur;  			totalStepsToCalcPercentage = tot;  		});  		DebugMSG ("Finding path...");  		var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  		DebugMSG ("Saving...");  		maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  	}  	DebugMSG ("Done :)");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The following statement contains a magic number: for (int i = 11; i < 17; i++) {  	int size = (int)Math.Pow (2' i);  	DebugMSG ("Generating maze of size: " + size);  	var maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	DebugMSG ("Finding path...");  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	DebugMSG ("Saving...");  	maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The following statement contains a magic number: for (int i = 11; i < 17; i++) {  	int size = (int)Math.Pow (2' i);  	DebugMSG ("Generating maze of size: " + size);  	var maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	DebugMSG ("Finding path...");  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	DebugMSG ("Saving...");  	maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button27_Click,The following statement contains a magic number: for (int i = 11; i < 17; i++) {  	int size = (int)Math.Pow (2' i);  	DebugMSG ("Generating maze of size: " + size);  	var maze = alg.Generate (size' size' InnerMapType.BitArreintjeFast' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	DebugMSG ("Finding path...");  	var path = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	DebugMSG ("Saving...");  	maze.SaveMazeAsImage (Path.Combine (mazedir' size + " (" + ConvertNumberToNiceString (path.Count) + ").png")' ImageFormat.Png' path' MazeSaveType.ColorDepth4Bits);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button25_Click,The following statement contains a magic number: lastMegaTerrorMaze = curalg.Generate (size' size' InnerMapType.Hybrid' 1337' (x' y' cur' tot) => {  	curXInMaze = x;  	curYInMaze = y;  	currentStepsToCalcPercentage = cur;  	totalStepsToCalcPercentage = tot;  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button32_Click,The following statement contains a magic number: lastMegaTerrorMaze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  	curXInMaze = x;  	curYInMaze = y;  	currentStepsToCalcPercentage = cur;  	totalStepsToCalcPercentage = tot;  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button31_Click,The following statement contains a magic number: lastMegaTerrorMaze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  	curXInMaze = x;  	curYInMaze = y;  	currentStepsToCalcPercentage = cur;  	totalStepsToCalcPercentage = tot;  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button33_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 20;  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = 12;  	int mazeHeight = 12;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	int randomnow = r.Next ();  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' randomnow' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		Thread.Sleep (curDelay);  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		} else {  			g.FillRectangle (Brushes.Gray' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		}  	});  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.Red' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button33_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 20;  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = 12;  	int mazeHeight = 12;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	int randomnow = r.Next ();  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' randomnow' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		Thread.Sleep (curDelay);  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		} else {  			g.FillRectangle (Brushes.Gray' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		}  	});  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.Red' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button33_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 20;  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = 12;  	int mazeHeight = 12;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	int randomnow = r.Next ();  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' randomnow' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var path = PathFinderDepthFirstSmart.GoFind (m.InnerMap' (x' y' pathThing) => {  		Thread.Sleep (curDelay);  		if (pathThing) {  			g.FillRectangle (Brushes.Green' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		} else {  			g.FillRectangle (Brushes.Gray' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		}  	});  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.Red' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: Task.Run (new Action (() => {  	Algorithm curalg = new AlgorithmBacktrack ();  	InnerMapType innerMapType = InnerMapType.BitArreintjeFast;  	Stopwatch w = new Stopwatch ();  	w.Start ();  	int size = 2048 * 8;  	DebugMSG ("Generating maze of size: " + size);  	DebugMSG ("Current algorithm: " + curalg.ToString ());  	DebugMSG ("Current InnerMapType: " + innerMapType.ToString ());  	DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  	DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  	Maze maze = curalg.Generate (size' size' innerMapType' 1337' (x' y' cur' tot) => {  		curXInMaze = x;  		curYInMaze = y;  		currentStepsToCalcPercentage = cur;  		totalStepsToCalcPercentage = tot;  	});  	w.Stop ();  	DebugMSG ("Generating time: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Finding Path...");  	w.Reset ();  	w.Start ();  	var path = PathFinderDepthFirst.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirst: " + w.Elapsed.TotalSeconds);  	w.Reset ();  	w.Start ();  	var path2 = PathFinderDepthFirstSmart.GoFind (maze.InnerMap' null);  	w.Stop ();  	DebugMSG ("PathFinderDepthFirstSmart: " + w.Elapsed.TotalSeconds);  	DebugMSG ("Comparing paths to be sure they match...");  	if (path.Count != path2.Count) {  		DebugMSG ("ERRORRRRRRR: path length not equals!!!");  		return;  	}  	var itworkedhereforpathfinding = true;  	for (int i = 0; i < path.Count; i++) {  		if (path [i].X != path2 [i].X || path [i].Y != path2 [i].Y) {  			itworkedhereforpathfinding = false;  		}  	}  	if (!itworkedhereforpathfinding) {  		DebugMSG ("ERRORRRRRRR: path finder not working correctly!!!!");  	} else {  		DebugMSG ("Paths match :)");  	}  	DebugMSG ("Done :)");  }));  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button34_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button37_Click,The following statement contains a magic number: lastMegaTerrorMaze = curalg.Generate (size' size' InnerMapType.BitArreintjeFast' 1337' (x' y' cur' tot) => {  	curXInMaze = x;  	curYInMaze = y;  	currentStepsToCalcPercentage = cur;  	totalStepsToCalcPercentage = tot;  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: comboBox1.SelectedIndex = 19;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Task.Run (() => {  	var g = panel1.CreateGraphics ();  	int sizemodifier = 1;  	this.Invoke (new Action (() => {  		sizemodifier = int.Parse (comboBox1.SelectedItem.ToString ());  	}));  	int width = panel1.Width;  	int height = panel1.Height;  	int mazeWidth = width / sizemodifier / 2 * 2;  	int mazeHeight = height / sizemodifier / 2 * 2;  	//int width = 100;  	//int height = 150;  	g.FillRectangle (Brushes.Black' 0' 0' width + 1' height + 1);  	var intrandomvalue = 284434191;  	DebugMSG ("Random: " + intrandomvalue);  	Maze m = new AlgorithmKruskal ().Generate (mazeWidth' mazeHeight' InnerMapType.BitArreintjeFast' intrandomvalue' (x' y' cur' tot) => {  		//Thread.Sleep(curDelay);  		g.FillRectangle (Brushes.White' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		curXInMaze = x;  		curYInMaze = y;  		this.currentStepsToCalcPercentage = cur;  		this.totalStepsToCalcPercentage = tot;  		//Thread.Sleep(200);  	});  	var directions = PathFinderDepthFirstSmartAndSmartMemory.GoFind (m.InnerMap' (x' y' pathFinderAction) => {  		int sleepTime = 25;  		Thread.Sleep (sleepTime);  		Brush colorToUse = Brushes.Pink;  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (sleepTime);  		switch (pathFinderAction) {  		case PathFinderAction.Step:  			colorToUse = Brushes.Green;  			break;  		case PathFinderAction.Backtrack:  			colorToUse = Brushes.Gray;  			break;  		case PathFinderAction.Junction:  			colorToUse = Brushes.Blue;  			break;  		case PathFinderAction.RemovingJunction:  			colorToUse = Brushes.Red;  			break;  		case PathFinderAction.RefoundJunction:  			colorToUse = Brushes.Purple;  			break;  		default:  			break;  		}  		g.FillRectangle (colorToUse' x * sizemodifier' y * sizemodifier' sizemodifier' sizemodifier);  	});  	//PrintQuatroList(path);  	var path = PathFinderDepthFirstSmartAndSmartMemory.DeterminePathFromDirections (directions' m.InnerMap);  	foreach (var pathnode in path) {  		g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  		Thread.Sleep (50);  	}  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: foreach (var pathnode in path) {  	g.FillRectangle (Brushes.DarkBlue' pathnode.X * sizemodifier' pathnode.Y * sizemodifier' sizemodifier' sizemodifier);  	Thread.Sleep (50);  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button41_Click,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,PrintQuatroList,The following statement contains a magic number: for (int i = count - 1; i >= 0; i--) {  	switch (quatroStack.InnerList [i]) {  	case 0:  		DebugMSG ("UP");  		Console.WriteLine ("UP");  		break;  	case 1:  		DebugMSG ("RIGHT");  		Console.WriteLine ("RIGHT");  		break;  	case 2:  		DebugMSG ("DOWN");  		Console.WriteLine ("DOWN");  		break;  	case 3:  		DebugMSG ("LEFT");  		Console.WriteLine ("LEFT");  		break;  	default:  		break;  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,PrintQuatroList,The following statement contains a magic number: for (int i = count - 1; i >= 0; i--) {  	switch (quatroStack.InnerList [i]) {  	case 0:  		DebugMSG ("UP");  		Console.WriteLine ("UP");  		break;  	case 1:  		DebugMSG ("RIGHT");  		Console.WriteLine ("RIGHT");  		break;  	case 2:  		DebugMSG ("DOWN");  		Console.WriteLine ("DOWN");  		break;  	case 3:  		DebugMSG ("LEFT");  		Console.WriteLine ("LEFT");  		break;  	default:  		break;  	}  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,PrintQuatroList,The following statement contains a magic number: switch (quatroStack.InnerList [i]) {  case 0:  	DebugMSG ("UP");  	Console.WriteLine ("UP");  	break;  case 1:  	DebugMSG ("RIGHT");  	Console.WriteLine ("RIGHT");  	break;  case 2:  	DebugMSG ("DOWN");  	Console.WriteLine ("DOWN");  	break;  case 3:  	DebugMSG ("LEFT");  	Console.WriteLine ("LEFT");  	break;  default:  	break;  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,PrintQuatroList,The following statement contains a magic number: switch (quatroStack.InnerList [i]) {  case 0:  	DebugMSG ("UP");  	Console.WriteLine ("UP");  	break;  case 1:  	DebugMSG ("RIGHT");  	Console.WriteLine ("RIGHT");  	break;  case 2:  	DebugMSG ("DOWN");  	Console.WriteLine ("DOWN");  	break;  case 3:  	DebugMSG ("LEFT");  	Console.WriteLine ("LEFT");  	break;  default:  	break;  }  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Saved size it should be: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 8.0 + " mb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: DebugMSG ("Or in GB: " + Math.Pow ((double)size' 2.0) / 1024.0 / 1024.0 / 1024.0 / 8.0 + " gb");  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button38_Click,The following statement contains a magic number: lastMegaTerrorMaze = curalg.Generate (size' size' InnerMapType.BitArrayMappedOnHardDisk' 1337' (x' y' cur' tot) => {  	curXInMaze = x;  	curYInMaze = y;  	currentStepsToCalcPercentage = cur;  	totalStepsToCalcPercentage = tot;  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button45_Click,The following statement contains a magic number: Task.Run (() => {  	Action<int' int> callback = (cur' tot) => {  		this.curMazeLineSaving = cur;  		this.mazeLinesToSave = tot;  	};  	//This is just a mocked maze that is not actually being read by the Testje function. That's why the size doesn't matter.  	var maze = new Maze (16' 16' InnerMapType.BooleanArray);  	var w = Stopwatch.StartNew ();  	maze.Testje (sizezzz' callback' 256' false' DebugMSG);  	DebugMSG ("Saving time: " + w.Elapsed.TotalSeconds + " seconds.");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button45_Click,The following statement contains a magic number: Task.Run (() => {  	Action<int' int> callback = (cur' tot) => {  		this.curMazeLineSaving = cur;  		this.mazeLinesToSave = tot;  	};  	//This is just a mocked maze that is not actually being read by the Testje function. That's why the size doesn't matter.  	var maze = new Maze (16' 16' InnerMapType.BooleanArray);  	var w = Stopwatch.StartNew ();  	maze.Testje (sizezzz' callback' 256' false' DebugMSG);  	DebugMSG ("Saving time: " + w.Elapsed.TotalSeconds + " seconds.");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button45_Click,The following statement contains a magic number: Task.Run (() => {  	Action<int' int> callback = (cur' tot) => {  		this.curMazeLineSaving = cur;  		this.mazeLinesToSave = tot;  	};  	//This is just a mocked maze that is not actually being read by the Testje function. That's why the size doesn't matter.  	var maze = new Maze (16' 16' InnerMapType.BooleanArray);  	var w = Stopwatch.StartNew ();  	maze.Testje (sizezzz' callback' 256' false' DebugMSG);  	DebugMSG ("Saving time: " + w.Elapsed.TotalSeconds + " seconds.");  });  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,button45_Click,The following statement contains a magic number: maze.Testje (sizezzz' callback' 256' false' DebugMSG);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (147' 295);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (147' 295);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (141' 35);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (141' 35);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point (179' 12);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point (179' 12);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size (142' 80);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size (142' 80);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 2;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point (179' 98);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point (179' 98);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button4.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size (142' 79);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size (142' 79);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button4.TabIndex = 3;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point (333' 205);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point (333' 205);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size (96' 72);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size (96' 72);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button5.TabIndex = 4;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button9.Location = new System.Drawing.Point (333' 282);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button9.Location = new System.Drawing.Point (333' 282);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button9.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button9.Size = new System.Drawing.Size (151' 48);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button9.Size = new System.Drawing.Size (151' 48);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button9.TabIndex = 8;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button10.Location = new System.Drawing.Point (146' 333);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button10.Location = new System.Drawing.Point (146' 333);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button10.Size = new System.Drawing.Size (141' 41);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button10.Size = new System.Drawing.Size (141' 41);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button10.TabIndex = 9;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point (211' 441);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point (211' 441);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size (603' 251);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size (603' 251);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.TabIndex = 10;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button11.Location = new System.Drawing.Point (13' 12);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button11.Location = new System.Drawing.Point (13' 12);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button11.Size = new System.Drawing.Size (150' 80);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button11.Size = new System.Drawing.Size (150' 80);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button11.TabIndex = 11;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button12.Location = new System.Drawing.Point (12' 205);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button12.Location = new System.Drawing.Point (12' 205);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button12.Size = new System.Drawing.Size (115' 87);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button12.Size = new System.Drawing.Size (115' 87);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button12.TabIndex = 12;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button13.Location = new System.Drawing.Point (12' 487);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button13.Location = new System.Drawing.Point (12' 487);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button13.Size = new System.Drawing.Size (150' 37);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button13.Size = new System.Drawing.Size (150' 37);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button13.TabIndex = 13;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button14.Location = new System.Drawing.Point (10' 608);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button14.Location = new System.Drawing.Point (10' 608);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button14.Size = new System.Drawing.Size (141' 37);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button14.Size = new System.Drawing.Size (141' 37);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button14.TabIndex = 14;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button15.Location = new System.Drawing.Point (480' 698);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button15.Location = new System.Drawing.Point (480' 698);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button15.Size = new System.Drawing.Size (75' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button15.Size = new System.Drawing.Size (75' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button15.TabIndex = 15;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button16.Location = new System.Drawing.Point (12' 549);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button16.Location = new System.Drawing.Point (12' 549);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button16.Size = new System.Drawing.Size (75' 54);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button16.Size = new System.Drawing.Size (75' 54);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button16.TabIndex = 16;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button17.Location = new System.Drawing.Point (12' 98);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button17.Location = new System.Drawing.Point (12' 98);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button17.Size = new System.Drawing.Size (150' 79);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button17.Size = new System.Drawing.Size (150' 79);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button17.TabIndex = 17;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point (503' 370);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point (503' 370);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size (291' 54);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size (291' 54);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 18;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button18.Location = new System.Drawing.Point (333' 335);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button18.Location = new System.Drawing.Point (333' 335);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button18.Size = new System.Drawing.Size (151' 38);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button18.Size = new System.Drawing.Size (151' 38);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button18.TabIndex = 19;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (315' 410);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (315' 410);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (96' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (96' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 20;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button19.Location = new System.Drawing.Point (12' 295);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button19.Location = new System.Drawing.Point (12' 295);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button19.Size = new System.Drawing.Size (116' 78);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button19.Size = new System.Drawing.Size (116' 78);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button19.TabIndex = 21;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button20.Location = new System.Drawing.Point (10' 401);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button20.Location = new System.Drawing.Point (10' 401);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button20.Size = new System.Drawing.Size (115' 32);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button20.Size = new System.Drawing.Size (115' 32);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button20.TabIndex = 22;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button21.Location = new System.Drawing.Point (213' 410);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button21.Location = new System.Drawing.Point (213' 410);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button21.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button21.Size = new System.Drawing.Size (95' 26);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button21.Size = new System.Drawing.Size (95' 26);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button21.TabIndex = 23;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (434' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (434' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (384' 264);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (384' 264);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 24;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point (336' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point (336' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size (75' 39);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size (75' 39);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 25;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point (336' 71);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point (336' 71);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size (75' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size (75' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.TabIndex = 26;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Location = new System.Drawing.Point (336' 128);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Location = new System.Drawing.Point (336' 128);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Size = new System.Drawing.Size (75' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Size = new System.Drawing.Size (75' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.TabIndex = 27;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (336' 52);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (336' 52);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (50' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (50' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 28;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (339' 109);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (339' 109);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (37' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (37' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 29;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point (336' 155);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point (336' 155);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size (75' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size (75' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button6.TabIndex = 30;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button7.Location = new System.Drawing.Point (503' 323);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button7.Location = new System.Drawing.Point (503' 323);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button7.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button7.Size = new System.Drawing.Size (83' 41);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button7.Size = new System.Drawing.Size (83' 41);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button7.TabIndex = 31;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point (10' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point (10' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size (18' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size (18' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 32;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point (33' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point (33' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size (13' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size (13' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 33;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button8.Location = new System.Drawing.Point (9' 438);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button8.Location = new System.Drawing.Point (9' 438);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button8.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button8.Size = new System.Drawing.Size (116' 35);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button8.Size = new System.Drawing.Size (116' 35);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button8.TabIndex = 34;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point (133' 420);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point (133' 420);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size (30' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size (30' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 35;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox3.Location = new System.Drawing.Point (130' 446);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox3.Location = new System.Drawing.Point (130' 446);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox3.Size = new System.Drawing.Size (75' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox3.Size = new System.Drawing.Size (75' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox3.TabIndex = 36;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button22.Location = new System.Drawing.Point (503' 284);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button22.Location = new System.Drawing.Point (503' 284);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button22.Size = new System.Drawing.Size (83' 34);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button22.Size = new System.Drawing.Size (83' 34);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button22.TabIndex = 37;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button23.Location = new System.Drawing.Point (592' 284);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button23.Location = new System.Drawing.Point (592' 284);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button23.Size = new System.Drawing.Size (112' 34);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button23.Size = new System.Drawing.Size (112' 34);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button23.TabIndex = 38;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button24.Location = new System.Drawing.Point (710' 284);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button24.Location = new System.Drawing.Point (710' 284);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button24.Size = new System.Drawing.Size (86' 34);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button24.Size = new System.Drawing.Size (86' 34);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button24.TabIndex = 39;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button25.Location = new System.Drawing.Point (824' 71);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button25.Location = new System.Drawing.Point (824' 71);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button25.Size = new System.Drawing.Size (132' 40);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button25.Size = new System.Drawing.Size (132' 40);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button25.TabIndex = 40;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button26.Location = new System.Drawing.Point (147' 379);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button26.Location = new System.Drawing.Point (147' 379);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button26.Size = new System.Drawing.Size (206' 26);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button26.Size = new System.Drawing.Size (206' 26);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button26.TabIndex = 41;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point (92' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point (92' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size (32' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size (32' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 42;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point (128' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point (128' 181);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 43;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point (133' 208);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point (133' 208);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size (41' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size (41' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 44;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point (183' 208);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point (183' 208);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 45;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button27.Location = new System.Drawing.Point (359' 379);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button27.Location = new System.Drawing.Point (359' 379);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button27.Size = new System.Drawing.Size (125' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button27.Size = new System.Drawing.Size (125' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button27.TabIndex = 46;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button28.Location = new System.Drawing.Point (95' 549);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button28.Location = new System.Drawing.Point (95' 549);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button28.Size = new System.Drawing.Size (91' 54);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button28.Size = new System.Drawing.Size (91' 54);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button28.TabIndex = 47;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button29.Location = new System.Drawing.Point (823' 649);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button29.Location = new System.Drawing.Point (823' 649);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button29.Size = new System.Drawing.Size (132' 63);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button29.Size = new System.Drawing.Size (132' 63);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button29.TabIndex = 48;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point (130' 248);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point (130' 248);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size (17' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size (17' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 49;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point (131' 270);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point (131' 270);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size (17' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size (17' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 50;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point (154' 249);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point (154' 249);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 51;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point (155' 270);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point (155' 270);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label14.TabIndex = 52;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point (839' 26);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point (839' 26);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size (30' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size (30' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label15.TabIndex = 53;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox4.Location = new System.Drawing.Point (826' 44);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox4.Location = new System.Drawing.Point (826' 44);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox4.Size = new System.Drawing.Size (132' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox4.Size = new System.Drawing.Size (132' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBox4.TabIndex = 54;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button30.Location = new System.Drawing.Point (824' 475);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button30.Location = new System.Drawing.Point (824' 475);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button30.Size = new System.Drawing.Size (132' 44);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button30.Size = new System.Drawing.Size (132' 44);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button30.TabIndex = 55;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button31.Location = new System.Drawing.Point (825' 118);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button31.Location = new System.Drawing.Point (825' 118);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button31.Size = new System.Drawing.Size (131' 39);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button31.Size = new System.Drawing.Size (131' 39);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button31.TabIndex = 56;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button32.Location = new System.Drawing.Point (824' 208);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button32.Location = new System.Drawing.Point (824' 208);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button32.Size = new System.Drawing.Size (132' 50);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button32.Size = new System.Drawing.Size (132' 50);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button32.TabIndex = 57;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button33.Location = new System.Drawing.Point (12' 660);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button33.Location = new System.Drawing.Point (12' 660);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button33.Size = new System.Drawing.Size (123' 32);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button33.Size = new System.Drawing.Size (123' 32);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button33.TabIndex = 58;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button34.Location = new System.Drawing.Point (592' 323);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button34.Location = new System.Drawing.Point (592' 323);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button34.Size = new System.Drawing.Size (112' 41);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button34.Size = new System.Drawing.Size (112' 41);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button34.TabIndex = 59;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button35.Location = new System.Drawing.Point (824' 282);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button35.Location = new System.Drawing.Point (824' 282);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button35.Size = new System.Drawing.Size (131' 39);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button35.Size = new System.Drawing.Size (131' 39);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button35.TabIndex = 60;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button36.Location = new System.Drawing.Point (825' 525);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button36.Location = new System.Drawing.Point (825' 525);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button36.Size = new System.Drawing.Size (131' 43);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button36.Size = new System.Drawing.Size (131' 43);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button36.TabIndex = 61;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button37.Location = new System.Drawing.Point (826' 164);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button37.Location = new System.Drawing.Point (826' 164);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button37.Size = new System.Drawing.Size (130' 38);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button37.Size = new System.Drawing.Size (130' 38);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button37.TabIndex = 62;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point (823' 633);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point (823' 633);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size (10' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 64;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point (820' 620);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point (820' 620);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size (71' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size (71' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 65;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button39.Location = new System.Drawing.Point (825' 327);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button39.Location = new System.Drawing.Point (825' 327);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button39.Size = new System.Drawing.Size (128' 37);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button39.Size = new System.Drawing.Size (128' 37);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button39.TabIndex = 66;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button40.Location = new System.Drawing.Point (574' 698);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button40.Location = new System.Drawing.Point (574' 698);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button40.Size = new System.Drawing.Size (169' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button40.Size = new System.Drawing.Size (169' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button40.TabIndex = 67;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button41.Location = new System.Drawing.Point (13' 698);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button41.Location = new System.Drawing.Point (13' 698);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button41.Size = new System.Drawing.Size (165' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button41.Size = new System.Drawing.Size (165' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button41.TabIndex = 68;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button42.Location = new System.Drawing.Point (824' 366);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button42.Location = new System.Drawing.Point (824' 366);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button42.Size = new System.Drawing.Size (127' 36);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button42.Size = new System.Drawing.Size (127' 36);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button42.TabIndex = 69;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button43.Location = new System.Drawing.Point (842' 406);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button43.Location = new System.Drawing.Point (842' 406);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button43.Size = new System.Drawing.Size (109' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button43.Size = new System.Drawing.Size (109' 23);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button43.TabIndex = 70;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button44.Location = new System.Drawing.Point (842' 430);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button44.Location = new System.Drawing.Point (842' 430);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button44.Size = new System.Drawing.Size (109' 28);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button44.Size = new System.Drawing.Size (109' 28);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button44.TabIndex = 71;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxImageSaveType.Location = new System.Drawing.Point (967' 410);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxImageSaveType.Location = new System.Drawing.Point (967' 410);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxImageSaveType.Size = new System.Drawing.Size (121' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxImageSaveType.Size = new System.Drawing.Size (121' 21);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxImageSaveType.TabIndex = 77;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point (967' 386);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point (967' 386);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size (94' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size (94' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 78;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseTiles.Location = new System.Drawing.Point (970' 443);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseTiles.Location = new System.Drawing.Point (970' 443);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseTiles.Size = new System.Drawing.Size (70' 17);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseTiles.Size = new System.Drawing.Size (70' 17);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseTiles.TabIndex = 79;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseColorMap.Location = new System.Drawing.Point (970' 467);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseColorMap.Location = new System.Drawing.Point (970' 467);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseColorMap.Size = new System.Drawing.Size (96' 17);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseColorMap.Size = new System.Drawing.Size (96' 17);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseColorMap.TabIndex = 80;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMazeAsImageDeluxe.Location = new System.Drawing.Point (970' 530);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMazeAsImageDeluxe.Location = new System.Drawing.Point (970' 530);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMazeAsImageDeluxe.Size = new System.Drawing.Size (118' 73);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMazeAsImageDeluxe.Size = new System.Drawing.Size (118' 73);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMazeAsImageDeluxe.TabIndex = 81;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point (874' -1);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size (204' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size (204' 13);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label19.TabIndex = 82;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button38.Location = new System.Drawing.Point (965' 118);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button38.Location = new System.Drawing.Point (965' 118);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button38.Size = new System.Drawing.Size (123' 59);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button38.Size = new System.Drawing.Size (123' 59);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button38.TabIndex = 83;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button45.Location = new System.Drawing.Point (979' 647);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button45.Location = new System.Drawing.Point (979' 647);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button45.Size = new System.Drawing.Size (109' 59);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button45.Size = new System.Drawing.Size (109' 59);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button45.TabIndex = 84;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSplitImage.Location = new System.Drawing.Point (970' 490);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSplitImage.Location = new System.Drawing.Point (970' 490);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSplitImage.Size = new System.Drawing.Size (78' 17);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSplitImage.Size = new System.Drawing.Size (78' 17);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSplitImage.TabIndex = 85;  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (1100' 724);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (1100' 724);  
Magic Number,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding (2);  
Duplicate Code,DeveMazeGeneratorGui,Form1,F:\newReposMay17\devedse_DeveMazeGenerator\DeveMazeGeneratorGui\Form1.cs,InitializeComponent,The method contains a code clone-set at the following line numbers (starting from the method definition): ((306' 326)' (442' 462))
