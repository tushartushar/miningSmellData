Implementation smell,Namespace,Class,File,Method,Description
Long Method,nKidReader,Capture,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Capture.cs,SetupGraph,The method has 128 lines of code.
Complex Method,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,Cyclomatic complexity of the method is 15
Complex Method,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,CardReaderIdentifier,Cyclomatic complexity of the method is 12
Complex Method,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,GetDeviceType,Cyclomatic complexity of the method is 12
Complex Method,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,Cyclomatic complexity of the method is 9
Complex Method,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,Cyclomatic complexity of the method is 9
Complex Method,ReadWriteCsv,CsvFileReader,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\ReadWriteCsv.cs,ReadRow,Cyclomatic complexity of the method is 14
Long Parameter List,nKidReader,Capture,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Capture.cs,Capture,The method has 5 parameters.
Long Parameter List,nKidReader,Capture,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Capture.cs,SetupGraph,The method has 5 parameters.
Long Parameter List,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,GetRawInputData,The method has 5 parameters.
Long Parameter List,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,FormatMessage,The method has 7 parameters.
Long Parameter List,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,InitializeUSBCardReader,The method has 5 parameters.
Long Statement,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The length of the statement  "				string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1)); " is 121.
Long Statement,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,UploadAvatar,The length of the statement  "		FtpWebRequest request = (FtpWebRequest)WebRequest.Create (ftpAddress + "/" + ftpUploadFolder + "/" + Path.GetFileName (source)); " is 128.
Long Statement,nKidReader,Program,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Program.cs,Main,The length of the statement  "			MessageBox.Show ("The application is already running."' Application.ProductName' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 131.
Long Statement,nKidReader,ServiceHandle,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\ServiceHandle.cs,getAccessToken,The length of the statement  "		if (response != null && ((response.StatusCode == HttpStatusCode.OK) && (response.ResponseStatus == ResponseStatus.Completed))) { " is 128.
Long Statement,nKidReader,ServiceHandle,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\ServiceHandle.cs,uploadNFCCode,The length of the statement  "			if (response != null && ((response.StatusCode == HttpStatusCode.OK) && (response.ResponseStatus == ResponseStatus.Completed))) { " is 128.
Long Statement,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessLastError,The length of the statement  "	uint dwChars = FormatMessage (FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS' IntPtr.Zero' (uint)nLastError' 0' // Default language " is 176.
Long Statement,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,CardReaderIdentifier,The length of the statement  "		throw new ApplicationException ("An error occurred while retrieving the list of devices. Error in GetRawInputDeviceList. Detailed Error is " + ProcessLastError ()); " is 164.
Long Statement,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,CardReaderIdentifier,The length of the statement  "		throw new ApplicationException ("Could not fetch raw device list. Failure in GetRawInputDeviceList - Second call. Detailed Error is " + ProcessLastError ()); " is 157.
Long Statement,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,CardReaderIdentifier,The length of the statement  "		RAWINPUTDEVICELIST rid = (RAWINPUTDEVICELIST)Marshal.PtrToStructure (new IntPtr ((pRawInputDeviceList.ToInt32 () + (dwSize * devCount)))' typeof(RAWINPUTDEVICELIST)); " is 166.
Long Statement,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,CardReaderIdentifier,The length of the statement  "				if (upperCasedeviceName.Contains (vidStrg) && upperCasedeviceName.Contains (pidStrg) && upperCasedeviceName.Contains (optionalStrg)) { " is 134.
Long Statement,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The length of the statement  "	if (GetRawInputData (rawInputHeader' RID_INPUT' IntPtr.Zero' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == 0) { " is 125.
Long Statement,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The length of the statement  "			if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) { " is 123.
Long Statement,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The length of the statement  "	if (GetRawInputData (rawInputHeader' RID_INPUT' IntPtr.Zero' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == 0) { " is 125.
Long Statement,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The length of the statement  "			if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) { " is 123.
Magic Number,nKidReader,Capture,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Capture.cs,Click,The following statement contains a magic number: try {  	m_WantOne = true;  	// If we are using a still pin' ask for a picture  	if (m_VidControl != null) {  		// Tell the camera to send an image  		hr = m_VidControl.SetMode (m_pinStill' VideoControlFlags.Trigger);  		DsError.ThrowExceptionForHR (hr);  	}  	// Start waiting  	if (!m_PictureReady.WaitOne (9000' false)) {  		throw new Exception ("Timeout waiting to get picture");  	}  }  catch {  	Marshal.FreeCoTaskMem (m_ipBuffer);  	m_ipBuffer = IntPtr.Zero;  	throw;  }  
Magic Number,nKidReader,Capture,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Capture.cs,Click,The following statement contains a magic number: if (!m_PictureReady.WaitOne (9000' false)) {  	throw new Exception ("Timeout waiting to get picture");  }  
Magic Number,nKidReader,Capture,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Capture.cs,SaveSizeInfo,The following statement contains a magic number: m_stride = m_videoWidth * (videoInfoHeader.BmiHeader.BitCount / 8);  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,detectCardIDMethod,The following statement contains a magic number: notify1.ShowBalloonTip (100);  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (e is CardReaderScannedEventArgs) {  	CardReaderScannedEventArgs checkScannedEvent = e as CardReaderScannedEventArgs;  	cardNumber = checkScannedEvent.Message;  	// NFC  	if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009") && btnReset.Enabled) {  		nfcID = cardNumber.ToLower ();  		if (cardList.Count == 0) {  			string magneticCardID = this.prefixID + this.suffixIDStart;  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		else {  			string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1));  			string magneticCardID = this.prefixID + idSuffix;  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		// Write to CSV  		using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  			for (int i = 0; i < cardList.Count; i++) {  				CsvRow row = new CsvRow ();  				row.Add (cardList [i].mrsId);  				row.Add (cardList [i].nfcId);  				writer.WriteRow (row);  			}  		}  	}  	detectCardIDMethod (nfcID);  }  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (e is CardReaderScannedEventArgs) {  	CardReaderScannedEventArgs checkScannedEvent = e as CardReaderScannedEventArgs;  	cardNumber = checkScannedEvent.Message;  	// NFC  	if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009") && btnReset.Enabled) {  		nfcID = cardNumber.ToLower ();  		if (cardList.Count == 0) {  			string magneticCardID = this.prefixID + this.suffixIDStart;  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		else {  			string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1));  			string magneticCardID = this.prefixID + idSuffix;  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		// Write to CSV  		using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  			for (int i = 0; i < cardList.Count; i++) {  				CsvRow row = new CsvRow ();  				row.Add (cardList [i].mrsId);  				row.Add (cardList [i].nfcId);  				writer.WriteRow (row);  			}  		}  	}  	detectCardIDMethod (nfcID);  }  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009") && btnReset.Enabled) {  	nfcID = cardNumber.ToLower ();  	if (cardList.Count == 0) {  		string magneticCardID = this.prefixID + this.suffixIDStart;  		cardList.Add (new CsvData (magneticCardID' nfcID));  	}  	else {  		string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1));  		string magneticCardID = this.prefixID + idSuffix;  		cardList.Add (new CsvData (magneticCardID' nfcID));  	}  	// Write to CSV  	using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  		for (int i = 0; i < cardList.Count; i++) {  			CsvRow row = new CsvRow ();  			row.Add (cardList [i].mrsId);  			row.Add (cardList [i].nfcId);  			writer.WriteRow (row);  		}  	}  }  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009") && btnReset.Enabled) {  	nfcID = cardNumber.ToLower ();  	if (cardList.Count == 0) {  		string magneticCardID = this.prefixID + this.suffixIDStart;  		cardList.Add (new CsvData (magneticCardID' nfcID));  	}  	else {  		string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1));  		string magneticCardID = this.prefixID + idSuffix;  		cardList.Add (new CsvData (magneticCardID' nfcID));  	}  	// Write to CSV  	using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  		for (int i = 0; i < cardList.Count; i++) {  			CsvRow row = new CsvRow ();  			row.Add (cardList [i].mrsId);  			row.Add (cardList [i].nfcId);  			writer.WriteRow (row);  		}  	}  }  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (cardList.Count == 0) {  	string magneticCardID = this.prefixID + this.suffixIDStart;  	cardList.Add (new CsvData (magneticCardID' nfcID));  }  else {  	string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1));  	string magneticCardID = this.prefixID + idSuffix;  	cardList.Add (new CsvData (magneticCardID' nfcID));  }  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (cardList.Count == 0) {  	string magneticCardID = this.prefixID + this.suffixIDStart;  	cardList.Add (new CsvData (magneticCardID' nfcID));  }  else {  	string idSuffix = String.Format ("{0:00000000}"' (int.Parse (cardList [cardList.Count - 1].mrsId.Substring (4' 8)) + 1));  	string magneticCardID = this.prefixID + idSuffix;  	cardList.Add (new CsvData (magneticCardID' nfcID));  }  
Magic Number,nKidReader,frmAutoWriteCSV,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\frmAutoWriteCSV.cs,btnSubmit_Click,The following statement contains a magic number: if (txtSuffix.Text.Length == 0 || txtSuffix.Text.Length < 8) {  	MessageBox.Show ("Vui lòng nhập 8 ký tự cuối của mã thẻ đầu tiên");  	txtCardAmount.Focus ();  	return;  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (e is CardReaderScannedEventArgs) {  	CardReaderScannedEventArgs checkScannedEvent = e as CardReaderScannedEventArgs;  	cardNumber = checkScannedEvent.Message;  	logger.Debug ("Card number: " + cardNumber);  	// NFC  	if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  		nfcID = cardNumber.ToLower ();  		if (updateNFCIDToolStripMenuItem.Checked) {  			frmNFCUpConfirm.getNFCCode (nfcID);  		}  		else if (manualToolStripMenuItem.Checked) {  			bool foundMRS = false;  			foreach (CsvData data in cardList) {  				if (data.mrsId == magneticCardID) {  					data.nfcId = nfcID;  					foundMRS = true;  					break;  				}  			}  			if (!foundMRS) {  				cardList.Add (new CsvData (magneticCardID' nfcID));  			}  			// Write to CSV  			using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  				for (int i = 0; i < cardList.Count; i++) {  					CsvRow row = new CsvRow ();  					row.Add (cardList [i].mrsId);  					row.Add (cardList [i].nfcId);  					writer.WriteRow (row);  				}  			}  		}  		detectCardIDMethod (cardNumber);  	}  	// MRS  	else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  		magneticCardID = cardNumber;  		if (updateNFCIDToolStripMenuItem.Checked) {  			if (frmNFCUpConfirm.Visible) {  				frmNFCUpConfirm.Close ();  			}  			string result = serviceHandle.makeRequest (magneticCardID);  			if (result == "NFC not found") {  				frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  				frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  				frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  				frmNFCUpConfirm.Show ();  				detectCardIDMethod (cardNumber);  			}  			else {  				notifyReader.BalloonTipText = result;  				notifyReader.ShowBalloonTip (100);  			}  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (e is CardReaderScannedEventArgs) {  	CardReaderScannedEventArgs checkScannedEvent = e as CardReaderScannedEventArgs;  	cardNumber = checkScannedEvent.Message;  	logger.Debug ("Card number: " + cardNumber);  	// NFC  	if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  		nfcID = cardNumber.ToLower ();  		if (updateNFCIDToolStripMenuItem.Checked) {  			frmNFCUpConfirm.getNFCCode (nfcID);  		}  		else if (manualToolStripMenuItem.Checked) {  			bool foundMRS = false;  			foreach (CsvData data in cardList) {  				if (data.mrsId == magneticCardID) {  					data.nfcId = nfcID;  					foundMRS = true;  					break;  				}  			}  			if (!foundMRS) {  				cardList.Add (new CsvData (magneticCardID' nfcID));  			}  			// Write to CSV  			using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  				for (int i = 0; i < cardList.Count; i++) {  					CsvRow row = new CsvRow ();  					row.Add (cardList [i].mrsId);  					row.Add (cardList [i].nfcId);  					writer.WriteRow (row);  				}  			}  		}  		detectCardIDMethod (cardNumber);  	}  	// MRS  	else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  		magneticCardID = cardNumber;  		if (updateNFCIDToolStripMenuItem.Checked) {  			if (frmNFCUpConfirm.Visible) {  				frmNFCUpConfirm.Close ();  			}  			string result = serviceHandle.makeRequest (magneticCardID);  			if (result == "NFC not found") {  				frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  				frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  				frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  				frmNFCUpConfirm.Show ();  				detectCardIDMethod (cardNumber);  			}  			else {  				notifyReader.BalloonTipText = result;  				notifyReader.ShowBalloonTip (100);  			}  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (e is CardReaderScannedEventArgs) {  	CardReaderScannedEventArgs checkScannedEvent = e as CardReaderScannedEventArgs;  	cardNumber = checkScannedEvent.Message;  	logger.Debug ("Card number: " + cardNumber);  	// NFC  	if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  		nfcID = cardNumber.ToLower ();  		if (updateNFCIDToolStripMenuItem.Checked) {  			frmNFCUpConfirm.getNFCCode (nfcID);  		}  		else if (manualToolStripMenuItem.Checked) {  			bool foundMRS = false;  			foreach (CsvData data in cardList) {  				if (data.mrsId == magneticCardID) {  					data.nfcId = nfcID;  					foundMRS = true;  					break;  				}  			}  			if (!foundMRS) {  				cardList.Add (new CsvData (magneticCardID' nfcID));  			}  			// Write to CSV  			using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  				for (int i = 0; i < cardList.Count; i++) {  					CsvRow row = new CsvRow ();  					row.Add (cardList [i].mrsId);  					row.Add (cardList [i].nfcId);  					writer.WriteRow (row);  				}  			}  		}  		detectCardIDMethod (cardNumber);  	}  	// MRS  	else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  		magneticCardID = cardNumber;  		if (updateNFCIDToolStripMenuItem.Checked) {  			if (frmNFCUpConfirm.Visible) {  				frmNFCUpConfirm.Close ();  			}  			string result = serviceHandle.makeRequest (magneticCardID);  			if (result == "NFC not found") {  				frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  				frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  				frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  				frmNFCUpConfirm.Show ();  				detectCardIDMethod (cardNumber);  			}  			else {  				notifyReader.BalloonTipText = result;  				notifyReader.ShowBalloonTip (100);  			}  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (e is CardReaderScannedEventArgs) {  	CardReaderScannedEventArgs checkScannedEvent = e as CardReaderScannedEventArgs;  	cardNumber = checkScannedEvent.Message;  	logger.Debug ("Card number: " + cardNumber);  	// NFC  	if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  		nfcID = cardNumber.ToLower ();  		if (updateNFCIDToolStripMenuItem.Checked) {  			frmNFCUpConfirm.getNFCCode (nfcID);  		}  		else if (manualToolStripMenuItem.Checked) {  			bool foundMRS = false;  			foreach (CsvData data in cardList) {  				if (data.mrsId == magneticCardID) {  					data.nfcId = nfcID;  					foundMRS = true;  					break;  				}  			}  			if (!foundMRS) {  				cardList.Add (new CsvData (magneticCardID' nfcID));  			}  			// Write to CSV  			using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  				for (int i = 0; i < cardList.Count; i++) {  					CsvRow row = new CsvRow ();  					row.Add (cardList [i].mrsId);  					row.Add (cardList [i].nfcId);  					writer.WriteRow (row);  				}  			}  		}  		detectCardIDMethod (cardNumber);  	}  	// MRS  	else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  		magneticCardID = cardNumber;  		if (updateNFCIDToolStripMenuItem.Checked) {  			if (frmNFCUpConfirm.Visible) {  				frmNFCUpConfirm.Close ();  			}  			string result = serviceHandle.makeRequest (magneticCardID);  			if (result == "NFC not found") {  				frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  				frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  				frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  				frmNFCUpConfirm.Show ();  				detectCardIDMethod (cardNumber);  			}  			else {  				notifyReader.BalloonTipText = result;  				notifyReader.ShowBalloonTip (100);  			}  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  	nfcID = cardNumber.ToLower ();  	if (updateNFCIDToolStripMenuItem.Checked) {  		frmNFCUpConfirm.getNFCCode (nfcID);  	}  	else if (manualToolStripMenuItem.Checked) {  		bool foundMRS = false;  		foreach (CsvData data in cardList) {  			if (data.mrsId == magneticCardID) {  				data.nfcId = nfcID;  				foundMRS = true;  				break;  			}  		}  		if (!foundMRS) {  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		// Write to CSV  		using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  			for (int i = 0; i < cardList.Count; i++) {  				CsvRow row = new CsvRow ();  				row.Add (cardList [i].mrsId);  				row.Add (cardList [i].nfcId);  				writer.WriteRow (row);  			}  		}  	}  	detectCardIDMethod (cardNumber);  }  // MRS  else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  	nfcID = cardNumber.ToLower ();  	if (updateNFCIDToolStripMenuItem.Checked) {  		frmNFCUpConfirm.getNFCCode (nfcID);  	}  	else if (manualToolStripMenuItem.Checked) {  		bool foundMRS = false;  		foreach (CsvData data in cardList) {  			if (data.mrsId == magneticCardID) {  				data.nfcId = nfcID;  				foundMRS = true;  				break;  			}  		}  		if (!foundMRS) {  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		// Write to CSV  		using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  			for (int i = 0; i < cardList.Count; i++) {  				CsvRow row = new CsvRow ();  				row.Add (cardList [i].mrsId);  				row.Add (cardList [i].nfcId);  				writer.WriteRow (row);  			}  		}  	}  	detectCardIDMethod (cardNumber);  }  // MRS  else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  	nfcID = cardNumber.ToLower ();  	if (updateNFCIDToolStripMenuItem.Checked) {  		frmNFCUpConfirm.getNFCCode (nfcID);  	}  	else if (manualToolStripMenuItem.Checked) {  		bool foundMRS = false;  		foreach (CsvData data in cardList) {  			if (data.mrsId == magneticCardID) {  				data.nfcId = nfcID;  				foundMRS = true;  				break;  			}  		}  		if (!foundMRS) {  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		// Write to CSV  		using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  			for (int i = 0; i < cardList.Count; i++) {  				CsvRow row = new CsvRow ();  				row.Add (cardList [i].mrsId);  				row.Add (cardList [i].nfcId);  				writer.WriteRow (row);  			}  		}  	}  	detectCardIDMethod (cardNumber);  }  // MRS  else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_08FF&PID_0009")) {  	nfcID = cardNumber.ToLower ();  	if (updateNFCIDToolStripMenuItem.Checked) {  		frmNFCUpConfirm.getNFCCode (nfcID);  	}  	else if (manualToolStripMenuItem.Checked) {  		bool foundMRS = false;  		foreach (CsvData data in cardList) {  			if (data.mrsId == magneticCardID) {  				data.nfcId = nfcID;  				foundMRS = true;  				break;  			}  		}  		if (!foundMRS) {  			cardList.Add (new CsvData (magneticCardID' nfcID));  		}  		// Write to CSV  		using (CsvFileWriter writer = new CsvFileWriter (csvFilePath)) {  			for (int i = 0; i < cardList.Count; i++) {  				CsvRow row = new CsvRow ();  				row.Add (cardList [i].mrsId);  				row.Add (cardList [i].nfcId);  				writer.WriteRow (row);  			}  		}  	}  	detectCardIDMethod (cardNumber);  }  // MRS  else if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (listener.dInfo.deviceName.Contains ("VID_6352&PID_213A")) {  	magneticCardID = cardNumber;  	if (updateNFCIDToolStripMenuItem.Checked) {  		if (frmNFCUpConfirm.Visible) {  			frmNFCUpConfirm.Close ();  		}  		string result = serviceHandle.makeRequest (magneticCardID);  		if (result == "NFC not found") {  			frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  			frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  			frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  			frmNFCUpConfirm.Show ();  			detectCardIDMethod (cardNumber);  		}  		else {  			notifyReader.BalloonTipText = result;  			notifyReader.ShowBalloonTip (100);  		}  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (updateNFCIDToolStripMenuItem.Checked) {  	if (frmNFCUpConfirm.Visible) {  		frmNFCUpConfirm.Close ();  	}  	string result = serviceHandle.makeRequest (magneticCardID);  	if (result == "NFC not found") {  		frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  		frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  		frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  		frmNFCUpConfirm.Show ();  		detectCardIDMethod (cardNumber);  	}  	else {  		notifyReader.BalloonTipText = result;  		notifyReader.ShowBalloonTip (100);  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (updateNFCIDToolStripMenuItem.Checked) {  	if (frmNFCUpConfirm.Visible) {  		frmNFCUpConfirm.Close ();  	}  	string result = serviceHandle.makeRequest (magneticCardID);  	if (result == "NFC not found") {  		frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  		frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  		frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  		frmNFCUpConfirm.Show ();  		detectCardIDMethod (cardNumber);  	}  	else {  		notifyReader.BalloonTipText = result;  		notifyReader.ShowBalloonTip (100);  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (updateNFCIDToolStripMenuItem.Checked) {  	if (frmNFCUpConfirm.Visible) {  		frmNFCUpConfirm.Close ();  	}  	string result = serviceHandle.makeRequest (magneticCardID);  	if (result == "NFC not found") {  		frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  		frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  		frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  		frmNFCUpConfirm.Show ();  		detectCardIDMethod (cardNumber);  	}  	else {  		notifyReader.BalloonTipText = result;  		notifyReader.ShowBalloonTip (100);  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (updateNFCIDToolStripMenuItem.Checked) {  	if (frmNFCUpConfirm.Visible) {  		frmNFCUpConfirm.Close ();  	}  	string result = serviceHandle.makeRequest (magneticCardID);  	if (result == "NFC not found") {  		frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  		frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  		frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  		frmNFCUpConfirm.Show ();  		detectCardIDMethod (cardNumber);  	}  	else {  		notifyReader.BalloonTipText = result;  		notifyReader.ShowBalloonTip (100);  	}  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (result == "NFC not found") {  	frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  	frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  	frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  	frmNFCUpConfirm.Show ();  	detectCardIDMethod (cardNumber);  }  else {  	notifyReader.BalloonTipText = result;  	notifyReader.ShowBalloonTip (100);  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (result == "NFC not found") {  	frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  	frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  	frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  	frmNFCUpConfirm.Show ();  	detectCardIDMethod (cardNumber);  }  else {  	notifyReader.BalloonTipText = result;  	notifyReader.ShowBalloonTip (100);  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (result == "NFC not found") {  	frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  	frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  	frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  	frmNFCUpConfirm.Show ();  	detectCardIDMethod (cardNumber);  }  else {  	notifyReader.BalloonTipText = result;  	notifyReader.ShowBalloonTip (100);  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: if (result == "NFC not found") {  	frmNFCUpConfirm = new NFCCardIdUpload (magneticCardID' notifyReader);  	frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  	frmNFCUpConfirm.passControl = new NFCCardIdUpload.PassControl (serviceHandle.uploadNFCCode);  	frmNFCUpConfirm.Show ();  	detectCardIDMethod (cardNumber);  }  else {  	notifyReader.BalloonTipText = result;  	notifyReader.ShowBalloonTip (100);  }  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: frmNFCUpConfirm.BackColor = Color.FromArgb (255' 211' 183);  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,CardScanCompleteEventHandle,The following statement contains a magic number: notifyReader.ShowBalloonTip (100);  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,captureImage,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,nKidReader,MainForm,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\Form1.cs,detectCardIDMethod,The following statement contains a magic number: notifyReader.ShowBalloonTip (100);  
Magic Number,nKidReader,NFCCardIdUpload,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\NFCCardIdUpload.cs,NFCCardIdUpload,The following statement contains a magic number: AnimateWindow (this.Handle' 200' AW_SLIDE | AW_VER_NEGATIVE);  
Magic Number,nKidReader,NFCCardIdUpload,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\NFCCardIdUpload.cs,button1_Click,The following statement contains a magic number: notifyReader.ShowBalloonTip (100);  
Magic Number,nKidReader,NFCCardIdUpload,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\NFCCardIdUpload.cs,button2_Click,The following statement contains a magic number: notifyReader.ShowBalloonTip (100);  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' IntPtr.Zero' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == 0) {  	IntPtr buffer;  	buffer = Marshal.AllocHGlobal ((int)size);  	try {  		if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  			RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  			if (raw.header.dwType == RIM_TYPEKEYBOARD) {  				uint pcbSize = 0;  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  				if (pcbSize > 0) {  					IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  					GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  					string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  					if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  						handled = true;  						ushort key = raw.keyboard.VKey;  						char keyBoardChar = Convert.ToChar (key);  						rawCharStrg = rawCharStrg + " " + key;  						if (raw.keyboard.Message == WM_KEYDOWN) {  							if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  								isFinal = true;  							}  							else {  								if (char.IsControl (keyBoardChar) != true) {  									currentReadString = currentReadString + keyBoardChar;  								}  							}  						}  					}  				}  			}  		}  	}  	finally {  		Marshal.FreeHGlobal (buffer);  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' IntPtr.Zero' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == 0) {  	IntPtr buffer;  	buffer = Marshal.AllocHGlobal ((int)size);  	try {  		if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  			RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  			if (raw.header.dwType == RIM_TYPEKEYBOARD) {  				uint pcbSize = 0;  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  				if (pcbSize > 0) {  					IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  					GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  					string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  					if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  						handled = true;  						ushort key = raw.keyboard.VKey;  						char keyBoardChar = Convert.ToChar (key);  						rawCharStrg = rawCharStrg + " " + key;  						if (raw.keyboard.Message == WM_KEYDOWN) {  							if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  								isFinal = true;  							}  							else {  								if (char.IsControl (keyBoardChar) != true) {  									currentReadString = currentReadString + keyBoardChar;  								}  							}  						}  					}  				}  			}  		}  	}  	finally {  		Marshal.FreeHGlobal (buffer);  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: try {  	if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  		RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  		if (raw.header.dwType == RIM_TYPEKEYBOARD) {  			uint pcbSize = 0;  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  			if (pcbSize > 0) {  				IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  				string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  				if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  					handled = true;  					ushort key = raw.keyboard.VKey;  					char keyBoardChar = Convert.ToChar (key);  					rawCharStrg = rawCharStrg + " " + key;  					if (raw.keyboard.Message == WM_KEYDOWN) {  						if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  							isFinal = true;  						}  						else {  							if (char.IsControl (keyBoardChar) != true) {  								currentReadString = currentReadString + keyBoardChar;  							}  						}  					}  				}  			}  		}  	}  }  finally {  	Marshal.FreeHGlobal (buffer);  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: try {  	if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  		RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  		if (raw.header.dwType == RIM_TYPEKEYBOARD) {  			uint pcbSize = 0;  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  			if (pcbSize > 0) {  				IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  				string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  				if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  					handled = true;  					ushort key = raw.keyboard.VKey;  					char keyBoardChar = Convert.ToChar (key);  					rawCharStrg = rawCharStrg + " " + key;  					if (raw.keyboard.Message == WM_KEYDOWN) {  						if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  							isFinal = true;  						}  						else {  							if (char.IsControl (keyBoardChar) != true) {  								currentReadString = currentReadString + keyBoardChar;  							}  						}  					}  				}  			}  		}  	}  }  finally {  	Marshal.FreeHGlobal (buffer);  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  	RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  	if (raw.header.dwType == RIM_TYPEKEYBOARD) {  		uint pcbSize = 0;  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  		if (pcbSize > 0) {  			IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  			string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  			if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  				handled = true;  				ushort key = raw.keyboard.VKey;  				char keyBoardChar = Convert.ToChar (key);  				rawCharStrg = rawCharStrg + " " + key;  				if (raw.keyboard.Message == WM_KEYDOWN) {  					if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  						isFinal = true;  					}  					else {  						if (char.IsControl (keyBoardChar) != true) {  							currentReadString = currentReadString + keyBoardChar;  						}  					}  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  	RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  	if (raw.header.dwType == RIM_TYPEKEYBOARD) {  		uint pcbSize = 0;  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  		if (pcbSize > 0) {  			IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  			string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  			if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  				handled = true;  				ushort key = raw.keyboard.VKey;  				char keyBoardChar = Convert.ToChar (key);  				rawCharStrg = rawCharStrg + " " + key;  				if (raw.keyboard.Message == WM_KEYDOWN) {  					if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  						isFinal = true;  					}  					else {  						if (char.IsControl (keyBoardChar) != true) {  							currentReadString = currentReadString + keyBoardChar;  						}  					}  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.header.dwType == RIM_TYPEKEYBOARD) {  	uint pcbSize = 0;  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  	if (pcbSize > 0) {  		IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  		string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  		if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  			handled = true;  			ushort key = raw.keyboard.VKey;  			char keyBoardChar = Convert.ToChar (key);  			rawCharStrg = rawCharStrg + " " + key;  			if (raw.keyboard.Message == WM_KEYDOWN) {  				if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  					isFinal = true;  				}  				else {  					if (char.IsControl (keyBoardChar) != true) {  						currentReadString = currentReadString + keyBoardChar;  					}  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.header.dwType == RIM_TYPEKEYBOARD) {  	uint pcbSize = 0;  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  	if (pcbSize > 0) {  		IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  		string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  		if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  			handled = true;  			ushort key = raw.keyboard.VKey;  			char keyBoardChar = Convert.ToChar (key);  			rawCharStrg = rawCharStrg + " " + key;  			if (raw.keyboard.Message == WM_KEYDOWN) {  				if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  					isFinal = true;  				}  				else {  					if (char.IsControl (keyBoardChar) != true) {  						currentReadString = currentReadString + keyBoardChar;  					}  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (pcbSize > 0) {  	IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  	string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  	if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  		handled = true;  		ushort key = raw.keyboard.VKey;  		char keyBoardChar = Convert.ToChar (key);  		rawCharStrg = rawCharStrg + " " + key;  		if (raw.keyboard.Message == WM_KEYDOWN) {  			if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  				isFinal = true;  			}  			else {  				if (char.IsControl (keyBoardChar) != true) {  					currentReadString = currentReadString + keyBoardChar;  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (pcbSize > 0) {  	IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  	string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  	if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  		handled = true;  		ushort key = raw.keyboard.VKey;  		char keyBoardChar = Convert.ToChar (key);  		rawCharStrg = rawCharStrg + " " + key;  		if (raw.keyboard.Message == WM_KEYDOWN) {  			if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  				isFinal = true;  			}  			else {  				if (char.IsControl (keyBoardChar) != true) {  					currentReadString = currentReadString + keyBoardChar;  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  	handled = true;  	ushort key = raw.keyboard.VKey;  	char keyBoardChar = Convert.ToChar (key);  	rawCharStrg = rawCharStrg + " " + key;  	if (raw.keyboard.Message == WM_KEYDOWN) {  		if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  			isFinal = true;  		}  		else {  			if (char.IsControl (keyBoardChar) != true) {  				currentReadString = currentReadString + keyBoardChar;  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  	handled = true;  	ushort key = raw.keyboard.VKey;  	char keyBoardChar = Convert.ToChar (key);  	rawCharStrg = rawCharStrg + " " + key;  	if (raw.keyboard.Message == WM_KEYDOWN) {  		if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  			isFinal = true;  		}  		else {  			if (char.IsControl (keyBoardChar) != true) {  				currentReadString = currentReadString + keyBoardChar;  			}  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.keyboard.Message == WM_KEYDOWN) {  	if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  		isFinal = true;  	}  	else {  		if (char.IsControl (keyBoardChar) != true) {  			currentReadString = currentReadString + keyBoardChar;  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.keyboard.Message == WM_KEYDOWN) {  	if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  		isFinal = true;  	}  	else {  		if (char.IsControl (keyBoardChar) != true) {  			currentReadString = currentReadString + keyBoardChar;  		}  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  	isFinal = true;  }  else {  	if (char.IsControl (keyBoardChar) != true) {  		currentReadString = currentReadString + keyBoardChar;  	}  }  
Magic Number,nKidReader,CardListener32,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  	isFinal = true;  }  else {  	if (char.IsControl (keyBoardChar) != true) {  		currentReadString = currentReadString + keyBoardChar;  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' IntPtr.Zero' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == 0) {  	IntPtr buffer;  	buffer = Marshal.AllocHGlobal ((int)size);  	try {  		if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  			RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  			if (raw.header.dwType == RIM_TYPEKEYBOARD) {  				uint pcbSize = 0;  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  				if (pcbSize > 0) {  					IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  					GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  					string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  					if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  						handled = true;  						ushort key = raw.keyboard.VKey;  						char keyBoardChar = Convert.ToChar (key);  						if (raw.keyboard.Message == WM_KEYDOWN) {  							if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  								isFinal = true;  							}  							else {  								if (char.IsControl (keyBoardChar) != true)  									currentReadString = currentReadString + keyBoardChar;  							}  						}  					}  				}  			}  		}  	}  	finally {  		Marshal.FreeHGlobal (buffer);  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' IntPtr.Zero' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == 0) {  	IntPtr buffer;  	buffer = Marshal.AllocHGlobal ((int)size);  	try {  		if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  			RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  			if (raw.header.dwType == RIM_TYPEKEYBOARD) {  				uint pcbSize = 0;  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  				if (pcbSize > 0) {  					IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  					GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  					string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  					if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  						handled = true;  						ushort key = raw.keyboard.VKey;  						char keyBoardChar = Convert.ToChar (key);  						if (raw.keyboard.Message == WM_KEYDOWN) {  							if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  								isFinal = true;  							}  							else {  								if (char.IsControl (keyBoardChar) != true)  									currentReadString = currentReadString + keyBoardChar;  							}  						}  					}  				}  			}  		}  	}  	finally {  		Marshal.FreeHGlobal (buffer);  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: try {  	if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  		RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  		if (raw.header.dwType == RIM_TYPEKEYBOARD) {  			uint pcbSize = 0;  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  			if (pcbSize > 0) {  				IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  				string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  				if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  					handled = true;  					ushort key = raw.keyboard.VKey;  					char keyBoardChar = Convert.ToChar (key);  					if (raw.keyboard.Message == WM_KEYDOWN) {  						if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  							isFinal = true;  						}  						else {  							if (char.IsControl (keyBoardChar) != true)  								currentReadString = currentReadString + keyBoardChar;  						}  					}  				}  			}  		}  	}  }  finally {  	Marshal.FreeHGlobal (buffer);  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: try {  	if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  		RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  		if (raw.header.dwType == RIM_TYPEKEYBOARD) {  			uint pcbSize = 0;  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  			if (pcbSize > 0) {  				IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  				GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  				string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  				if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  					handled = true;  					ushort key = raw.keyboard.VKey;  					char keyBoardChar = Convert.ToChar (key);  					if (raw.keyboard.Message == WM_KEYDOWN) {  						if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  							isFinal = true;  						}  						else {  							if (char.IsControl (keyBoardChar) != true)  								currentReadString = currentReadString + keyBoardChar;  						}  					}  				}  			}  		}  	}  }  finally {  	Marshal.FreeHGlobal (buffer);  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  	RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  	if (raw.header.dwType == RIM_TYPEKEYBOARD) {  		uint pcbSize = 0;  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  		if (pcbSize > 0) {  			IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  			string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  			if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  				handled = true;  				ushort key = raw.keyboard.VKey;  				char keyBoardChar = Convert.ToChar (key);  				if (raw.keyboard.Message == WM_KEYDOWN) {  					if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  						isFinal = true;  					}  					else {  						if (char.IsControl (keyBoardChar) != true)  							currentReadString = currentReadString + keyBoardChar;  					}  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (GetRawInputData (rawInputHeader' RID_INPUT' buffer' ref size' (uint)Marshal.SizeOf (typeof(RAWINPUTHEADER))) == size) {  	RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure (buffer' typeof(RAWINPUT));  	if (raw.header.dwType == RIM_TYPEKEYBOARD) {  		uint pcbSize = 0;  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  		if (pcbSize > 0) {  			IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  			GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  			string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  			if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  				handled = true;  				ushort key = raw.keyboard.VKey;  				char keyBoardChar = Convert.ToChar (key);  				if (raw.keyboard.Message == WM_KEYDOWN) {  					if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  						isFinal = true;  					}  					else {  						if (char.IsControl (keyBoardChar) != true)  							currentReadString = currentReadString + keyBoardChar;  					}  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.header.dwType == RIM_TYPEKEYBOARD) {  	uint pcbSize = 0;  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  	if (pcbSize > 0) {  		IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  		string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  		if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  			handled = true;  			ushort key = raw.keyboard.VKey;  			char keyBoardChar = Convert.ToChar (key);  			if (raw.keyboard.Message == WM_KEYDOWN) {  				if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  					isFinal = true;  				}  				else {  					if (char.IsControl (keyBoardChar) != true)  						currentReadString = currentReadString + keyBoardChar;  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.header.dwType == RIM_TYPEKEYBOARD) {  	uint pcbSize = 0;  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' IntPtr.Zero' ref pcbSize);  	if (pcbSize > 0) {  		IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  		GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  		string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  		if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  			handled = true;  			ushort key = raw.keyboard.VKey;  			char keyBoardChar = Convert.ToChar (key);  			if (raw.keyboard.Message == WM_KEYDOWN) {  				if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  					isFinal = true;  				}  				else {  					if (char.IsControl (keyBoardChar) != true)  						currentReadString = currentReadString + keyBoardChar;  				}  			}  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (pcbSize > 0) {  	IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  	string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  	if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  		handled = true;  		ushort key = raw.keyboard.VKey;  		char keyBoardChar = Convert.ToChar (key);  		if (raw.keyboard.Message == WM_KEYDOWN) {  			if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  				isFinal = true;  			}  			else {  				if (char.IsControl (keyBoardChar) != true)  					currentReadString = currentReadString + keyBoardChar;  			}  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (pcbSize > 0) {  	IntPtr pData = Marshal.AllocHGlobal ((int)pcbSize);  	GetRawInputDeviceInfo (raw.header.hDevice' RIDI_DEVICENAME' pData' ref pcbSize);  	string deviceNameOfEvent = (string)Marshal.PtrToStringAnsi (pData);  	if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  		handled = true;  		ushort key = raw.keyboard.VKey;  		char keyBoardChar = Convert.ToChar (key);  		if (raw.keyboard.Message == WM_KEYDOWN) {  			if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  				isFinal = true;  			}  			else {  				if (char.IsControl (keyBoardChar) != true)  					currentReadString = currentReadString + keyBoardChar;  			}  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  	handled = true;  	ushort key = raw.keyboard.VKey;  	char keyBoardChar = Convert.ToChar (key);  	if (raw.keyboard.Message == WM_KEYDOWN) {  		if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  			isFinal = true;  		}  		else {  			if (char.IsControl (keyBoardChar) != true)  				currentReadString = currentReadString + keyBoardChar;  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (dInfo.deviceName.Contains (deviceNameOfEvent)) {  	handled = true;  	ushort key = raw.keyboard.VKey;  	char keyBoardChar = Convert.ToChar (key);  	if (raw.keyboard.Message == WM_KEYDOWN) {  		if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  			isFinal = true;  		}  		else {  			if (char.IsControl (keyBoardChar) != true)  				currentReadString = currentReadString + keyBoardChar;  		}  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.keyboard.Message == WM_KEYDOWN) {  	if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  		isFinal = true;  	}  	else {  		if (char.IsControl (keyBoardChar) != true)  			currentReadString = currentReadString + keyBoardChar;  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if (raw.keyboard.Message == WM_KEYDOWN) {  	if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  		isFinal = true;  	}  	else {  		if (char.IsControl (keyBoardChar) != true)  			currentReadString = currentReadString + keyBoardChar;  	}  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  	isFinal = true;  }  else {  	if (char.IsControl (keyBoardChar) != true)  		currentReadString = currentReadString + keyBoardChar;  }  
Magic Number,nKidReader,CardListener64,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,ProcessRawInputMessage,The following statement contains a magic number: if ((keyBoardChar == 10 || keyBoardChar == 13) && (isFinal == false)) {  	isFinal = true;  }  else {  	if (char.IsControl (keyBoardChar) != true)  		currentReadString = currentReadString + keyBoardChar;  }  
Missing Default,nKidReader,CardListener,C:\repos\thanhhuy89vn_smartcard-reader\nKidReader\USBListener.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case CardListener.WM_INPUT:  	try {  		if (ProcessRawInputMessage (m.LParam)) {  			this.filter.FilterNext = true;  			if (isFinal == true) {  				isFinal = false;  				String FinalString = currentReadString;  				//String FinalString = rawCharStrg;  				//rawCharStrg = "";  				currentReadString = "";  				this.FireCardReadCompleteEvent (FinalString);  				//this.FireCardReadCompleteEvent(rawCharStrg);  			}  		}  	}  	catch (Exception ex) {  		MessageBox.Show ("USB Card Listener: " + ex.Message);  		isFinal = false;  		currentReadString = "";  	}  	break;  }  
