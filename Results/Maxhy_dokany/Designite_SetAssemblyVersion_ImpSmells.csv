Implementation smell,Namespace,Class,File,Method,Description
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,Main,The following statement contains a magic number: if (args.Length < 3)              {                  ShowHelp();                  return (int) EReturnCode.MissingParametersHelpShown;              }
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,Main,The following statement contains a magic number: if ((EReturnCode) result == EReturnCode.None)                  {                      var files = Directory.GetFiles(args[2]' "*.rc"' SearchOption.AllDirectories);                      Console.WriteLine("Update version in RC Files");                        foreach (var file in files)                      {                          Console.WriteLine("RC File {0} version updated."' file);                          var rcfile = File.ReadAllText(file);                          rcfile = Regex.Replace(rcfile' @"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"' version);                          rcfile = Regex.Replace(rcfile' @"[0-9]+'[0-9]+'[0-9]+'[0-9]+"' versionComma);                            File.WriteAllText(file' rcfile);                      }                        Console.WriteLine("Update build VS define versions");                      var props = File.ReadAllText(args[2] + @"\Dokan.props");                      var majorApiDefineVersionString = $@"<DOKANAPIVersion>{productVersion.Major}</DOKANAPIVersion>";                      props = Regex.Replace(props' @"<DOKANAPIVersion>[0-9]+<\/DOKANAPIVersion>"'                          majorApiDefineVersionString);                      var defineVersionString =                          $@"<DOKANVersion>{productVersion.Major}.{productVersion.Minor}.{productVersion.Build}</DOKANVersion>";                      props = Regex.Replace(props' @"<DOKANVersion>[0-9]+.[0-9]+.[0-9]+<\/DOKANVersion>"'                          defineVersionString);                      File.WriteAllText(args[2] + @"\Dokan.props"' props);                  }
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,Main,The following statement contains a magic number: if ((EReturnCode) result == EReturnCode.None)                  {                      var files = Directory.GetFiles(args[2]' "*.rc"' SearchOption.AllDirectories);                      Console.WriteLine("Update version in RC Files");                        foreach (var file in files)                      {                          Console.WriteLine("RC File {0} version updated."' file);                          var rcfile = File.ReadAllText(file);                          rcfile = Regex.Replace(rcfile' @"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"' version);                          rcfile = Regex.Replace(rcfile' @"[0-9]+'[0-9]+'[0-9]+'[0-9]+"' versionComma);                            File.WriteAllText(file' rcfile);                      }                        Console.WriteLine("Update build VS define versions");                      var props = File.ReadAllText(args[2] + @"\Dokan.props");                      var majorApiDefineVersionString = $@"<DOKANAPIVersion>{productVersion.Major}</DOKANAPIVersion>";                      props = Regex.Replace(props' @"<DOKANAPIVersion>[0-9]+<\/DOKANAPIVersion>"'                          majorApiDefineVersionString);                      var defineVersionString =                          $@"<DOKANVersion>{productVersion.Major}.{productVersion.Minor}.{productVersion.Build}</DOKANVersion>";                      props = Regex.Replace(props' @"<DOKANVersion>[0-9]+.[0-9]+.[0-9]+<\/DOKANVersion>"'                          defineVersionString);                      File.WriteAllText(args[2] + @"\Dokan.props"' props);                  }
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,Main,The following statement contains a magic number: if ((EReturnCode) result == EReturnCode.None)                  {                      var files = Directory.GetFiles(args[2]' "*.rc"' SearchOption.AllDirectories);                      Console.WriteLine("Update version in RC Files");                        foreach (var file in files)                      {                          Console.WriteLine("RC File {0} version updated."' file);                          var rcfile = File.ReadAllText(file);                          rcfile = Regex.Replace(rcfile' @"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"' version);                          rcfile = Regex.Replace(rcfile' @"[0-9]+'[0-9]+'[0-9]+'[0-9]+"' versionComma);                            File.WriteAllText(file' rcfile);                      }                        Console.WriteLine("Update build VS define versions");                      var props = File.ReadAllText(args[2] + @"\Dokan.props");                      var majorApiDefineVersionString = $@"<DOKANAPIVersion>{productVersion.Major}</DOKANAPIVersion>";                      props = Regex.Replace(props' @"<DOKANAPIVersion>[0-9]+<\/DOKANAPIVersion>"'                          majorApiDefineVersionString);                      var defineVersionString =                          $@"<DOKANVersion>{productVersion.Major}.{productVersion.Minor}.{productVersion.Build}</DOKANVersion>";                      props = Regex.Replace(props' @"<DOKANVersion>[0-9]+.[0-9]+.[0-9]+<\/DOKANVersion>"'                          defineVersionString);                      File.WriteAllText(args[2] + @"\Dokan.props"' props);                  }
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,ReadVersion,The following statement contains a magic number: using (var reader = new StreamReader(file))              {                  var regExVersion = new Regex(ProductVersionRegex' RegexOptions.IgnoreCase);                    var line = 0;                  while (reader.Peek() != 0 && line < 10) // find version in first 5 lines                   {                      line++;                      var data = reader.ReadLine();                      if (string.IsNullOrEmpty(data))                          continue;                        var m = regExVersion.Match(data);                      if (!string.IsNullOrEmpty(m.Value))                          return Version.Parse(m.Value);                  }              }
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,ModifyProductParametersXml,The following statement contains a magic number: var dateString = todayDate.ToString("yyyyMMddHHmmss").Substring(2);
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,ModifyProductParametersXml,The following statement contains a magic number: for (var i = 0; i < lines.Length; i++)              {                  string value;                  var line = lines[i];                    if (!line.Contains("=\""))                      continue;                    var parts = line.Split('=');                  if (parts.Length < 1)                      continue;                    const string cLineFormat = "{0}=\"{1}\" ?>";                    if (line.ToLower().Contains("productcodex86"))                  {                      var myVersion = productVer.Major.ToString("X2") + productVer.Minor.ToString("X2") + "-" +                                      productVer.Build.ToString("X4") + "-" + dateString;                      value = parts[1];                        // Format ProductCode="{65A3A986-3DC3-mjmi-buld-yyMMddHHmmss}" ?>                        value = value.Substring(0' 16) + myVersion;                      line = $"{parts[0]}={value}" + "}" + "\"" + " ?>";                  }                  else if (line.ToLower().Contains("productcodex64"))                  {                      var myVersion = productVer.Major.ToString("X2") + productVer.Minor.ToString("X2") + "-" +                                      productVer.Build.ToString("X4") + "-" + dateString;                      value = parts[1];                        // Format ProductCode="{65A3A964-3DC3-mjmi-buld-yyMMddHHmmss}" ?>                        value = value.Substring(0' 16) + myVersion;                      line = $"{parts[0]}={value}" + "}" + "\"" + " ?>";                  }                  else if (line.ToLower().Contains("majorversion"))                  {                      value = $"{productVer.Major}";                      line = string.Format(cLineFormat' parts[0]' value);                  }                  else if (line.ToLower().Contains("baseversion"))                  {                      value = $"{productVer.Major}.{productVer.Minor}.{productVer.Build}";                      line = string.Format(cLineFormat' parts[0]' value);                  }                  else if (line.ToLower().Contains("buildversion"))                  {                      value = productVer.Revision.ToString("0000");                      // value = yearOnly;                      line = string.Format(cLineFormat' parts[0]' value);                  }                    lines[i] = line;              }
Magic Number,SetAssemblyVersion,Program,C:\repos\Maxhy_dokany\dokan_wix\SetAssemblyVersion\Program.cs,ModifyProductParametersXml,The following statement contains a magic number: for (var i = 0; i < lines.Length; i++)              {                  string value;                  var line = lines[i];                    if (!line.Contains("=\""))                      continue;                    var parts = line.Split('=');                  if (parts.Length < 1)                      continue;                    const string cLineFormat = "{0}=\"{1}\" ?>";                    if (line.ToLower().Contains("productcodex86"))                  {                      var myVersion = productVer.Major.ToString("X2") + productVer.Minor.ToString("X2") + "-" +                                      productVer.Build.ToString("X4") + "-" + dateString;                      value = parts[1];                        // Format ProductCode="{65A3A986-3DC3-mjmi-buld-yyMMddHHmmss}" ?>                        value = value.Substring(0' 16) + myVersion;                      line = $"{parts[0]}={value}" + "}" + "\"" + " ?>";                  }                  else if (line.ToLower().Contains("productcodex64"))                  {                      var myVersion = productVer.Major.ToString("X2") + productVer.Minor.ToString("X2") + "-" +                                      productVer.Build.ToString("X4") + "-" + dateString;                      value = parts[1];                        // Format ProductCode="{65A3A964-3DC3-mjmi-buld-yyMMddHHmmss}" ?>                        value = value.Substring(0' 16) + myVersion;                      line = $"{parts[0]}={value}" + "}" + "\"" + " ?>";                  }                  else if (line.ToLower().Contains("majorversion"))                  {                      value = $"{productVer.Major}";                      line = string.Format(cLineFormat' parts[0]' value);                  }                  else if (line.ToLower().Contains("baseversion"))                  {                      value = $"{productVer.Major}.{productVer.Minor}.{productVer.Build}";                      line = string.Format(cLineFormat' parts[0]' value);                  }                  else if (line.ToLower().Contains("buildversion"))                  {                      value = productVer.Revision.ToString("0000");                      // value = yearOnly;                      line = string.Format(cLineFormat' parts[0]' value);                  }                    lines[i] = line;              }
