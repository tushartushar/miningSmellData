Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,SetSettings,The length of the statement  "                    if (settings.Options[i].NotRemotelyChangeable != settings2.Options[i].NotRemotelyChangeable) throw new Exception("Uh uh"); " is 122.
Long Statement,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,SetSettings,The length of the statement  "                        if (!(settings.Options[i].Label == "No Transfer Timeout" && settings.Options[i].NumericValue < 600 && settings2.Options[i].NumericValue == 600)) " is 144.
Long Statement,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,SetSettings,The length of the statement  "                        if (!(settings.Options[i].Label == "Admin Password" && settings.Options[i].TextValue == "*" && settings2.Options[i].TextValue == null)) " is 135.
Long Statement,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,CreateUserAndGroup,The length of the statement  "                            AccessRights = AccessRights.DirList | AccessRights.DirSubdirs | AccessRights.FileRead | AccessRights.FileWrite | AccessRights.IsHome " is 132.
Magic Number,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,SetServerState,The following statement contains a magic number: using (IFileZillaApi fileZillaApi = new FileZillaApi(IPAddress.Parse(Ip)' Port) { Log = DebugLog })              {                  fileZillaApi.Connect(ServerPassword);                  var serverState = fileZillaApi.GetServerState();                  Console.WriteLine("State is {0}"' serverState);                    // Go offiline                  serverState = fileZillaApi.SetServerState(ServerState.GoOfflineNow);                  Console.WriteLine("GoOfflineNow State is {0}"' serverState);                  Thread.Sleep(TimeSpan.FromSeconds(5));                  serverState = fileZillaApi.GetServerState();                  Console.WriteLine("State is {0}"' serverState);                    // Go online                  serverState = fileZillaApi.SetServerState(ServerState.Online);                  Console.WriteLine("State is {0}"' serverState);                    // Lock server                  serverState = fileZillaApi.SetServerState(ServerState.Online | ServerState.Locked);                  Console.WriteLine("Lock State is {0}"' serverState);                    // Unlock                  serverState = fileZillaApi.SetServerState(ServerState.Online);                  Console.WriteLine("State is {0}"' serverState);              }
Magic Number,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,SetSettings,The following statement contains a magic number: using (IFileZillaApi fileZillaApi = new FileZillaApi(IPAddress.Parse(Ip)' Port) { Log = DebugLog })              {                  var stopWatch = Stopwatch2.StartNew();                    fileZillaApi.Connect(ServerPassword);                  var settings = fileZillaApi.GetSettings();                  Console.WriteLine("Settings retrieved in {0}."' stopWatch.GetDelta());                    // Select option to modify                  var option = settings.GetOption(OptionId.WELCOMEMESSAGE);                    // Modify                  string originalTextValue = option.TextValue;                  const string newMessage = "Hello world";                  option.TextValue = newMessage;                    // Save                  if (!fileZillaApi.SetSettings(settings)) throw new Exception("Uh uh");                  var settings2 = fileZillaApi.GetSettings();                    // Verify                   if (settings.Options.Count() != settings2.Options.Count()) throw new Exception("Uh uh");                  for (int i = 0; i < settings.Options.Count(); i++)                  {                      if (settings.Options[i].Label != settings2.Options[i].Label) throw new Exception("Uh uh");                      if (settings.Options[i].NotRemotelyChangeable != settings2.Options[i].NotRemotelyChangeable) throw new Exception("Uh uh");                      if (settings.Options[i].OptionType != settings2.Options[i].OptionType) throw new Exception("Uh uh");                      if (settings.Options[i].NumericValue != settings2.Options[i].NumericValue)                      {                          // Numeric value of "No Transfer Timeout" is bumped up to 600 by the server. Ignore that.                          if (!(settings.Options[i].Label == "No Transfer Timeout" && settings.Options[i].NumericValue < 600 && settings2.Options[i].NumericValue == 600))                              throw new Exception("Uh uh");                      }                        if (settings.Options[i].TextValue != settings2.Options[i].TextValue)                      {                          // Admin Password is sent as "*" when not set                          if (!(settings.Options[i].Label == "Admin Password" && settings.Options[i].TextValue == "*" && settings2.Options[i].TextValue == null))                              throw new Exception("Uh uh");                      }                  }                    // Restore                   settings.GetOption(OptionId.WELCOMEMESSAGE).TextValue = originalTextValue;                  fileZillaApi.SetSettings(settings);              }
Magic Number,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,SetSettings,The following statement contains a magic number: using (IFileZillaApi fileZillaApi = new FileZillaApi(IPAddress.Parse(Ip)' Port) { Log = DebugLog })              {                  var stopWatch = Stopwatch2.StartNew();                    fileZillaApi.Connect(ServerPassword);                  var settings = fileZillaApi.GetSettings();                  Console.WriteLine("Settings retrieved in {0}."' stopWatch.GetDelta());                    // Select option to modify                  var option = settings.GetOption(OptionId.WELCOMEMESSAGE);                    // Modify                  string originalTextValue = option.TextValue;                  const string newMessage = "Hello world";                  option.TextValue = newMessage;                    // Save                  if (!fileZillaApi.SetSettings(settings)) throw new Exception("Uh uh");                  var settings2 = fileZillaApi.GetSettings();                    // Verify                   if (settings.Options.Count() != settings2.Options.Count()) throw new Exception("Uh uh");                  for (int i = 0; i < settings.Options.Count(); i++)                  {                      if (settings.Options[i].Label != settings2.Options[i].Label) throw new Exception("Uh uh");                      if (settings.Options[i].NotRemotelyChangeable != settings2.Options[i].NotRemotelyChangeable) throw new Exception("Uh uh");                      if (settings.Options[i].OptionType != settings2.Options[i].OptionType) throw new Exception("Uh uh");                      if (settings.Options[i].NumericValue != settings2.Options[i].NumericValue)                      {                          // Numeric value of "No Transfer Timeout" is bumped up to 600 by the server. Ignore that.                          if (!(settings.Options[i].Label == "No Transfer Timeout" && settings.Options[i].NumericValue < 600 && settings2.Options[i].NumericValue == 600))                              throw new Exception("Uh uh");                      }                        if (settings.Options[i].TextValue != settings2.Options[i].TextValue)                      {                          // Admin Password is sent as "*" when not set                          if (!(settings.Options[i].Label == "Admin Password" && settings.Options[i].TextValue == "*" && settings2.Options[i].TextValue == null))                              throw new Exception("Uh uh");                      }                  }                    // Restore                   settings.GetOption(OptionId.WELCOMEMESSAGE).TextValue = originalTextValue;                  fileZillaApi.SetSettings(settings);              }
Magic Number,Miracle.FileZilla.Api.Samples,Program,C:\repos\PolarbearDK_Miracle.FileZilla.Api\Source\Samples\Program.cs,GetMessagesLoop,The following statement contains a magic number: using (var serverProtocol = new FileZillaServerProtocol(IPAddress.Parse(Ip)' Port) { Log = DebugLog })              {                  serverProtocol.Connect(ServerPassword);                  Console.WriteLine("Listening to FileZilla server. Connect to server with FTP client now... (CTRL-C to exit)");                  Console.WriteLine("Causing a deliberate error to see error response");                  serverProtocol.SendCommand((MessageType)42); // Send deliberate unknown command                  while (true)                  {                      serverProtocol.SendCommand(MessageType.Loopback);                      var messages = serverProtocol.ReceiveMessages();                      foreach (var message in messages)                      {                          switch (message.MessageType)                          {                              case MessageType.Loopback:                                  break;                              case MessageType.Error:                                  var error = (Error)message.Body;                                  Console.WriteLine("Error Message:{0} TextType:{1}"' error.Message' error.TextType);                                  break;                              default:                                  Console.WriteLine("{0} {1} ({2}){3}"'                                      message.MessageOrigin'                                      message.MessageType'                                      message.Body != null ? message.Body.GetType().Name : "null"'                                      message.Body != null ? JsonConvert.SerializeObject(message.Body) : "");                                  break;                          }                      }                      Thread.Sleep(TimeSpan.FromSeconds(1));                  }              }
