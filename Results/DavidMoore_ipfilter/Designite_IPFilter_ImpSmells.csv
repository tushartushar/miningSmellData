Implementation smell,Namespace,Class,File,Method,Description
Long Method,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The method has 100 lines of code.
Long Method,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The method has 117 lines of code.
Long Method,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The method has 163 lines of code.
Complex Method,IPFilter.Cli,FileFetcher,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\FileFetcher.cs,GetRemoteFile,Cyclomatic complexity of the method is 9
Complex Method,IPFilter.Cli,JsonNode,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\JsonNode.cs,Accept,Cyclomatic complexity of the method is 8
Complex Method,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,Cyclomatic complexity of the method is 37
Complex Method,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,Cyclomatic complexity of the method is 10
Complex Method,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseEntry,Cyclomatic complexity of the method is 10
Complex Method,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,Cyclomatic complexity of the method is 21
Complex Method,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,Cyclomatic complexity of the method is 13
Complex Method,IPFilter.Services.Deployment,ClickOnceRegistry,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\ClickOnceRegistry.cs,ReadMarks,Cyclomatic complexity of the method is 8
Complex Method,IPFilter.Services.Deployment,RemoveRegistryKeys,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\RemoveRegistryKeys.cs,Prepare,Cyclomatic complexity of the method is 8
Complex Method,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,StartAsync,Cyclomatic complexity of the method is 10
Complex Method,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,Cyclomatic complexity of the method is 13
Long Parameter List,IPFilter.Cli,StreamExtensions,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\StreamExtensions.cs,ReadAndHashAsync,The method has 6 parameters. Parameters: source' buffer' offset' count' algorithm' cancellationToken
Long Parameter List,IPFilter.Cli,StreamExtensions,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\StreamExtensions.cs,CopyToAndHashAsync,The method has 5 parameters. Parameters: source' destination' bufferSize' hasher' cancellationToken
Long Parameter List,IPFilter.Native,ProcessManager,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Native\ProcessManager.cs,CreateProcess,The method has 10 parameters. Parameters: applicationName' commandLine' processAttributes' threadAttributes' inheritHandles' creationFlags' environment' currentDirectory' startupInfo' processInformation
Long Parameter List,IPFilter.Services,DeploymentHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\DeploymentHelper.cs,CorLaunchApplication,The method has 7 parameters. Parameters: hostType' applicationFullName' manifestPathsCount' manifestPaths' activationDataCount' activationData' processInformation
Long Parameter List,IPFilter.ViewModels,MessageBoxHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MessageBoxHelper.cs,Show,The method has 7 parameters. Parameters: parent' title' buttons' image' defaultButton' message' args
Long Statement,IPFilter,EntryPoint,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\EntryPoint.cs,OnUnhandledException,The length of the statement  "            MessageBox.Show(Application.Current.MainWindow' ex.ToString()' "Unhandled Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,IPFilter,EntryPoint,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\EntryPoint.cs,SilentMain,The length of the statement  "                        //if( percent > progressValue) progress.Report(UpdateState.Decompressing' "Parsed " + filter.Entries.Count + " entries"'  percent); " is 131.
Long Statement,IPFilter.Apps,BitTorrentApplication,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\BitTorrentApplication.cs,DetectAsync,The length of the statement  "                if (result.InstallLocation == null || !result.InstallLocation.Exists) return Task.FromResult(ApplicationDetectionResult.NotFound());; " is 133.
Long Statement,IPFilter.Apps,BitTorrentApplication,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\BitTorrentApplication.cs,UpdateFilterAsync,The length of the statement  "            var roamingPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData' Environment.SpecialFolderOption.Create); " is 127.
Long Statement,IPFilter.Apps,BitTorrentApplication,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\BitTorrentApplication.cs,UpdateFilterAsync,The length of the statement  "//                MessageBox.Show("You haven't enabled IP Filtering in ÂµTorrent! Go to http://ipfilter.codeplex.com/ for help."' "IP filtering not enabled"' MessageBoxButton.OK); " is 178.
Long Statement,IPFilter.Apps,EmuleApplication,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\EmuleApplication.cs,UpdateFilterAsync,The length of the statement  "            var roamingPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData' Environment.SpecialFolderOption.Create); " is 132.
Long Statement,IPFilter.Apps,QBitTorrent,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\QBitTorrent.cs,DetectAsync,The length of the statement  "                    if (result.InstallLocation == null || !result.InstallLocation.Exists) return Task.FromResult(ApplicationDetectionResult.NotFound()); " is 132.
Long Statement,IPFilter.Apps,QBitTorrent,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\QBitTorrent.cs,UpdateFilterAsync,The length of the statement  "            var localPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData' Environment.SpecialFolderOption.Create); " is 130.
Long Statement,IPFilter.Apps,QBitTorrent,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\QBitTorrent.cs,UpdateFilterAsync,The length of the statement  "            if (destinationDirectory != null && !Directory.Exists(destinationDirectory)) Directory.CreateDirectory(destinationDirectory); " is 125.
Long Statement,IPFilter.Apps,QBitTorrent,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Apps\QBitTorrent.cs,UpdateFilterAsync,The length of the statement  "            var qBittorrentIniPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' FolderName' "qBittorrent.ini"); " is 139.
Long Statement,IPFilter.Cli,FileFetcher,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\FileFetcher.cs,GetLocalFile,The length of the statement  "            if (destination.Exists && destination.LastWriteTimeUtc >= source.LastWriteTimeUtc && destination.Length == source.Length) " is 121.
Long Statement,IPFilter.Cli,JsonNode,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\JsonNode.cs,ResolveUri,The length of the statement  "                Trace.TraceWarning("Skipping {0} as it doesn't have a full URI' and parent {1} has no base URI we can use."' list.Name' provider.Name); " is 135.
Long Statement,IPFilter.Cli,StreamExtensions,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\StreamExtensions.cs,CopyToAndHashAsync,The length of the statement  "            while ((bytesRead = await source.ReadAndHashAsync(buffer' 0' buffer.Length' hasher' cancellationToken).ConfigureAwait(false)) != 0) " is 131.
Long Statement,IPFilter.Commands,ScheduledTaskCommand,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Commands\ScheduledTaskCommand.cs,Execute,The length of the statement  "                var registered = folder.RegisterTaskDefinition(taskPath' task' (int)_TASK_CREATION.TASK_CREATE_OR_UPDATE' null'null'_TASK_LOGON_TYPE.TASK_LOGON_INTERACTIVE_TOKEN); " is 163.
Long Statement,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The length of the statement  "                    address.Append(from[3].ToString("D3")).Append(".").Append(from[2].ToString("D3")).Append(".").Append(from[1].ToString("D3")).Append(".").Append(from[0].ToString("D3")); " is 168.
Long Statement,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The length of the statement  "                    address.Append(to[3].ToString("D3")).Append(".").Append(to[2].ToString("D3")).Append(".").Append(to[1].ToString("D3")).Append(".").Append(to[0].ToString("D3")); " is 160.
Long Statement,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The length of the statement  "                var accessText = accessDelimiter > -1 ? value.Substring(firstDelimiter + 1' accessDelimiter - firstDelimiter - 1) : value.Substring(firstDelimiter + 1); " is 152.
Long Statement,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The length of the statement  "                    var description = descriptionDelimiter > -1 ? value.Substring(accessDelimiter + 1' value.Length - descriptionDelimiter) : value.Substring(accessDelimiter + 1); " is 159.
Long Statement,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The length of the statement  "            sb.AppendFormat("{0}.{1}.{2}.{3} - {4}.{5}.{6}.{7}"' fromBytes[0]' fromBytes[1]' fromBytes[2]' fromBytes[3]' toBytes[0]' toBytes[1]' toBytes[2]' toBytes[3]); " is 157.
Long Statement,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseEntry,The length of the statement  "                var accessText = accessDelimiter > -1 ? value.Substring(firstDelimiter + 1' accessDelimiter - firstDelimiter - 1) : value.Substring(firstDelimiter + 1); " is 152.
Long Statement,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseEntry,The length of the statement  "                    description = (descriptionDelimiter > -1 ? value.Substring(accessDelimiter + 1' value.Length - descriptionDelimiter) : value.Substring(accessDelimiter + 1)).Trim(); " is 164.
Long Statement,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,GetBytes,The length of the statement  "            return !BitConverter.IsLittleEndian ? BitConverter.GetBytes(address) : BitConverter.GetBytes(ReverseBytes((int)address)); " is 121.
Long Statement,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The length of the statement  "            return ((int)ReverseBytes((short)host) & (int)ushort.MaxValue) << 16 | (int)ReverseBytes((short)(host >> 16)) & (int)ushort.MaxValue; " is 133.
Long Statement,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The length of the statement  "            return (uint) (((int)ReverseBytes((short)host) & (int)ushort.MaxValue) << 16 | (int)ReverseBytes((short)(host >> 16)) & (int)ushort.MaxValue); " is 142.
Long Statement,IPFilter.Models,FilterSource,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Models\FilterSource.cs,Equals,The length of the statement  "            return string.Equals(Provider' other.Provider' StringComparison.OrdinalIgnoreCase) && string.Equals(Id' other.Id' StringComparison.OrdinalIgnoreCase); " is 150.
Long Statement,IPFilter.Models,FilterSource,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Models\FilterSource.cs,GetHashCode,The length of the statement  "            return (StringComparer.OrdinalIgnoreCase.GetHashCode(Provider) * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode(Id); " is 121.
Long Statement,IPFilter.Native,PathHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Native\PathHelper.cs,GetDirectoryInfo,The length of the statement  "                // On some cultures' the backslash character (0x5C / 92) is displayed differently' so we will use the culture's codepage " is 120.
Long Statement,IPFilter.Native,PathHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Native\PathHelper.cs,GetDirectoryInfo,The length of the statement  "                // For example' in Japanese codepage 932' the backslash character is displayed as the Yen symbol e.g C:Â¥Program FilesÂ¥qBittorrent " is 129.
Long Statement,IPFilter.Native,PathHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Native\PathHelper.cs,GetDirectoryInfo,The length of the statement  "                // If we read in the path bytes using the Japanese codepage of 932' then convert those bytes to a string using the same codepage' " is 129.
Long Statement,IPFilter.Native,PathHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Native\PathHelper.cs,GetDirectoryInfo,The length of the statement  "                Trace.TraceWarning($"Couldn't normalize the path '{path}'. Culture: {cultureInfo}' CodePage: {cultureInfo.TextInfo.ANSICodePage}"); " is 131.
Long Statement,IPFilter.Services,CryptoHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\CryptoHelper.cs,EncryptString,The length of the statement  "            byte[] encryptedData = ProtectedData.Protect(Encoding.Unicode.GetBytes(ToInsecureString(input))' entropy' DataProtectionScope.CurrentUser); " is 139.
Long Statement,IPFilter.Services,CryptoHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\CryptoHelper.cs,DecryptString,The length of the statement  "                byte[] decryptedData = ProtectedData.Unprotect(Convert.FromBase64String(encryptedData)' entropy' DataProtectionScope.CurrentUser); " is 130.
Long Statement,IPFilter.Services,Updater,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\Updater.cs,CheckForUpdateAsync,The length of the statement  "                client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("DavidMooreIPFilter"' EntryPoint.Version.ToString())); " is 124.
Long Statement,IPFilter.Services,Updater,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\Updater.cs,CheckForUpdateAsync,The length of the statement  "                    var latest = results.FirstOrDefault(x => (isPreReleaseEnabled || !x.prerelease) && !x.tag_name.Equals("lists"' StringComparison.OrdinalIgnoreCase)); " is 148.
Long Statement,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The length of the statement  "                                if (cacheResult.FilterTimestamp >= result.FilterTimestamp && cacheResult.Etag != null && !cacheResult.Etag.IsWeak && cacheResult.Etag.Tag == result.Etag.Tag) " is 157.
Long Statement,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The length of the statement  "                                        var status = string.Format(CultureInfo.CurrentUICulture' "Downloaded {0:F2} MB of {1:F2} MB"' downloadedMegs' lengthInMb); " is 122.
Long Statement,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,Decompress,The length of the statement  "                            if (zipFile.Entries.Count > 1) throw new IOException("There is more than one file in the zip file. This application will need to be updated to support this."); " is 159.
Long Statement,IPFilter.Services.Deployment,SemanticVersion,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\SemanticVersion.cs,Parse,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' "'{0}' is not a valid version string."' version)' nameof(version)); " is 137.
Long Statement,IPFilter.Services.Deployment,SemanticVersion,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\SemanticVersion.cs,TryParseInternal,The length of the statement  "            semVer = new SemanticVersion(NormalizeVersionValue(versionValue)' match.Groups["Release"].Value.TrimStart('-')' version.Replace(" "' "")); " is 138.
Long Statement,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,Start,The length of the statement  "                    Task.Run(StartAsync' cancellationToken.Token);//' TaskCreationOptions.None);//' TaskScheduler.FromCurrentSynchronizationContext()); " is 131.
Long Statement,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,StartAsync,The length of the statement  "                                if( percent > ProgressValue) progress.Report(new ProgressModel(UpdateState.Decompressing' "Parsed " + filter.Entries.Count + " entries"'  percent)); " is 148.
Long Statement,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The length of the statement  "                if (MessageBoxHelper.Show(dispatcher' "Update Available"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.Yes' " is 129.
Long Statement,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The length of the statement  "                    "An update to version {0} is available. Would you like to update now?"' Update.AvailableVersion) != MessageBoxResult.Yes) " is 121.
Long Statement,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The length of the statement  "                    using (var response = await httpClient.GetAsync(uri' HttpCompletionOption.ResponseHeadersRead' cancellationToken.Token)) " is 120.
Long Statement,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The length of the statement  "                                    var status = string.Format(CultureInfo.CurrentUICulture' "Downloaded {0:F2} MB of {1:F2} MB"' downloadedMegs' lengthInMb); " is 122.
Long Statement,IPFilter.ViewModels,MessageBoxHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MessageBoxHelper.cs,Show,The length of the statement  "            var formattedMessage = args == null || args.Length == 0 ? message : string.Format(CultureInfo.CurrentCulture' message' args); " is 125.
Long Statement,IPFilter.ViewModels,MessageBoxHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MessageBoxHelper.cs,Show,The length of the statement  "            var options = CultureInfo.CurrentCulture.TextInfo.IsRightToLeft ? MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading : 0; " is 130.
Long Statement,IPFilter.ViewModels,OptionsViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\OptionsViewModel.cs,SaveSettings,The length of the statement  "//                var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.PerUserRoamingAndLocal); " is 120.
Long Statement,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/IPFilter;V3.0.0.0;component/views/mainwindow.xaml"' System.UriKind.Relative); " is 123.
Long Statement,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.LaunchHelp); " is 141.
Long Statement,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.OpenLog); " is 138.
Long Statement,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Options); " is 138.
Long Statement,IPFilter.Views,OptionsWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\OptionsWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/IPFilter;V3.0.0.0;component/views/optionswindow.xaml"' System.UriKind.Relative); " is 126.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\obj\Debug\net45\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,IPFilter.Cli,FileFetcher,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\FileFetcher.cs,GetRemoteFile,The conditional expression  "destination.Exists && (length.HasValue && length.Value == destination.Length) &&                      (sourceTimestamp.HasValue && sourceTimestamp.Value.UtcDateTime <= destination.LastWriteTimeUtc)"  is complex.
Complex Conditional,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The conditional expression  "(numberBase == Decimal || numberBase == Hex) && '0' <= ch && ch <= '9'"  is complex.
Complex Conditional,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The conditional expression  "(ch = name[current]) == '/' || ch == '\\' || (notImplicitFile && (ch == ':' || ch == '?' || ch == '#'))"  is complex.
Complex Conditional,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The conditional expression  "cache != null && Config.Default.settings.cache.isEnabled && result.Etag != null && !result.Etag.IsWeak"  is complex.
Complex Conditional,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The conditional expression  "cacheResult.FilterTimestamp >= result.FilterTimestamp && cacheResult.Etag != null && !cacheResult.Etag.IsWeak && cacheResult.Etag.Tag == result.Etag.Tag"  is complex.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,Close,The method has an empty catch block.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,Flush,The method has an empty catch block.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,Write,The method has an empty catch block.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,EnsureWriter,The method has an empty catch block.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,EnsureWriter,The method has an empty catch block.
Empty Catch Block,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,EnsureWriter,The method has an empty catch block.
Empty Catch Block,IPFilter.Services.Deployment,RemoveFiles,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\RemoveFiles.cs,Execute,The method has an empty catch block.
Empty Catch Block,IPFilter.Services.Deployment,RemoveStartMenuEntry,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\RemoveStartMenuEntry.cs,Execute,The method has an empty catch block.
Magic Number,IPFilter,EntryPoint,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\EntryPoint.cs,Main,The following statement contains a magic number: Trace.IndentSize = 2;
Magic Number,IPFilter,EntryPoint,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\EntryPoint.cs,SilentMain,The following statement contains a magic number: var percent = (int)Math.Floor( (double)filter.Stream.Position / filter.Stream.Length * 100);
Magic Number,IPFilter.Cli,FileFetcher,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\FileFetcher.cs,GetRemoteFile,The following statement contains a magic number: double lengthInMb = !length.HasValue ? -1 : (double) length.Value / 1024 / 1024;
Magic Number,IPFilter.Cli,FileFetcher,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\FileFetcher.cs,GetRemoteFile,The following statement contains a magic number: double lengthInMb = !length.HasValue ? -1 : (double) length.Value / 1024 / 1024;
Magic Number,IPFilter.Cli,Options,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Cli\Options.cs,Parse,The following statement contains a magic number: options.Outputs.Add(arg.Substring(2));
Magic Number,IPFilter.Commands,ScheduledTaskCommand,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Commands\ScheduledTaskCommand.cs,Execute,The following statement contains a magic number: var date = new DateTime(now.Year' now.Month' now.Day' 4' 0' 0);
Magic Number,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The following statement contains a magic number: var buffer = new byte[4];
Magic Number,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The following statement contains a magic number: var bytesRead = await stream.ReadAsync(buffer' 0' 4);
Magic Number,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The following statement contains a magic number: buffer[0] == 31 && buffer[1] == 139
Magic Number,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The following statement contains a magic number: buffer[0] == 31 && buffer[1] == 139
Magic Number,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The following statement contains a magic number: bytesRead == 4
Magic Number,IPFilter.Core,FormatDetector,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Core\FormatDetector.cs,DetectFormat,The following statement contains a magic number: var lineBuffer = new char[1000];
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: int num1 = 15;
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: char* chPtr = stackalloc char[15];
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: int num2 = (int) (this.Value >> 24 & (long) byte.MaxValue);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--num1] = (char) (48 + num2 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--num1] = (char) (48 + num2 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: num2 /= 10;
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: int num4 = (int) (this.Value >> 16 & (long) byte.MaxValue);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--num3] = (char) (48 + num4 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--num3] = (char) (48 + num4 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: num4 /= 10;
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: int num6 = (int) (this.Value >> 8 & (long) byte.MaxValue);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--num5] = (char) (48 + num6 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--num5] = (char) (48 + num6 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: num6 /= 10;
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--startIndex] = (char) (48 + num7 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: chPtr[--startIndex] = (char) (48 + num7 % 10);
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: num7 /= 10;
Magic Number,IPFilter.Formats,Address,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\Address.cs,ToString,The following statement contains a magic number: StringValue = new string(chPtr' startIndex' 15 - startIndex);
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: var sb = new StringBuilder(255);
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: var address = new StringBuilder(15);
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: address.Append(from[3].ToString("D3")).Append(".").Append(from[2].ToString("D3")).Append(".").Append(from[1].ToString("D3")).Append(".").Append(from[0].ToString("D3"));
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: address.Append(from[3].ToString("D3")).Append(".").Append(from[2].ToString("D3")).Append(".").Append(from[1].ToString("D3")).Append(".").Append(from[0].ToString("D3"));
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: address.Append(to[3].ToString("D3")).Append(".").Append(to[2].ToString("D3")).Append(".").Append(to[1].ToString("D3")).Append(".").Append(to[0].ToString("D3"));
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: address.Append(to[3].ToString("D3")).Append(".").Append(to[2].ToString("D3")).Append(".").Append(to[1].ToString("D3")).Append(".").Append(to[0].ToString("D3"));
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: sb.Append(" ' ").Append(entries[i - 1].Level.ToString("D3").PadLeft(3)).Append(" ' ");
Magic Number,IPFilter.Formats,BitTorrentWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\BitTorrentWriter.cs,Write,The following statement contains a magic number: var percent = (int)Math.Floor((double)i / entries.Count * 100);
Magic Number,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The following statement contains a magic number: int.TryParse(accessText' out var access) && access > 127
Magic Number,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The following statement contains a magic number: sb.AppendFormat("{0}.{1}.{2}.{3} - {4}.{5}.{6}.{7}"' fromBytes[0]' fromBytes[1]' fromBytes[2]' fromBytes[3]' toBytes[0]' toBytes[1]' toBytes[2]' toBytes[3]);
Magic Number,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The following statement contains a magic number: sb.AppendFormat("{0}.{1}.{2}.{3} - {4}.{5}.{6}.{7}"' fromBytes[0]' fromBytes[1]' fromBytes[2]' fromBytes[3]' toBytes[0]' toBytes[1]' toBytes[2]' toBytes[3]);
Magic Number,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The following statement contains a magic number: sb.AppendFormat("{0}.{1}.{2}.{3} - {4}.{5}.{6}.{7}"' fromBytes[0]' fromBytes[1]' fromBytes[2]' fromBytes[3]' toBytes[0]' toBytes[1]' toBytes[2]' toBytes[3]);
Magic Number,IPFilter.Formats,DatParser,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\DatParser.cs,ParseLine,The following statement contains a magic number: sb.AppendFormat("{0}.{1}.{2}.{3} - {4}.{5}.{6}.{7}"' fromBytes[0]' fromBytes[1]' fromBytes[2]' fromBytes[3]' toBytes[0]' toBytes[1]' toBytes[2]' toBytes[3]);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: var sb = new StringBuilder(255);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: var address = new StringBuilder(15);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: address.Append(from[3]).Append(".").Append(from[2]).Append(".").Append(from[1]).Append(".").Append(from[0]);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: address.Append(from[3]).Append(".").Append(from[2]).Append(".").Append(from[1]).Append(".").Append(from[0]);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: sb.Append(address.ToString().PadRight(16));
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: address.Append(to[3]).Append(".").Append(to[2]).Append(".").Append(to[1]).Append(".").Append(to[0]);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: address.Append(to[3]).Append(".").Append(to[2]).Append(".").Append(to[1]).Append(".").Append(to[0]);
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: sb.Append(address.ToString().PadRight(16));
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: sb.Append("' ").Append(entry.Level.ToString().PadLeft(3)).Append(" ' ");
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: var percent = (int) Math.Floor((double) (i / entries.Count * 100));
Magic Number,IPFilter.Formats,EmuleWriter,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\EmuleWriter.cs,Write,The following statement contains a magic number: progress?.Report(new ProgressModel(UpdateState.Decompressing' "Updated eMule."' 100));
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,Parse,The following statement contains a magic number: var numbers = address.Split(new[] { '.' }' 4);
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,Parse,The following statement contains a magic number: numbers.Length < 4
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,Parse,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,Parse,The following statement contains a magic number: number < 0 || number > 255
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: long* parts = stackalloc long[4];
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: dotCount >= 3 // Max of 3 dots and 4 segments                          || !atLeastOneChar // No empty segmets: 1...1                                             // Only the last segment can be more than 255 (if there are less than 3 dots)                          || currentValue > 0xFF
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ParseNonCanonical,The following statement contains a magic number: switch (dotCount)              {                  case 0: // 0xFFFFFFFF                      if (parts[0] > MaxIPv4Value) return Invalid;                      return parts[0];                  case 1: // 0xFF.0xFFFFFF                      if (parts[1] > 0xffffff) return Invalid;                      return (parts[0] << 24) | (parts[1] & 0xffffff);                  case 2: // 0xFF.0xFF.0xFFFF                      if (parts[2] > 0xffff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | (parts[2] & 0xffff);                  case 3: // 0xFF.0xFF.0xFF.0xFF                      if (parts[3] > 0xff) return Invalid;                      return (parts[0] << 24) | ((parts[1] & 0xff) << 16) | ((parts[2] & 0xff) << 8) | (parts[3] & 0xff);                  default:                      return Invalid;              }
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The following statement contains a magic number: return ((int)ReverseBytes((short)host) & (int)ushort.MaxValue) << 16 | (int)ReverseBytes((short)(host >> 16)) & (int)ushort.MaxValue;
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The following statement contains a magic number: return ((int)ReverseBytes((short)host) & (int)ushort.MaxValue) << 16 | (int)ReverseBytes((short)(host >> 16)) & (int)ushort.MaxValue;
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The following statement contains a magic number: return (uint) (((int)ReverseBytes((short)host) & (int)ushort.MaxValue) << 16 | (int)ReverseBytes((short)(host >> 16)) & (int)ushort.MaxValue);
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The following statement contains a magic number: return (uint) (((int)ReverseBytes((short)host) & (int)ushort.MaxValue) << 16 | (int)ReverseBytes((short)(host >> 16)) & (int)ushort.MaxValue);
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The following statement contains a magic number: return (short)(((int)host & (int)byte.MaxValue) << 8 | (int)host >> 8 & (int)byte.MaxValue);
Magic Number,IPFilter.Formats,IpAddress,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Formats\IpAddress.cs,ReverseBytes,The following statement contains a magic number: return (short)(((int)host & (int)byte.MaxValue) << 8 | (int)host >> 8 & (int)byte.MaxValue);
Magic Number,IPFilter.Logging,FileTraceListener,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Logging\FileTraceListener.cs,EnsureWriter,The following statement contains a magic number: writer = new StreamWriter(File.Open(fullPath' FileMode.Create' FileAccess.Write' FileShare.ReadWrite)' encoding' 4096);
Magic Number,IPFilter.Models,FilterDownloadResult,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Models\FilterDownloadResult.cs,FilterDownloadResult,The following statement contains a magic number: Entries = new List<FilterEntry>(100000);
Magic Number,IPFilter.Models,FilterEntry,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Models\FilterEntry.cs,GetHashCode,The following statement contains a magic number: return ( AddressComparer.GetHashCode(From) * 397) ^ AddressComparer.GetHashCode(To);
Magic Number,IPFilter.Models,FilterSource,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Models\FilterSource.cs,GetHashCode,The following statement contains a magic number: return (StringComparer.OrdinalIgnoreCase.GetHashCode(Provider) * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode(Id);
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: double lengthInMb = !result.Length.HasValue ? -1 : (double) result.Length.Value / 1024 / 1024;
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: double lengthInMb = !result.Length.HasValue ? -1 : (double) result.Length.Value / 1024 / 1024;
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: var buffer = new byte[65535 * 4];
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: var buffer = new byte[65535 * 4];
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: double downloadedMegs = bytesDownloaded / 1024 / 1024;
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: double downloadedMegs = bytesDownloaded / 1024 / 1024;
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DownloadFilter,The following statement contains a magic number: var percent = (int)Math.Floor((bytesDownloaded / result.Length.Value) * 100);
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,Decompress,The following statement contains a magic number: switch (filter.CompressionFormat)                  {                      case CompressionFormat.GZip:                          using(var gzipFile = new GZipStream(stream' CompressionMode.Decompress))                          {                              var buffer = new byte[1024 * 64];                              int bytesRead;                              while ((bytesRead = await gzipFile.ReadAsync(buffer' 0' buffer.Length' cancellationToken)) > 0)                              {                                  cancellationToken.ThrowIfCancellationRequested();                                  result.Write(buffer' 0' bytesRead);                                  progress.Report(new ProgressModel(UpdateState.Decompressing' "Decompressing..."' -1));                              }                          }                          break;                        case CompressionFormat.Zip:                            using (var zipFile = new ZipArchive(stream'ZipArchiveMode.Read))                          {                              progress.Report(new ProgressModel(UpdateState.Decompressing' "Decompressing..."' -1));                                                            if (zipFile.Entries.Count == 0) throw new IOException("There are no entries in the zip file.");                              if (zipFile.Entries.Count > 1) throw new IOException("There is more than one file in the zip file. This application will need to be updated to support this.");                                var entry = zipFile.Entries.First();                                using (var entryStream = entry.Open())                              {                                  cancellationToken.ThrowIfCancellationRequested();                                  await entryStream.CopyToAsync(result);                              }                          }                          break;                        default:                          await stream.CopyToAsync(result);                          break;                  }
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,Decompress,The following statement contains a magic number: switch (filter.CompressionFormat)                  {                      case CompressionFormat.GZip:                          using(var gzipFile = new GZipStream(stream' CompressionMode.Decompress))                          {                              var buffer = new byte[1024 * 64];                              int bytesRead;                              while ((bytesRead = await gzipFile.ReadAsync(buffer' 0' buffer.Length' cancellationToken)) > 0)                              {                                  cancellationToken.ThrowIfCancellationRequested();                                  result.Write(buffer' 0' bytesRead);                                  progress.Report(new ProgressModel(UpdateState.Decompressing' "Decompressing..."' -1));                              }                          }                          break;                        case CompressionFormat.Zip:                            using (var zipFile = new ZipArchive(stream'ZipArchiveMode.Read))                          {                              progress.Report(new ProgressModel(UpdateState.Decompressing' "Decompressing..."' -1));                                                            if (zipFile.Entries.Count == 0) throw new IOException("There are no entries in the zip file.");                              if (zipFile.Entries.Count > 1) throw new IOException("There is more than one file in the zip file. This application will need to be updated to support this.");                                var entry = zipFile.Entries.First();                                using (var entryStream = entry.Open())                              {                                  cancellationToken.ThrowIfCancellationRequested();                                  await entryStream.CopyToAsync(result);                              }                          }                          break;                        default:                          await stream.CopyToAsync(result);                          break;                  }
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DetectCompressionFormat,The following statement contains a magic number: switch (contentType.MediaType)              {                  case "application/gzip":                  case "application/x-gzip":                  case "application/x-gunzip":                  case "application/gzipped":                  case "application/gzip-compressed":                  case "gzip/document":                      return CompressionFormat.GZip;                    case "application/zip":                  case "application/x-zip":                  case "application/x-zip-compressed":                  case "multipart/x-zip":                      return CompressionFormat.Zip;    //                case "application/x-compressed":  //                case "application/octet-stream":  //                case "text/plain":                  default:                      {                          // Look for the GZip header bytes                          if (buffer[0] == 31 && buffer[1] == 139)                          {                              return CompressionFormat.GZip;                          }                            // Look for the ZIP header bytes.                          var zipHeaderNumber = BitConverter.ToInt32(buffer' 0);                          if (zipHeaderNumber == 0x4034b50)                          {                              return CompressionFormat.Zip;                          }                      }                      break;              }
Magic Number,IPFilter.Services,FilterDownloader,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\FilterDownloader.cs,DetectCompressionFormat,The following statement contains a magic number: switch (contentType.MediaType)              {                  case "application/gzip":                  case "application/x-gzip":                  case "application/x-gunzip":                  case "application/gzipped":                  case "application/gzip-compressed":                  case "gzip/document":                      return CompressionFormat.GZip;                    case "application/zip":                  case "application/x-zip":                  case "application/x-zip-compressed":                  case "multipart/x-zip":                      return CompressionFormat.Zip;    //                case "application/x-compressed":  //                case "application/octet-stream":  //                case "text/plain":                  default:                      {                          // Look for the GZip header bytes                          if (buffer[0] == 31 && buffer[1] == 139)                          {                              return CompressionFormat.GZip;                          }                            // Look for the ZIP header bytes.                          var zipHeaderNumber = BitConverter.ToInt32(buffer' 0);                          if (zipHeaderNumber == 0x4034b50)                          {                              return CompressionFormat.Zip;                          }                      }                      break;              }
Magic Number,IPFilter.Services.Deployment,ClickOnceRegistry,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\ClickOnceRegistry.cs,ReadMarks,The following statement contains a magic number: mark.Implications.Add(new Implication                                                    {                                                        Key = implicationName'                                                        Name = implicationName.Substring(12)'                                                        Value = Encoding.ASCII.GetString(implication)                                                    });
Magic Number,IPFilter.Services.Deployment,RemoveFiles,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\RemoveFiles.cs,IsWindowsXp,The following statement contains a magic number: return Environment.OSVersion.Version.Major == 5;
Magic Number,IPFilter.Services.Deployment,RemoveFiles,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\RemoveFiles.cs,DescendIntoSubfolders,The following statement contains a magic number: (Path.GetFileName(subSubFolder) ?? string.Empty).Length == 12
Magic Number,IPFilter.Services.Deployment,RemoveFiles,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\RemoveFiles.cs,DescendIntoSubfolders,The following statement contains a magic number: (Path.GetFileName(subFolder) ?? string.Empty).Length == 12
Magic Number,IPFilter.Services.Deployment,UninstallInfo,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\UninstallInfo.cs,GetPublicKeyToken,The following statement contains a magic number: var token = UninstallString.Split(''')                  .First(s => s.Trim().StartsWith("PublicKeyToken="' StringComparison.Ordinal)).Substring(16);
Magic Number,IPFilter.Services.Deployment,UninstallInfo,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\ClickOnce\UninstallInfo.cs,GetPublicKeyToken,The following statement contains a magic number: token.Length != 16
Magic Number,IPFilter.Services.Deployment,SemanticVersion,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\SemanticVersion.cs,SplitAndPadVersionString,The following statement contains a magic number: a.Length == 4
Magic Number,IPFilter.Services.Deployment,SemanticVersion,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Services\Deployment\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 4567 + SpecialVersion.GetHashCode();
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,MainWindowViewModel,The following statement contains a magic number: ProgressMax = 100;
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,StartAsync,The following statement contains a magic number: progress.Report(new ProgressModel(UpdateState.Done' message' 100));
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: Update.UpdateSizeBytes = 2000000;
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: progress.Report(new ProgressModel(UpdateState.Ready' "Update cancelled. Ready."' 100));
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: double lengthInMb = !length.HasValue ? -1 : (double)length.Value / 1024 / 1024;
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: double lengthInMb = !length.HasValue ? -1 : (double)length.Value / 1024 / 1024;
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: var buffer = new byte[65535 * 4];
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: var buffer = new byte[65535 * 4];
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: double downloadedMegs = bytesDownloaded / 1024 / 1024;
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: double downloadedMegs = bytesDownloaded / 1024 / 1024;
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: var percent = (int)Math.Floor((bytesDownloaded / length.Value) * 100);
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: progress.Report(new ProgressModel(UpdateState.Ready' "Update cancelled. Ready."' 100));
Magic Number,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,CheckForUpdates,The following statement contains a magic number: progress.Report(new ProgressModel(UpdateState.Ready' "Launching update..."' 100));
Magic Number,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: ViewModel.ShowNotification = (title' message' icon) => notifyIcon.ShowBalloonTip(3000' title' message' icon);
Magic Number,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\Views\MainWindow.xaml"              ((IPFilter.Views.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:                            #line 47 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.LaunchHelp);                            #line default              #line hidden              return;              case 3:                            #line 50 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.OpenLog);                            #line default              #line hidden              return;              case 4:                            #line 51 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Options);                            #line default              #line hidden              return;              }
Magic Number,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\Views\MainWindow.xaml"              ((IPFilter.Views.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:                            #line 47 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.LaunchHelp);                            #line default              #line hidden              return;              case 3:                            #line 50 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.OpenLog);                            #line default              #line hidden              return;              case 4:                            #line 51 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Options);                            #line default              #line hidden              return;              }
Magic Number,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\Views\MainWindow.xaml"              ((IPFilter.Views.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:                            #line 47 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.LaunchHelp);                            #line default              #line hidden              return;              case 3:                            #line 50 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.OpenLog);                            #line default              #line hidden              return;              case 4:                            #line 51 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Options);                            #line default              #line hidden              return;              }
Missing Default,IPFilter.ViewModels,MainWindowViewModel,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\ViewModels\MainWindowViewModel.cs,Start,The following switch statement is missing a default case: switch (State)              {                  case UpdateState.Done:                  case UpdateState.Ready:                  case UpdateState.Cancelled:                      cancellationToken.Dispose();                      cancellationToken = new CancellationTokenSource();                      Task.Run(StartAsync' cancellationToken.Token);//' TaskCreationOptions.None);//' TaskScheduler.FromCurrentSynchronizationContext());                      break;                                        case UpdateState.Downloading:                  case UpdateState.Decompressing:                      cancellationToken.Cancel();                      break;              }
Missing Default,IPFilter.Views,MainWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\Views\MainWindow.xaml"              ((IPFilter.Views.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:                            #line 47 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.LaunchHelp);                            #line default              #line hidden              return;              case 3:                            #line 50 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.OpenLog);                            #line default              #line hidden              return;              case 4:                            #line 51 "..\..\..\..\Views\MainWindow.xaml"              ((System.Windows.Documents.Hyperlink)(target)).RequestNavigate += new System.Windows.Navigation.RequestNavigateEventHandler(this.Options);                            #line default              #line hidden              return;              }
Missing Default,IPFilter.Views,OptionsWindow,D:\research\architectureSmells\repos\DavidMoore_ipfilter\Code\IPFilter\Views\OptionsWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 10 "..\..\..\..\Views\OptionsWindow.xaml"              ((IPFilter.Views.OptionsWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              }
