Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SingleTokenExample,Program,D:\newReposJune17\americommerce_ac-rest-api\examples\csharp\SingleTokenExample\SingleTokenExample\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,SingleTokenExample,StringExtensions,D:\newReposJune17\americommerce_ac-rest-api\examples\csharp\SingleTokenExample\SingleTokenExample\StringExtensions.cs,ToSnakeCase,Cyclomatic complexity of the method is 7
Magic Number,SingleTokenExample,StringExtensions,D:\newReposJune17\americommerce_ac-rest-api\examples\csharp\SingleTokenExample\SingleTokenExample\StringExtensions.cs,ToSnakeCase,The following statement contains a magic number: for (var i = 0; i < input.Length; i++) {  	var isLast = (i == input.Length - 1);  	var isSecondFromLast = (i == input.Length - 2);  	var curr = input [i];  	var next = !isLast ? input [i + 1] : '\0';  	var afterNext = !isSecondFromLast && !isLast ? input [i + 2] : '\0';  	buffer += char.ToLower (curr);  	if (!char.IsDigit (curr) && char.IsUpper (next)) {  		if (char.IsUpper (curr)) {  			if (!isLast && !isSecondFromLast && !char.IsUpper (afterNext))  				buffer += "_";  		} else  			buffer += "_";  	}  	if (!char.IsDigit (curr) && char.IsDigit (next))  		buffer += "_";  	if (char.IsDigit (curr) && !char.IsDigit (next) && !isLast)  		buffer += "_";  }  
Magic Number,SingleTokenExample,StringExtensions,D:\newReposJune17\americommerce_ac-rest-api\examples\csharp\SingleTokenExample\SingleTokenExample\StringExtensions.cs,ToSnakeCase,The following statement contains a magic number: for (var i = 0; i < input.Length; i++) {  	var isLast = (i == input.Length - 1);  	var isSecondFromLast = (i == input.Length - 2);  	var curr = input [i];  	var next = !isLast ? input [i + 1] : '\0';  	var afterNext = !isSecondFromLast && !isLast ? input [i + 2] : '\0';  	buffer += char.ToLower (curr);  	if (!char.IsDigit (curr) && char.IsUpper (next)) {  		if (char.IsUpper (curr)) {  			if (!isLast && !isSecondFromLast && !char.IsUpper (afterNext))  				buffer += "_";  		} else  			buffer += "_";  	}  	if (!char.IsDigit (curr) && char.IsDigit (next))  		buffer += "_";  	if (char.IsDigit (curr) && !char.IsDigit (next) && !isLast)  		buffer += "_";  }  
