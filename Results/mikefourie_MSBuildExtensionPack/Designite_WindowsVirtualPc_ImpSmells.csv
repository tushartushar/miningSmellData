Implementation smell,Namespace,Class,File,Method,Description
Long Method,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,ConrolVM,The method has 132 lines of code.
Complex Method,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,InternalExecute,Cyclomatic complexity of the method is 11
Complex Method,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,ConrolVM,Cyclomatic complexity of the method is 39
Long Identifier,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,,The length of the parameter AddHardDiskConnectionTaskAction is 31.
Long Identifier,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,,The length of the parameter RemoveHardDiskConnectionTaskAction is 34.
Long Identifier,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,,The length of the parameter WaitForLowCpuUtilizationTaskAction is 34.
Long Statement,MSBuild.ExtensionPack,BaseTask,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\Common\BaseTask.cs,TargetingLocalMachine,The length of the statement  "                    this.Log.LogError(string.Format(CultureInfo.CurrentCulture' "This task does not support remote execution. Please remove the MachineName: {0}"' this.MachineName)); " is 162.
Long Statement,MSBuild.ExtensionPack,BaseTask,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\Common\BaseTask.cs,GetManagementScope,The length of the statement  "            this.LogTaskMessage(MessageImportance.Low' string.Format(CultureInfo.CurrentCulture' "ManagementScope Set: {0}"' "\\\\" + this.MachineName + wmiNamespace)); " is 156.
Long Statement,MSBuild.ExtensionPack,BaseTask,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\Common\BaseTask.cs,GetManagementScope,The length of the statement  "            this.LogTaskMessage(MessageImportance.Low' string.Format(CultureInfo.CurrentCulture' "ManagementScope Set: {0}"' "\\\\" + this.MachineName + wmiNamespace)); " is 156.
Long Statement,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,GetVirtualMachineDetails,The length of the statement  "                newItem.SetMetadata("TerminalServerPort"' virtualMachine.GuestOS.TerminalServerPort.ToString(CultureInfo.InvariantCulture)); " is 124.
Long Statement,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,GetVirtualMachineDetails,The length of the statement  "                newItem.SetMetadata("TerminalServicesInitialized"' virtualMachine.GuestOS.TerminalServicesInitialized.ToString(CultureInfo.InvariantCulture)); " is 142.
Long Statement,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,WaitForLowCpuUtilization,The length of the statement  "                this.Log.LogError(string.Format(CultureInfo.CurrentCulture' "Virtual Machine: {0} is not running: {1}"' this.Name' this.virtualMachine.State)); " is 143.
Long Statement,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,ConrolVM,The length of the statement  "                    if (this.virtualMachine.State == (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_Saved) && this.virtualMachine.Undoable) " is 125.
Magic Number,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,TakeScreenshot,The following statement contains a magic number: int b = (int)((pixel & 0xff000000) >> 24);
Magic Number,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,TakeScreenshot,The following statement contains a magic number: int g = (int)((pixel & 0x00ff0000) >> 16);
Magic Number,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,TakeScreenshot,The following statement contains a magic number: int r = (int)((pixel & 0x0000ff00) >> 8);
Magic Number,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,WaitForLowCpuUtilization,The following statement contains a magic number: Thread.Sleep(1000);
Missing Default,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,ClickMouse,The following switch statement is missing a default case: switch (i.ItemSpec)                  {                      case "ClickLeft":                          this.LogTaskMessage(MessageImportance.Low' "Left-click mouse");                          this.virtualMachine.Mouse.Click(VMMouseButton.vmMouseButton_Left);                          break;                      case "ClickRight":                          this.LogTaskMessage(MessageImportance.Low' "Right-click mouse");                          this.virtualMachine.Mouse.Click(VMMouseButton.vmMouseButton_Right);                          break;                      case "ClickCenter":                          this.LogTaskMessage(MessageImportance.Low' "Middle-click mouse");                          this.virtualMachine.Mouse.Click(VMMouseButton.vmMouseButton_Center);                          break;                  }
Missing Default,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,ManageKeyBoard,The following switch statement is missing a default case: switch (this.TaskAction)              {                  case TypeAsciiTextTaskAction:                      foreach (ITaskItem i in this.Text)                      {                          this.virtualMachine.Keyboard.TypeAsciiText(i.ItemSpec);                      }                        break;                  case TypeKeySequenceTaskAction:                      foreach (ITaskItem i in this.Text)                      {                          this.virtualMachine.Keyboard.TypeKeySequence(i.ItemSpec);                      }                        break;              }
Missing Default,MSBuild.ExtensionPack.Virtualisation,VirtualPc,D:\research\architectureSmells\repos\mikefourie_MSBuildExtensionPack\Releases\3.5.14.0\Main3.5\WindowsVirtualPC\VirtualPc.cs,ConrolVM,The following switch statement is missing a default case: switch (this.TaskAction)              {                  case LogoffTaskAction:                      if (this.virtualMachine.State != (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_TurningOff))                      {                          var s = this.virtualMachine.GuestOS.Logoff();                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case RestartTaskAction:                      if (this.virtualMachine.State != (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_TurningOff))                      {                          var s = this.virtualMachine.GuestOS.Restart(true);                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case StartupTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_TurnedOff)                      {                          var s = this.virtualMachine.Startup();                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case TurnOffTaskAction:                      if (this.virtualMachine.State != (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_TurningOff))                      {                          var s = this.virtualMachine.TurnOff();                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case ShutdownTaskAction:                      if (this.virtualMachine.State != (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_TurningOff))                      {                          var s = this.virtualMachine.GuestOS.Shutdown(true);                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case DiscardUndoDisksTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_TurnedOff)                      {                          this.virtualMachine.DiscardUndoDisks();                      }                        break;                  case DiscardSavedStateTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_TurnedOff)                      {                          this.virtualMachine.DiscardSavedState();                      }                        break;                  case MergeUndoDisksTaskAction:                      if (this.virtualMachine.State == (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_Saved) && this.virtualMachine.Undoable)                      {                          var s = this.virtualMachine.MergeUndoDisks();                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case PauseTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_Running)                      {                          this.virtualMachine.Pause();                      }                        break;                  case ResumeTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_Paused)                      {                          this.virtualMachine.Resume();                      }                        break;                  case ResetTaskAction:                      if (this.virtualMachine.State != (VMVMState.vmVMState_TurnedOff | VMVMState.vmVMState_TurningOff))                      {                          var s = this.virtualMachine.Reset();                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case SaveTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_Running)                      {                          var s = this.virtualMachine.Save();                          if (this.WaitForCompletion > 0)                          {                              s.WaitForCompletion(this.WaitForCompletion);                          }                      }                        break;                  case AddHardDiskConnectionTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_Running)                      {                          this.virtualMachine.AddHardDiskConnection(this.FileName.ItemSpec' this.BusNumber' this.DeviceNumber);                      }                        break;                  case RemoveHardDiskConnectionTaskAction:                      if (this.virtualMachine.State == VMVMState.vmVMState_Running)                      {                          foreach (VMHardDiskConnection vhd in this.virtualMachine.HardDiskConnections)                          {                              if (vhd.HardDisk.File == this.FileName.ItemSpec)                              {                                  this.virtualMachine.RemoveHardDiskConnection(vhd);                              }                          }                      }                        break;              }
