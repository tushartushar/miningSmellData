Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,ScaleTo,The method has 5 parameters. Parameters: joint' width' height' skeletonMaxX' skeletonMaxY
Long Identifier,LightBuzz.Vitruvius,VoiceController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Controllers\VoiceController.cs,,The length of the parameter DEFAULT_RECOGNITION_CONFIDENCE is 30.
Long Statement,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Height,The length of the statement  "            double legLength = legLeftTrackedJoints > legRightTrackedJoints ? Distance(hipLeft' kneeLeft' ankleLeft' footLeft) : Distance(hipRight' kneeRight' ankleRight' footRight); " is 170.
Long Statement,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z) " is 203.
Long Statement,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y && " is 210.
Long Statement,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The length of the statement  "                    skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The length of the statement  "                    if (skeleton.Joints[JointType.HandRight].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X && " is 212.
Long Statement,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The length of the statement  "                        skeleton.Joints[JointType.HandLeft].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X && skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X) " is 204.
Long Statement,LightBuzz.Vitruvius.Gestures,MenuSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\MenuSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeDownSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeDownSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y) " is 209.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeDownSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeDownSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.ElbowRight].Position.Y) " is 199.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeDownSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeDownSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y) " is 209.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeDownSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeDownSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y) " is 209.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z && skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y) " is 208.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 198.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z && skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y) " is 208.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 198.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "                    if (skeleton.Joints[JointType.HandRight].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X) " is 210.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z && skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y) " is 208.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeLeftSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeLeftSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 208.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 196.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 196.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "                    if (skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandLeft].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X) " is 208.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeRightSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeRightSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 196.
Long Statement,LightBuzz.Vitruvius.Gestures,SwipeUpSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\SwipeUpSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.Head].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 198.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z) " is 203.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y && " is 210.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                    skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                    if (skeleton.Joints[JointType.HandRight].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X && " is 212.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                        skeleton.Joints[JointType.HandLeft].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X && skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X) " is 204.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z) " is 203.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y && " is 210.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                    skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                    if (skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ShoulderLeft].Position.X) " is 209.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "            if (skeleton.Joints[JointType.HandLeft].Position.Z < skeleton.Joints[JointType.ElbowLeft].Position.Z && skeleton.Joints[JointType.HandRight].Position.Z < skeleton.Joints[JointType.ElbowRight].Position.Z) " is 203.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                if (skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y && " is 210.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                    skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y) " is 202.
Long Statement,LightBuzz.Vitruvius.Gestures,ZoomSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The length of the statement  "                    if (skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ElbowRight].Position.X && skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ElbowLeft].Position.X) " is 203.
Complex Conditional,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The conditional expression  "skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y &&                      skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y"  is complex.
Complex Conditional,LightBuzz.Vitruvius.Gestures,JoinedHandsSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\JoinedHandsSegment.cs,Update,The conditional expression  "skeleton.Joints[JointType.HandRight].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X &&                          skeleton.Joints[JointType.HandLeft].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X && skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X"  is complex.
Complex Conditional,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The conditional expression  "skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y &&                      skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y"  is complex.
Complex Conditional,LightBuzz.Vitruvius.Gestures,ZoomSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The conditional expression  "skeleton.Joints[JointType.HandRight].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X && skeleton.Joints[JointType.HandRight].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X &&                          skeleton.Joints[JointType.HandLeft].Position.X > skeleton.Joints[JointType.ShoulderLeft].Position.X && skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ShoulderRight].Position.X"  is complex.
Complex Conditional,LightBuzz.Vitruvius.Gestures,ZoomSegment2,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The conditional expression  "skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y &&                      skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y"  is complex.
Complex Conditional,LightBuzz.Vitruvius.Gestures,ZoomSegment3,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\ZoomSegments.cs,Update,The conditional expression  "skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y &&                      skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.ShoulderCenter].Position.Y && skeleton.Joints[JointType.HandLeft].Position.Y > skeleton.Joints[JointType.HipCenter].Position.Y"  is complex.
Magic Number,LightBuzz.Vitruvius,Gesture,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Gesture.cs,Update,The following statement contains a magic number: if (result == GesturePartResult.Succeeded)              {                  if (_currentSegment + 1 < _segments.Length)                  {                      _currentSegment++;                      _frameCount = 0;                      _pausedFrameCount = MAX_PAUSE_COUNT;                      _paused = true;                  }                  else                  {                      if (GestureRecognized != null)                      {                          GestureRecognized(this' new GestureEventArgs(_name' skeleton.TrackingId));                          Reset();                      }                  }              }              else if (result == GesturePartResult.Failed || _frameCount == WINDOW_SIZE)              {                  Reset();              }              else              {                  _frameCount++;                  _pausedFrameCount = MAX_PAUSE_COUNT / 2;                  _paused = true;              }
Magic Number,LightBuzz.Vitruvius,Gesture,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Gesture.cs,Reset,The following statement contains a magic number: _pausedFrameCount = MAX_PAUSE_COUNT / 2;
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,GestureController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\GestureController.cs,AddGesture,The following statement contains a magic number: switch (type)              {                  case GestureType.JoinedHands:                      segments = new IGestureSegment[20];                        JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = joinedhandsSegment;                      }                      break;                  case GestureType.Menu:                      segments = new IGestureSegment[20];                        MenuSegment1 menuSegment = new MenuSegment1();                      for (int i = 0; i < 20; i++)                      {                          segments[i] = menuSegment;                      }                      break;                  case GestureType.SwipeDown:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeDownSegment1();                      segments[1] = new SwipeDownSegment2();                      segments[2] = new SwipeDownSegment3();                      break;                  case GestureType.SwipeLeft:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeLeftSegment1();                      segments[1] = new SwipeLeftSegment2();                      segments[2] = new SwipeLeftSegment3();                      break;                  case GestureType.SwipeRight:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeRightSegment1();                      segments[1] = new SwipeRightSegment2();                      segments[2] = new SwipeRightSegment3();                      break;                  case GestureType.SwipeUp:                      segments = new IGestureSegment[3];                        segments[0] = new SwipeUpSegment1();                      segments[1] = new SwipeUpSegment2();                      segments[2] = new SwipeUpSegment3();                      break;                  case GestureType.WaveLeft:                      segments = new IGestureSegment[6];                        WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();                      WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();                        segments[0] = waveLeftSegment1;                      segments[1] = waveLeftSegment2;                      segments[2] = waveLeftSegment1;                      segments[3] = waveLeftSegment2;                      segments[4] = waveLeftSegment1;                      segments[5] = waveLeftSegment2;                      break;                  case GestureType.WaveRight:                      segments = new IGestureSegment[6];                        WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();                      WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();                        segments[0] = waveRightSegment1;                      segments[1] = waveRightSegment2;                      segments[2] = waveRightSegment1;                      segments[3] = waveRightSegment2;                      segments[4] = waveRightSegment1;                      segments[5] = waveRightSegment2;                      break;                  case GestureType.ZoomIn:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment1();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment3();                      break;                  case GestureType.ZoomOut:                      segments = new IGestureSegment[3];                        segments[0] = new ZoomSegment3();                      segments[1] = new ZoomSegment2();                      segments[2] = new ZoomSegment1();                      break;                  case GestureType.All:                  case GestureType.None:                  default:                      break;              }
Magic Number,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Height,The following statement contains a magic number: const double HEAD_DIVERGENCE = 0.1;
Magic Number,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Distance,The following statement contains a magic number: return Math.Sqrt(                  Math.Pow(p1.Position.X - p2.Position.X' 2) +                  Math.Pow(p1.Position.Y - p2.Position.Y' 2) +                  Math.Pow(p1.Position.Z - p2.Position.Z' 2));
Magic Number,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Distance,The following statement contains a magic number: return Math.Sqrt(                  Math.Pow(p1.Position.X - p2.Position.X' 2) +                  Math.Pow(p1.Position.Y - p2.Position.Y' 2) +                  Math.Pow(p1.Position.Z - p2.Position.Z' 2));
Magic Number,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Distance,The following statement contains a magic number: return Math.Sqrt(                  Math.Pow(p1.Position.X - p2.Position.X' 2) +                  Math.Pow(p1.Position.Y - p2.Position.Y' 2) +                  Math.Pow(p1.Position.Z - p2.Position.Z' 2));
Magic Number,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Scale,The following statement contains a magic number: float value = (float)((((maxPixel / maxSkeleton) / 2) * position) + (maxPixel / 2));
Magic Number,LightBuzz.Vitruvius,SkeletonExtensions,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Extensions\SkeletonExtensions.cs,Scale,The following statement contains a magic number: float value = (float)((((maxPixel / maxSkeleton) / 2) * position) + (maxPixel / 2));
Magic Number,LightBuzz.Vitruvius,VoiceController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Controllers\VoiceController.cs,StartRecognition,The following statement contains a magic number: var thread = new Thread(() =>              {                  var audioSource = _sensor.AudioSource;                    audioSource.BeamAngleMode = BeamAngleMode.Adaptive;                  audioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;                    var stream = audioSource.Start();                    _recognizer.SetInputToAudioStream(stream' new SpeechAudioFormatInfo(EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));                  _recognizer.RecognizeAsync(RecognizeMode.Multiple);              });
Magic Number,LightBuzz.Vitruvius,VoiceController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Controllers\VoiceController.cs,StartRecognition,The following statement contains a magic number: var thread = new Thread(() =>              {                  var audioSource = _sensor.AudioSource;                    audioSource.BeamAngleMode = BeamAngleMode.Adaptive;                  audioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;                    var stream = audioSource.Start();                    _recognizer.SetInputToAudioStream(stream' new SpeechAudioFormatInfo(EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));                  _recognizer.RecognizeAsync(RecognizeMode.Multiple);              });
Magic Number,LightBuzz.Vitruvius,VoiceController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Controllers\VoiceController.cs,StartRecognition,The following statement contains a magic number: var thread = new Thread(() =>              {                  var audioSource = _sensor.AudioSource;                    audioSource.BeamAngleMode = BeamAngleMode.Adaptive;                  audioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;                    var stream = audioSource.Start();                    _recognizer.SetInputToAudioStream(stream' new SpeechAudioFormatInfo(EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));                  _recognizer.RecognizeAsync(RecognizeMode.Multiple);              });
Magic Number,LightBuzz.Vitruvius,VoiceController,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Controllers\VoiceController.cs,StartRecognition,The following statement contains a magic number: var thread = new Thread(() =>              {                  var audioSource = _sensor.AudioSource;                    audioSource.BeamAngleMode = BeamAngleMode.Adaptive;                  audioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;                    var stream = audioSource.Start();                    _recognizer.SetInputToAudioStream(stream' new SpeechAudioFormatInfo(EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));                  _recognizer.RecognizeAsync(RecognizeMode.Multiple);              });
Magic Number,LightBuzz.Vitruvius.Gestures,MenuSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\MenuSegments.cs,Update,The following statement contains a magic number: if (skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y)              {                  // left hand 0.3 to left of center hip                  if (skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.HipCenter].Position.X - 0.3)                  {                      // left hand 0.2 to left of left elbow                      if (skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ElbowLeft].Position.X - 0.2)                      {                          return GesturePartResult.Succeeded;                      }                  }                    return GesturePartResult.Undetermined;              }
Magic Number,LightBuzz.Vitruvius.Gestures,MenuSegment1,C:\repos\LightBuzz_Vitruvius\Kinect v1\LightBuzz.Vitruvius\Gestures\Segments\MenuSegments.cs,Update,The following statement contains a magic number: if (skeleton.Joints[JointType.HandLeft].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y && skeleton.Joints[JointType.HandRight].Position.Y < skeleton.Joints[JointType.HipCenter].Position.Y)              {                  // left hand 0.3 to left of center hip                  if (skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.HipCenter].Position.X - 0.3)                  {                      // left hand 0.2 to left of left elbow                      if (skeleton.Joints[JointType.HandLeft].Position.X < skeleton.Joints[JointType.ElbowLeft].Position.X - 0.2)                      {                          return GesturePartResult.Succeeded;                      }                  }                    return GesturePartResult.Undetermined;              }
