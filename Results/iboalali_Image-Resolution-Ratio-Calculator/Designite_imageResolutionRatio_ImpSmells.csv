Implementation smell,Namespace,Class,File,Method,Description
Complex Method,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,calculate,Cyclomatic complexity of the method is 8
Complex Method,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,calculateImageStuff,Cyclomatic complexity of the method is 9
Long Statement,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,pbPreview_Click,The length of the statement  "	PropertyInfo imageRectangleProperty = typeof(PictureBox).GetProperty ("ImageRectangle"' BindingFlags.GetProperty | BindingFlags.NonPublic | BindingFlags.Instance); " is 163.
Long Statement,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,GetImageFilter,The length of the statement  "		images.Add (string.Format ("{0} Files: ({1})"' codec.FormatDescription' codec.FilenameExtension)' codec.FilenameExtension); " is 123.
Long Statement,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,paintImage,The length of the statement  "		g.DrawImage (bitmap' new Rectangle (half' 0' bitmap.Width' bitmap.Height)' new Rectangle (0' 0' bitmap.Width' bitmap.Height)' GraphicsUnit.Pixel); " is 146.
Long Statement,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,paintImage,The length of the statement  "		g.DrawImage (bitmap' new Rectangle (0' half' bitmap.Width' bitmap.Height)' new Rectangle (0' 0' bitmap.Width' bitmap.Height)' GraphicsUnit.Pixel); " is 146.
Magic Number,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,calculateImageStuff,The following statement contains a magic number: if (bitmap != null) {  	ratioWidth = int.Parse (txtImageRatioWidth.Text);  	ratioHeight = int.Parse (txtImageRatioHeight.Text);  	ratio = (float)ratioWidth / (float)ratioHeight;  	if (ratio > 10) {  		toolStripStatusLabel.Text = "Out of Memory. Ratio is too big (" + ratio + ")";  		System.Media.SystemSounds.Exclamation.Play ();  		return;  	}  	if (ratio < 0.1) {  		toolStripStatusLabel.Text = "Out of Memory. Ratio is too small (" + ratio + ")";  		System.Media.SystemSounds.Exclamation.Play ();  		return;  	}  	imageRatio = (float)bitmap.Width / (float)bitmap.Height;  	if (imageRatio < ratio) {  		width = (int)(bitmap.Height * ratio);  		lblNewImageResolution.Text = width + " x " + bitmap.Height;  		numToCopy = width;  		copyWidth = true;  		height = bitmap.Height;  	}  	else {  		ratio = (float)ratioHeight / (float)ratioWidth;  		height = (int)(bitmap.Width * ratio);  		lblNewImageResolution.Text = bitmap.Width + " x " + height;  		numToCopy = height;  		copyWidth = false;  		width = bitmap.Width;  	}  }  
Magic Number,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,calculateImageStuff,The following statement contains a magic number: if (bitmap != null) {  	ratioWidth = int.Parse (txtImageRatioWidth.Text);  	ratioHeight = int.Parse (txtImageRatioHeight.Text);  	ratio = (float)ratioWidth / (float)ratioHeight;  	if (ratio > 10) {  		toolStripStatusLabel.Text = "Out of Memory. Ratio is too big (" + ratio + ")";  		System.Media.SystemSounds.Exclamation.Play ();  		return;  	}  	if (ratio < 0.1) {  		toolStripStatusLabel.Text = "Out of Memory. Ratio is too small (" + ratio + ")";  		System.Media.SystemSounds.Exclamation.Play ();  		return;  	}  	imageRatio = (float)bitmap.Width / (float)bitmap.Height;  	if (imageRatio < ratio) {  		width = (int)(bitmap.Height * ratio);  		lblNewImageResolution.Text = width + " x " + bitmap.Height;  		numToCopy = width;  		copyWidth = true;  		height = bitmap.Height;  	}  	else {  		ratio = (float)ratioHeight / (float)ratioWidth;  		height = (int)(bitmap.Width * ratio);  		lblNewImageResolution.Text = bitmap.Width + " x " + height;  		numToCopy = height;  		copyWidth = false;  		width = bitmap.Width;  	}  }  
Magic Number,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,calculateImageStuff,The following statement contains a magic number: if (ratio > 10) {  	toolStripStatusLabel.Text = "Out of Memory. Ratio is too big (" + ratio + ")";  	System.Media.SystemSounds.Exclamation.Play ();  	return;  }  
Magic Number,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,calculateImageStuff,The following statement contains a magic number: if (ratio < 0.1) {  	toolStripStatusLabel.Text = "Out of Memory. Ratio is too small (" + ratio + ")";  	System.Media.SystemSounds.Exclamation.Play ();  	return;  }  
Magic Number,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,paintImage,The following statement contains a magic number: if (copyWidth == true) {  	int difference = width - bitmap.Width;  	int half = difference / 2;  	g.DrawImage (bitmap' new Rectangle (half' 0' bitmap.Width' bitmap.Height)' new Rectangle (0' 0' bitmap.Width' bitmap.Height)' GraphicsUnit.Pixel);  }  else {  	int difference = height - bitmap.Height;  	int half = difference / 2;  	g.DrawImage (bitmap' new Rectangle (0' half' bitmap.Width' bitmap.Height)' new Rectangle (0' 0' bitmap.Width' bitmap.Height)' GraphicsUnit.Pixel);  }  
Magic Number,imageResolutionRatio,Form1,C:\repos\iboalali_Image-Resolution-Ratio-Calculator\imageResolutionRatio\Form1.cs,paintImage,The following statement contains a magic number: if (copyWidth == true) {  	int difference = width - bitmap.Width;  	int half = difference / 2;  	g.DrawImage (bitmap' new Rectangle (half' 0' bitmap.Width' bitmap.Height)' new Rectangle (0' 0' bitmap.Width' bitmap.Height)' GraphicsUnit.Pixel);  }  else {  	int difference = height - bitmap.Height;  	int half = difference / 2;  	g.DrawImage (bitmap' new Rectangle (0' half' bitmap.Width' bitmap.Height)' new Rectangle (0' 0' bitmap.Width' bitmap.Height)' GraphicsUnit.Pixel);  }  
